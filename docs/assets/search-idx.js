export default [
    {
        "title": "Home",
        "fileName": "index.html",
        "text": "Home Project Home Use the apexdox.homePagePath  setting to point to an HTML file that contains details about your project. The body of the HTML will show up here instead of this default!"
    },
    {
        "title": "ActionPlanCreateInvocable",
        "fileName": "ActionPlanCreateInvocable.html",
        "text": "ActionPlanCreateInvocable Signature global without sharing class ActionPlanCreateInvocable David Schach2022 ActionPlanCreateInvocable Methods makeActionPlanFromTemplate(requests) Invocable Apex for creating Action Plans from a template, a parent ID, and days from now to start the task due dates makeActionPlanFromTemplate(requests) Invocable Apex for creating Action Plans from a template, a parent ID, and days from now to start the task due dates Signature @InvocableMethod(label='Create Action Plan From Template' description='Takes a Template Name/Id and Record Id and makes an Action Plan for that record.' category='ActionPlans') global static List<Id> makeActionPlanFromTemplate(List<CreateActionPlanRequest> requests) Parameters requests Type: List<CreateActionPlanRequest> Wrapper of CreateActionPlanRequest Returns List<Id>  of the created Action Plans ActionPlanCreateInvocable.CreateActionPlanRequest Wrapper class for ActionPlan Request for invocable Apex. Signature global class CreateActionPlanRequest David Schach2022 ActionPlanCreateInvocable.CreateActionPlanRequest Properties Name Signature Description daysToActionPlanStart global Integer daysToActionPlanStart Days from trigger to start Action Plan relatedRecordID global Id relatedRecordID The parent Record ID templateNameOrID global String templateNameOrID The template Id or Name to use(accepts either, but Id is preferred)"
    },
    {
        "title": "ActionPlanCreationController",
        "fileName": "ActionPlanCreationController.html",
        "text": "ActionPlanCreationController Controller for ActionPlan Create and ActionPlan Edit screens(the same page overrides both actions) Signature public with sharing class ActionPlanCreationController See ActionPlanCreateInvocable Rodrigo Birriel David Schach2011 ActionPlanCreationController Properties Name Signature Annotations Description actionPlan private ActionPlan__c actionPlan @TestVisible apTasks public List<APTaskTemplate__c> apTasks apTasksOrg public List<APTaskTemplate__c> apTasksOrg canDisplayReminder public Boolean canDisplayReminder cloneParam private String cloneParam errorMsg private String errorMsg hasRelated public Boolean hasRelated hasRelatedObject public Boolean hasRelatedObject inVisualforceContext private Boolean inVisualforceContext @testVisible mapTasksListBkp private Map<Id, ApTaskWrapper> mapTasksListBkp mySettings private Action_Plans_Settings__c mySettings pendingDeletes public List<APTaskTemplate__c> pendingDeletes refId public String refId Getter and Setter for refId(related record Id) refType public String refType Getter and Setter for RefType(related object Name) relatedFieldName public String relatedFieldName Get the specific lookup field used by this Aciton Plan relatedObjDisplayField public String relatedObjDisplayField relatedObjectName public String relatedObjectName relatedObjectNameMap private Map<Id, String> relatedObjectNameMap relatedObjectOptions private List<SelectOption> relatedObjectOptions relatedObjIds public Set<Id> relatedObjIds relatedObjLabelPlural public String relatedObjLabelPlural relatedObjNameList public List<String> relatedObjNameList We need a list of parent RECORD names when showing all the parents when we mass-create action plans This initializes the list, and then divides it into three parts for three columns on the page. relatedRecordsOne public List<String> relatedRecordsOne relatedRecordsThree public List<String> relatedRecordsThree relatedRecordsTwo public List<String> relatedRecordsTwo set private set set private set subtitle public String subtitle taskHasRecordType public Boolean taskHasRecordType If the Task object has Record Types enabled, return true taskIndex private Double taskIndex taskPriorities private List<SelectOption> taskPriorities taskTypes private List<SelectOption> taskTypes templateId private Id templateId ActionPlanCreationController Constructors ActionPlanCreationController(stdController) Constructor for ActionPlan Create/Edit Page ActionPlanCreationController(stdController) Constructor for ActionPlan Create/Edit Page Signature public ActionPlanCreationController(ApexPages.StandardController stdController) Parameters stdController Type: ApexPages.StandardController ActionPlan__c  standard controller Author David Schach ActionPlanCreationController Methods addTask() Creates a blank APTaskTemplate__c object and adds it to List<APTaskTemplate__c> calculateAPTaskIndexValue() Calculates the highest task index value for Action Plan Tasks calculateAPTTaskIndexValue() Calculates the highest task index value for Action Plan Template Tasks cancel() Action that forwards to previous page checkCycleDependent() Checks if Action Plan Tasks has cyclic dependency. checkPendingDeletes() Check if have pending Tasks to delete chooseDisplayField(objectName) Based on the related object name, we display a field from that object as the related record dependantCycle(controllingTask, index) Check for cyclically dependent tasks findActivityEnabledObjects() getAPTasks() Gets Tasks related to an Action Plan getCompleted() Retrieves number of completed tasks getDefaultTaskRecordTypeId() Find user default task recordtype getDisplayTemplateLookup() Retrieves if template lookup must be displayed getErrorMsg() Getter method to return the error message getHoursOption() Generate picklist of available task due times getNameListSize() The size of the list of related objects available as parents to the Action Plan getRecordTypeName() Convert Record Type Id to Record Type Name for the Action Plan's Tasks getRelatedObjectOptions() Getter method with the related object options by default. getSubjectItems() Returns list of Dependent tasks to fill drop down getTaskPriorities() Generate picklist of Task Priorities getTaskRTPicklistValues() Generate picklist of Task Record Types getTasks() Method that retrieves all AP tasks for a Action Plan getTaskTypes() Generate picklist of Task Types hasRelatedObject() Check if the action plan has a related object initCloneActionPlan() Initalize controller for cloning an Action Plan initEditActionPlan() Initalize controller for editing an Action Plan initNewActionPlan() Initalize controller for creating a new Action Plan initNewActionPlanFromTemplate(visualforceContext) Initalize controller for creating a new Action Plan from a template Used so we can instantiate this controller from Invocable Apex initNewActionPlanFromTemplate(visualforceContext, apt) initNewActionPlanFromTemplate description onLoad() Action on page load to ensure custom setting is created parseRelatedIDs(relatedIDs) referedObjectInit() Set the Refered object to Create New Action Plan refreshRelatedObjectsLookUp() Refresh the related object lookup field. relatedObjectId() Returns the related object Id from lookup fields. removeTask() Action for removing a existing task retrieveNameRelatedRecord(relatedObjIds, relatedObjectName) Query the names of the parent records from the IDs. Some standard objects have special \"name\" fields retrieveTaskFromExistingActionPlan(actionPlanId) Get a Existing Action Plan Task List save() Action which saves a new Action Plan saveAndNew() Saves Action Plan Instance and tasks and returns to the creation page with the previous Action Plan's details. saveAp() Saves Action Plan Instance and task. Also creates all due dates for tasks, then redirects to the AP list saveHandler() Saves Action Plan Handler. Decides if we are assigning to multiple parent records or just one saveMultiple() Save Action Plans for Multiple Related Object Instances. Invokes batch process that creates : ActionPlan, ActionPlanTasksTemplate AND Tasks savePageRef() Saves Action Plan Instance and tasks and redirects to that detail page addTask() Creates a blank APTaskTemplate__c object and adds it to List<APTaskTemplate__c> Signature public void addTask() calculateAPTaskIndexValue() Calculates the highest task index value for Action Plan Tasks Signature public Double calculateAPTaskIndexValue() Returns maxIndex calculateAPTTaskIndexValue() Calculates the highest task index value for Action Plan Template Tasks Signature public Double calculateAPTTaskIndexValue() Returns maxIndex cancel() Action that forwards to previous page Signature public PageReference cancel() Returns PageReference checkCycleDependent() Checks if Action Plan Tasks has cyclic dependency. Signature public Boolean checkCycleDependent() Returns True if there is a cyclic dependency checkPendingDeletes() Check if have pending Tasks to delete Signature private void checkPendingDeletes() chooseDisplayField(objectName) Based on the related object name, we display a field from that object as the related record Signature private String chooseDisplayField(String objectName) Parameters objectName Type: String SObject Name Returns The display field Author David Schach dependantCycle(controllingTask, index) Check for cyclically dependent tasks Signature private Boolean dependantCycle(APTaskTemplate__c controllingTask, Integer index) Parameters controllingTask Type: APTaskTemplate__c The task we are checking index Type: Integer The index of the task(for referencing the controllign one) Returns Boolean  Does this task have a dependency? findActivityEnabledObjects() Signature private Set<String> findActivityEnabledObjects() getAPTasks() Gets Tasks related to an Action Plan Signature public List<APTaskTemplate__c> getAPTasks() Returns apTasks getCompleted() Retrieves number of completed tasks Signature public Integer getCompleted() Returns Integer getDefaultTaskRecordTypeId() Find user default task recordtype Signature @testVisible private Id getDefaultTaskRecordTypeId() Returns default task record type Id getDisplayTemplateLookup() Retrieves if template lookup must be displayed Signature public Boolean getDisplayTemplateLookup() Returns True if there is a related record or if there is a template ID provided getErrorMsg() Getter method to return the error message Signature public String getErrorMsg() Returns Error message getHoursOption() Generate picklist of available task due times Signature public List<SelectOption> getHoursOption() Returns picklist of 30-minute intervals getNameListSize() The size of the list of related objects available as parents to the Action Plan Signature public Integer getNameListSize() Returns The picklist size Author David Schach getRecordTypeName() Convert Record Type Id to Record Type Name for the Action Plan's Tasks Signature public String getRecordTypeName() Returns Task Record Type Name for the current Action Plan getRelatedObjectOptions() Getter method with the related object options by default. Signature public List<SelectOption> getRelatedObjectOptions() Returns Picklist of all related objects to Action Plan getSubjectItems() Returns list of Dependent tasks to fill drop down Signature public List<SelectOption> getSubjectItems() Returns List<SelectOption> All other AP Task subjects getTaskPriorities() Generate picklist of Task Priorities Signature public List<SelectOption> getTaskPriorities() Returns Picklist of Task.Priority getTaskRTPicklistValues() Generate picklist of Task Record Types Signature public List<SelectOption> getTaskRTPicklistValues() Returns Picklist of Task.RecordType  options getTasks() Method that retrieves all AP tasks for a Action Plan Signature public List<ApTaskWrapper> getTasks() Returns The List<ApTaskWrapper>  of AP Task Wrappers getTaskTypes() Generate picklist of Task Types Signature public List<SelectOption> getTaskTypes() Returns Picklist of Task.Type hasRelatedObject() Check if the action plan has a related object Signature public Boolean hasRelatedObject() Returns hasRelated; initCloneActionPlan() Initalize controller for cloning an Action Plan Signature public void initCloneActionPlan() initEditActionPlan() Initalize controller for editing an Action Plan Signature public void initEditActionPlan() initNewActionPlan() Initalize controller for creating a new Action Plan Signature public void initNewActionPlan() initNewActionPlanFromTemplate(visualforceContext) Initalize controller for creating a new Action Plan from a template Used so we can instantiate this controller from Invocable Apex Signature private void initNewActionPlanFromTemplate(Boolean visualforceContext) Parameters visualforceContext Type: Boolean Are we in Visualforce context? Author David Schach initNewActionPlanFromTemplate(visualforceContext, apt) initNewActionPlanFromTemplate description Signature private void initNewActionPlanFromTemplate(Boolean visualforceContext, ActionPlanTemplate__c apt) Parameters visualforceContext Type: Boolean visualforceContext description apt Type: ActionPlanTemplate__c apt description Author David Schach onLoad() Action on page load to ensure custom setting is created Signature public PageReference onLoad() Returns null parseRelatedIDs(relatedIDs) Signature private List<Id> parseRelatedIDs(String relatedIDs) referedObjectInit() Set the Refered object to Create New Action Plan Signature public void referedObjectInit() refreshRelatedObjectsLookUp() Refresh the related object lookup field. Signature public PageReference refreshRelatedObjectsLookUp() Returns PageReference  null relatedObjectId() Returns the related object Id from lookup fields. Signature @testVisible private Id relatedObjectId() Returns the related object id removeTask() Action for removing a existing task Signature public void removeTask() retrieveNameRelatedRecord(relatedObjIds, relatedObjectName) Query the names of the parent records from the IDs. Some standard objects have special \"name\" fields Signature private List<String> retrieveNameRelatedRecord(Set<Id> relatedObjIds, String relatedObjectName) Parameters relatedObjIds Type: Set<Id> The related object IDs relatedObjectName Type: String The name of the SObject for which the IDs refer Returns List of related record names retrieveTaskFromExistingActionPlan(actionPlanId) Get a Existing Action Plan Task List Signature public static List<APTaskTemplate__c> retrieveTaskFromExistingActionPlan(Id actionPlanId) Parameters actionPlanId Type: Id Returns All template tasks save() Action which saves a new Action Plan Signature public PageReference save() Returns PageReference See ActionPlanCreationController.saveHandler saveAndNew() Saves Action Plan Instance and tasks and returns to the creation page with the previous Action Plan's details. Signature public PageReference saveAndNew() Returns newPage saveAp() Saves Action Plan Instance and task. Also creates all due dates for tasks, then redirects to the AP list Signature public Id saveAp() saveHandler() Saves Action Plan Handler. Decides if we are assigning to multiple parent records or just one Signature public PageReference saveHandler() Returns Pagereference called Method See ActionPlanCreationController.save saveMultiple() Save Action Plans for Multiple Related Object Instances. Invokes batch process that creates : ActionPlan, ActionPlanTasksTemplate AND Tasks Signature public PageReference saveMultiple() Returns Pagereference savePageRef() Saves Action Plan Instance and tasks and redirects to that detail page Signature public PageReference savePageRef() Returns newPage ActionPlanCreationController.ApTaskWrapper Wrapper Class for AP Task SObject Signature public class ApTaskWrapper Rodrigo Birriel David Schach08/01/2010 4/2022 ActionPlanCreationController.ApTaskWrapper Properties Name Signature displayLookUp public Boolean displayLookUp isLast public Boolean isLast position public Integer position task public APTaskTemplate__c task userRequired public Boolean userRequired ActionPlanCreationController.ApTaskWrapper Constructors ApTaskWrapper(apTask, pos, looKp, userReq, apTaskRTId) ApTaskWrapper(apTask, pos, looKp, userReq, apTaskRTId) Signature public ApTaskWrapper(APTaskTemplate__c apTask, Integer pos, Boolean looKp, Boolean userReq, Id apTaskRTId) Parameters apTask Type: APTaskTemplate__c Action Plan Task Template pos Type: Integer Position(in the list of AP Tasks) on the Page looKp Type: Boolean Should the User lookup(for assignment) be displayed? userReq Type: Boolean Should the assigned user field be required? apTaskRTId Type: Id The Record Type of the Task eventually to be created"
    },
    {
        "title": "ActionPlanDetailController",
        "fileName": "ActionPlanDetailController.html",
        "text": "ActionPlanDetailController Signature public with sharing class ActionPlanDetailController See ActionPlanDetailControllerTest David Schach2011 ActionPlanDetailController Properties Name Signature Description actionPlan private ActionPlan__c actionPlan apTaskWrapperList private List<TaskWrapper> apTaskWrapperList canDisplayReminder public Boolean canDisplayReminder Does the user have reminders enabled? If not, do not shrae the reminder option hasRecordType public Boolean hasRecordType Does the org have Record Types enabled for Task SObject ActionPlanDetailController Constructors ActionPlanDetailController(stdController) Constructor ActionPlanDetailController(stdController) Constructor Signature public ActionPlanDetailController(ApexPages.StandardController stdController) ActionPlanDetailController Methods deletePlan() Deletes the current Action Plan loaded and redirects to the AP List getActionPlanTasks() Collect and return all TaskWrappers getCompleted() Returns number of completed tasks getRecordTypeName() Convert AP Task Record Type Id to Record Type Name getRelatedObjectLabel() The label of the Action Plan's parent record SObject getrelatedRecordName() The name of the parent record - show a different field based on SObject Type getVersion() Checks if Action Plan Template has been changed since the creation of the Action Plan. deletePlan() Deletes the current Action Plan loaded and redirects to the AP List Signature public PageReference deletePlan() Returns Page to go to after deleting ActionPlan__c getActionPlanTasks() Collect and return all TaskWrappers Signature public List<TaskWrapper> getActionPlanTasks() Returns List of TaskWrapper  for this Action Plan getCompleted() Returns number of completed tasks Signature public Integer getCompleted() Returns Number of completed tasks getRecordTypeName() Convert AP Task Record Type Id to Record Type Name Signature public String getRecordTypeName() Returns Record Type Name getRelatedObjectLabel() The label of the Action Plan's parent record SObject Signature public String getRelatedObjectLabel() Returns label of the object related to this Action Plan getrelatedRecordName() The name of the parent record - show a different field based on SObject Type Signature public String getrelatedRecordName() Returns name of the object related to this Action Plan getVersion() Checks if Action Plan Template has been changed since the creation of the Action Plan. Signature public Boolean getVersion() Returns Was the AP's template modified after the Action Plan was created? ActionPlanDetailController.TaskWrapper Wrapper for Action Plan Task Template Signature public class TaskWrapper ActionPlanDetailController.TaskWrapper Properties Name Signature apt public APTaskTemplate__c apt taskId public Id taskId ActionPlanDetailController.TaskWrapper Constructors TaskWrapper(aptParam, taskIdParam) TaskWrapper(aptParam, taskIdParam) Signature public TaskWrapper(APTaskTemplate__c aptParam, Id taskIdParam)"
    },
    {
        "title": "ActionPlanTemplateCreationController",
        "fileName": "ActionPlanTemplateCreationController.html",
        "text": "ActionPlanTemplateCreationController Extension for Action Plan Template  Create/Edit page Signature public with sharing class ActionPlanTemplateCreationController 2011 ActionPlanTemplateCreationController Properties Name Signature Annotations Description actionPlanTemplate private ActionPlanTemplate__c actionPlanTemplate @testVisible aptTasks private List<APTTaskTemplate__c> aptTasks @TestVisible canDisplayReminder public Boolean canDisplayReminder Does the user have reminders enabled? errorMsg private String errorMsg Getter method to return the error message from action plans utilities pendingTemplateDeletes private List<APTTaskTemplate__c> pendingTemplateDeletes @testVisible subTitle public String subTitle Page SubTitle taskHasRecordType public Boolean taskHasRecordType Does the Task  object have Record Types enabled? taskIndex private Double taskIndex taskPriorities private List<SelectOption> taskPriorities Generate picklist of Task Priorities taskTypes private List<SelectOption> taskTypes Generate picklist of Task Types templateId private Id templateId ActionPlanTemplateCreationController Constructors ActionPlanTemplateCreationController(stdController) Constructor If we can obtain the Id from the page parameters then we search for that template and set the variable for that template. If we can't obtain the Id from the page parameters then we create a new template and obtain from the controller. Then we need to check if we are cloning the template; in that case clone the template without Id. ActionPlanTemplateCreationController(stdController) Constructor If we can obtain the Id from the page parameters then we search for that template and set the variable for that template. If we can't obtain the Id from the page parameters then we create a new template and obtain from the controller. Then we need to check if we are cloning the template; in that case clone the template without Id. Signature public ActionPlanTemplateCreationController(ApexPages.StandardController stdController) ActionPlanTemplateCreationController Methods addTemplateTask() Call method addTemplateTask() calculateTaskIndexValue() Calculates the highest task index value cancelTemplate() Call method cancelTemplate() checkCycleDependent() Checks if Action Plan Tasks has cyclic dependency. dependantCycle(destinyTask, index) getDefaultTaskRecordTypeId() Find user default recordtype getErrorMsg() getHoursOption() getTaskPriorities() getTaskRTPicklistValues() Generate picklist of Task Record Types getTaskTypes() getTemplateSubjectItems() Call method getTemplateSubjectItems() getTemplateTasks() Get all tasks related to the Action Template. getTemplateTaskSize() Return size of the APTTemplate Tasks List. getTemplateWrappers() Iterate over aptTasks onLoad() Action on page load to ensure custom setting is created removeTemplateTask() Call method removeTemplateTask() saveAndNew() Save and go to New page for Save and New saveTemplate() Saves Action Plan Template and all tasks, then redirects to the AP template list. First check for pending templates for delete, in case that exists then delete those objects. Then insert or update the Action Plan Template pending to save and save tasks to the template and attach relation to Action Plan. templateCycleDependent() Checks if Action Plans Tasks has cyclic dependency. addTemplateTask() Call method addTemplateTask() Signature public void addTemplateTask() calculateTaskIndexValue() Calculates the highest task index value Signature public Double calculateTaskIndexValue() Returns maxIndex cancelTemplate() Call method cancelTemplate() Signature public PageReference cancelTemplate() Returns PageReference checkCycleDependent() Checks if Action Plan Tasks has cyclic dependency. Signature public PageReference checkCycleDependent() Returns PageReference dependantCycle(destinyTask, index) Signature private Boolean dependantCycle(APTTaskTemplate__c destinyTask, Integer index) Parameters destinyTask Type: APTTaskTemplate__c index Type: Integer Returns Boolean getDefaultTaskRecordTypeId() Find user default recordtype Signature public Id getDefaultTaskRecordTypeId() getErrorMsg() Signature public String getErrorMsg() getHoursOption() Signature public List<SelectOption> getHoursOption() getTaskPriorities() Signature public List<SelectOption> getTaskPriorities() getTaskRTPicklistValues() Generate picklist of Task Record Types Signature public List<SelectOption> getTaskRTPicklistValues() getTaskTypes() Signature public List<SelectOption> getTaskTypes() getTemplateSubjectItems() Call method getTemplateSubjectItems() Signature public List<SelectOption> getTemplateSubjectItems() getTemplateTasks() Get all tasks related to the Action Template. Signature public List<APTTaskTemplate__c> getTemplateTasks() Returns aptTasks getTemplateTaskSize() Return size of the APTTemplate Tasks List. Signature public Integer getTemplateTaskSize() getTemplateWrappers() Iterate over aptTasks Signature public List<ApTTaskWrapper> getTemplateWrappers() onLoad() Action on page load to ensure custom setting is created Signature public PageReference onLoad() Returns null removeTemplateTask() Call method removeTemplateTask() Signature public void removeTemplateTask() saveAndNew() Save and go to New page for Save and New Signature public Pagereference saveAndNew() Returns PageReference saveTemplate() Saves Action Plan Template and all tasks, then redirects to the AP template list. First check for pending templates for delete, in case that exists then delete those objects. Then insert or update the Action Plan Template pending to save and save tasks to the template and attach relation to Action Plan. Signature public PageReference saveTemplate() Returns newPage templateCycleDependent() Checks if Action Plans Tasks has cyclic dependency. Signature public Boolean templateCycleDependent() Returns Boolean cyclicErrorExists ActionPlanTemplateCreationController.ApTTaskWrapper Inner Wrapper Class for Action Plan Template Tasks Signature public class ApTTaskWrapper Matias Menafra @createddate 08/08/2010 David Schach @updateddate 05/2022 ActionPlanTemplateCreationController.ApTTaskWrapper Properties Name Signature isLast public Boolean isLast position public Integer position task public APTTaskTemplate__c task ActionPlanTemplateCreationController.ApTTaskWrapper Constructors ApTTaskWrapper(apTask, pos, apTTaskRTId) ApTTaskWrapper(apTask, pos, apTTaskRTId) Signature public ApTTaskWrapper(APTTaskTemplate__c apTask, Integer pos, Id apTTaskRTId)"
    },
    {
        "title": "ActionPlanTemplateDetailController",
        "fileName": "ActionPlanTemplateDetailController.html",
        "text": "ActionPlanTemplateDetailController Signature public with sharing class ActionPlanTemplateDetailController 2011 ActionPlanTemplateDetailController Properties Name Signature Annotations actionPlanExportXMLId public Id actionPlanExportXMLId actionPlanTemplate private ActionPlanTemplate__c actionPlanTemplate @TestVisible canDisplayReminder public Boolean canDisplayReminder taskHasRecordType public Boolean taskHasRecordType ActionPlanTemplateDetailController Constructors ActionPlanTemplateDetailController(stdController) Constructor If we can obtain the Id from the page parameters then we search for that template and set the variable for that template. If we can't obtain the Id from the page parameters then we create a new template and obtain from the controller. ActionPlanTemplateDetailController(stdController) Constructor If we can obtain the Id from the page parameters then we search for that template and set the variable for that template. If we can't obtain the Id from the page parameters then we create a new template and obtain from the controller. Signature public ActionPlanTemplateDetailController(ApexPages.StandardController stdController) ActionPlanTemplateDetailController Methods deleteTemplate() Call method deleteTemplate() exportTemplateToXMLDoc() Flush the viewstate to make cloning work Commenting for now; will add this functionality getRecordTypeName() Convert Record Type Id to Record Type Name getSuccessMessage() getTemplateTasks() Call method getTemplateTasks() deleteTemplate() Call method deleteTemplate() Signature public PageReference deleteTemplate() Returns PageReference exportTemplateToXMLDoc() Flush the viewstate to make cloning work Commenting for now; will add this functionality Signature public void exportTemplateToXMLDoc() Returns PageReference pageRef edit page getRecordTypeName() Convert Record Type Id to Record Type Name Signature public String getRecordTypeName() Returns Record Type Name getSuccessMessage() Signature public String getSuccessMessage() getTemplateTasks() Call method getTemplateTasks() Signature public List<APTTaskTemplate__c> getTemplateTasks() Returns List<APTTaskTemplate__c>"
    },
    {
        "title": "ActionPlanTemplateExport",
        "fileName": "ActionPlanTemplateExport.html",
        "text": "ActionPlanTemplateExport Signature public without sharing class ActionPlanTemplateExport 2011 ActionPlanTemplateExport Properties Name Signature fileOrDocumentId public Id fileOrDocumentId templateId private String templateId ActionPlanTemplateExport Constructors ActionPlanTemplateExport(templateId) Constructor ActionPlanTemplateExport(templateId) Constructor Signature public ActionPlanTemplateExport(String templateId) Parameters templateId Type: String ActionPlanTemplateExport Methods buildXmlString(target) Method in charge of compiling XML document for a given Action Plan Template and child tasks export() Method in charge of handling the export task related to a Action Plan Template saveToContent(name, xml) Method to save the XML file to a File(if the user is using Lightning Experience) saveToDocument(name, xml) Method in charge of saving document in personal folder for later retrievel writeElement(out, tag, content) Method used for sanatizing input for XML document buildXmlString(target) Method in charge of compiling XML document for a given Action Plan Template and child tasks Signature @TestVisible private String buildXmlString(ActionPlanTemplate__c target) Parameters target Type: ActionPlanTemplate__c Returns ret export() Method in charge of handling the export task related to a Action Plan Template Signature public Id export() Returns doc saveToContent(name, xml) Method to save the XML file to a File(if the user is using Lightning Experience) Signature @TestVisible private Id saveToContent(String name, String xml) saveToDocument(name, xml) Method in charge of saving document in personal folder for later retrievel Signature @TestVisible private Id saveToDocument(String name, String xml) Parameters name Type: String xml Type: String Returns doc writeElement(out, tag, content) Method used for sanatizing input for XML document Signature private void writeElement(Xmlstreamwriter out, String tag, String content) Parameters out Type: Xmlstreamwriter tag Type: String content Type: String"
    },
    {
        "title": "ActionPlanTemplateImport",
        "fileName": "ActionPlanTemplateImport.html",
        "text": "ActionPlanTemplateImport Signature public inherited sharing class ActionPlanTemplateImport 2011 ActionPlanTemplateImport Properties Name Signature importedTasks private Map<Id, APTTaskTemplate__c> importedTasks newTasks private Map<Id, APTTaskTemplate__c> newTasks ActionPlanTemplateImport Constructors ActionPlanTemplateImport() Constructor ActionPlanTemplateImport() Constructor Signature public ActionPlanTemplateImport() ActionPlanTemplateImport Methods getDecodedString(reader) Method for decoding strings from XML document importAPTemplate(xml) Method for handling importing of a Action Plan Template Object importAPTtasks(xml, apTemplateId) Method for handling importing of Action Plan Template Task Objects parseMetaData(reader) Method in charge of parsing meta data from XMl document parseTemplate(reader) Method in charge of parsing data from XMl document to create a Action Plan Template Object parseTemplateTask(reader, apTemplateId) Method in charge of parsing data from XMl document to create a Template Task Object processImportedDocument(document) Method in charge of retrieving and compiling the data from imported file, for then inserting into the system. readingMetaData(xml) Method for reading the meta data tag from xml document setupDependentTasks() Method in charge of re-building dependent tasks for imported Action Plans Template getDecodedString(reader) Method for decoding strings from XML document Signature private String getDecodedString(Xmlstreamreader reader) Parameters reader Type: Xmlstreamreader Returns String importAPTemplate(xml) Method for handling importing of a Action Plan Template Object Signature private ActionPlanTemplate__c importAPTemplate(String xml) Parameters xml Type: String import file Returns apTemplate importAPTtasks(xml, apTemplateId) Method for handling importing of Action Plan Template Task Objects Signature private void importAPTtasks(String xml, Id apTemplateId) Parameters xml Type: String import file apTemplateId Type: Id Action Plan Template Id parseMetaData(reader) Method in charge of parsing meta data from XMl document Signature private Boolean parseMetaData(Xmlstreamreader reader) Parameters reader Type: Xmlstreamreader Returns correctMetaData Exceptions ImportException parseTemplate(reader) Method in charge of parsing data from XMl document to create a Action Plan Template Object Signature private ActionPlanTemplate__c parseTemplate(Xmlstreamreader reader) Parameters reader Type: Xmlstreamreader Returns apTemplateAux parseTemplateTask(reader, apTemplateId) Method in charge of parsing data from XMl document to create a Template Task Object Signature private void parseTemplateTask(Xmlstreamreader reader, Id apTemplateId) Parameters reader Type: Xmlstreamreader XML reader apTemplateId Type: Id template Id @return processImportedDocument(document) Method in charge of retrieving and compiling the data from imported file, for then inserting into the system. Signature public String processImportedDocument(Attachment document) Parameters document Type: Attachment Attachment record Returns String Exceptions ImportException readingMetaData(xml) Method for reading the meta data tag from xml document Signature private void readingMetaData(String xml) Parameters xml Type: String String of import file Exceptions ImportException setupDependentTasks() Method in charge of re-building dependent tasks for imported Action Plans Template Signature private List<APTTaskTemplate__c> setupDependentTasks() Returns updatedTasks ActionPlanTemplateImport.ImportException Signature public class ImportException extends Exception"
    },
    {
        "title": "ActionPlanTemplateImportController",
        "fileName": "ActionPlanTemplateImportController.html",
        "text": "ActionPlanTemplateImportController Signature public with sharing class ActionPlanTemplateImportController 2011 ActionPlanTemplateImportController Properties Name Signature Description attachment public Attachment attachment The attachment to be used to hold imported xml ActionPlanTemplateImportController Constructors ActionPlanTemplateImportController() Constructor ActionPlanTemplateImportController() Constructor Signature public ActionPlanTemplateImportController() ActionPlanTemplateImportController Methods importTemplate() Action that initiates the Import process importTemplate() Action that initiates the Import process Signature public PageReference importTemplate() Returns PageReference"
    },
    {
        "title": "ActionPlansBatchBuilder",
        "fileName": "ActionPlansBatchBuilder.html",
        "text": "ActionPlansBatchBuilder Batch Signature public inherited sharing class ActionPlansBatchBuilder implements Database.Batchable<SObject>, Database.Stateful 2011 ActionPlansBatchBuilder Constructors ActionPlansBatchBuilder(baseObj, aPTList, refType, oIdsSet) Constructor ActionPlansBatchBuilder(baseObj, aPTList, refType, oIdsSet) Constructor Signature public ActionPlansBatchBuilder(ActionPlan__c baseObj, List<APTaskTemplate__c> aPTList, String refType, Set<Id> oIdsSet) ActionPlansBatchBuilder Methods execute(bc, data) Batch execute method finish(bc) Batch finish method. Do nothing start(bc) Use the start method to collect the records or objects to be passed to the interface method execute execute(bc, data) Batch execute method Signature public void execute(Database.BatchableContext bc, List<SObject> data) Parameters bc Type: Database.BatchableContext data Type: List<SObject> finish(bc) Batch finish method. Do nothing Signature public void finish(Database.BatchableContext bc) start(bc) Use the start method to collect the records or objects to be passed to the interface method execute Signature public Iterable<sObject> start(Database.BatchableContext bc)"
    },
    {
        "title": "ActionPlansBatchBuilderUtilities",
        "fileName": "ActionPlansBatchBuilderUtilities.html",
        "text": "ActionPlansBatchBuilderUtilities Batch Utilities class Signature public inherited sharing class ActionPlansBatchBuilderUtilities See ActionPlanCreateInvocable , ActionPlanCreationController , ActionPlansBatchBuilder 2011 ActionPlansBatchBuilderUtilities Properties Name Signature baseAPTaskList private List<APTaskTemplate__c> baseAPTaskList mode private ApEditMode mode myNewTasksWithEmail private List<Task> myNewTasksWithEmail myOldTasksWithEmail private List<Task> myOldTasksWithEmail myTasksWithOutEmail private List<Task> myTasksWithOutEmail relActionPlans private List<ActionPlan__c> relActionPlans relAPTaskList private List<APTaskTemplate__c> relAPTaskList relatedObjectName private String relatedObjectName relatedRecordIDs private Set<Id> relatedRecordIDs Enums Name Signature Values ApEditMode public enum ApEditMode MODE_EDIT_SINGLE, MODE_NEW ActionPlansBatchBuilderUtilities Constructors ActionPlansBatchBuilderUtilities(baseObj, aPTListparam, refType, oIdsLIst) ActionPlansBatchBuilderUtilities(baseObj, aPTListparam, refType, oIdsLIst) Signature public ActionPlansBatchBuilderUtilities(ActionPlan__c baseObj, List<APTaskTemplate__c> aPTListparam, String refType, Set<Id> oIdsLIst) ActionPlansBatchBuilderUtilities Methods generateActionPlans() Generate Action Plans from parameters passed to this class generateObjectFeeds(objIds) Generate New FeedItems  for multiple Action Plans getAPTaskTemplateUser(ap, relObjOwners, apTaskUser) Read the Action Plan and see the custom setting to determine who should own the at Template getObjects(bc) getPostObjectBody(recID, apName) Given a parentID and the name of an Action Plan, make the FeedItem  post body getRelatedRecordOwnerId(ap, relObjOwners) retrieveOwnersDataRelatedObject(relatedObjIds, relatedObjectName) Retrieve the owner list from the related object. generateActionPlans() Generate Action Plans from parameters passed to this class Signature public Id generateActionPlans() Returns the Id  of the first created ActionPlan__c Author David Schach generateObjectFeeds(objIds) Generate New FeedItems  for multiple Action Plans Signature public static void generateObjectFeeds(Set<Id> objIds) Parameters objIds Type: Set<Id> Set of IDs of records for which we may make Chatter posts getAPTaskTemplateUser(ap, relObjOwners, apTaskUser) Read the Action Plan and see the custom setting to determine who should own the at Template Signature public static Id getAPTaskTemplateUser(ActionPlan__c ap, Map<Id, Id> relObjOwners, Id apTaskUser) Parameters ap Type: ActionPlan__c ActionPlan__c  relObjOwners Type: Map<Id, Id> Map of ID to record owner apTaskUser Type: Id the current record user Returns Id  related OwnerID getObjects(bc) Signature public Iterable<sObject> getObjects(Database.BatchableContext bc) getPostObjectBody(recID, apName) Given a parentID and the name of an Action Plan, make the FeedItem  post body Signature public static String getPostObjectBody(Id recID, String apName) Parameters recID Type: Id Parent ID apName Type: String Action Plan Name Returns FeedItem.Body Author David Schach getRelatedRecordOwnerId(ap, relObjOwners) Signature public static Id getRelatedRecordOwnerId(ActionPlan__c ap, Map<Id, Id> relObjOwners) Parameters ap Type: ActionPlan__c ActionPlan__c  relObjOwners Type: Map<Id, Id> Map of related object ID  to OwnerId Returns The related record OwnerId retrieveOwnersDataRelatedObject(relatedObjIds, relatedObjectName) Retrieve the owner list from the related object. Signature public static Map<Id, Id> retrieveOwnersDataRelatedObject(Set<Id> relatedObjIds, String relatedObjectName) Parameters relatedObjIds Type: Set<Id> list of sobjects' id relatedObjectName Type: String"
    },
    {
        "title": "ActionPlansBatchDelete",
        "fileName": "ActionPlansBatchDelete.html",
        "text": "ActionPlansBatchDelete Batch delete class. This can probably be done in a different way. And we can certainly switch from sending an email to using a platform event. Signature public inherited sharing class ActionPlansBatchDelete implements Database.Batchable<SObject>, Database.Stateful 2011 ActionPlansBatchDelete Properties Name Signature relActionPlansIds private Set<Id> relActionPlansIds ActionPlansBatchDelete Constructors ActionPlansBatchDelete(oIDsSet) Constructor ActionPlansBatchDelete(oIDsSet) Constructor Signature public ActionPlansBatchDelete(Set<Id> oIDsSet) ActionPlansBatchDelete Methods deleteActionPlans(relActionPlansIds) Tiven actionplanIDs, delete these Action Plans AND their open Tasks execute(bc, data) For each batch, delete the action plans and send an email on any errors finish(bc) No need to do anything at the finish makeEmailBody(e) Create an Email body from an Exception start(bc) Use the start method to collect the records or objects to be passed to the interface method execute deleteActionPlans(relActionPlansIds) Tiven actionplanIDs, delete these Action Plans AND their open Tasks Signature private void deleteActionPlans(Set<Id> relActionPlansIds) Parameters relActionPlansIds Type: Set<Id> Action Plan IDs Author David Schach execute(bc, data) For each batch, delete the action plans and send an email on any errors Signature public void execute(Database.BatchableContext bc, List<SObject> data) Parameters bc Type: Database.BatchableContext BatchableContext data Type: List<SObject> List<SObject> records to be deleted Author David Schach finish(bc) No need to do anything at the finish Signature public void finish(Database.BatchableContext bc) makeEmailBody(e) Create an Email body from an Exception Signature private String makeEmailBody(Exception e) Parameters e Type: Exception Exception Returns Email body Author David Schach start(bc) Use the start method to collect the records or objects to be passed to the interface method execute Signature public Database.QueryLocator start(Database.BatchableContext bc) Parameters bc Type: Database.BatchableContext Returns queried records Author David Schach"
    },
    {
        "title": "ActionPlansBatchTaskBuilder",
        "fileName": "ActionPlansBatchTaskBuilder.html",
        "text": "ActionPlansBatchTaskBuilder When we have more than one task to create, run it in batch context for higher limits Signature public without sharing class ActionPlansBatchTaskBuilder implements Database.Batchable<SObject>, Database.Stateful 2011 ActionPlansBatchTaskBuilder Properties Name Signature apTasks private List<APTaskTemplate__c> apTasks aptIds private List<Id> aptIds myTasksWithEmail private List<Task> myTasksWithEmail myTasksWithOutEmail private List<Task> myTasksWithOutEmail ActionPlansBatchTaskBuilder Constructors ActionPlansBatchTaskBuilder(apttIds) Constructor ActionPlansBatchTaskBuilder(apttIds) Constructor Signature public ActionPlansBatchTaskBuilder(List<Id> apttIds) Parameters apttIds Type: List<Id> List of ActionPlansTemplateTaskTemplate  IDs ActionPlansBatchTaskBuilder Methods execute(bc, data) Eecute this method multiple times, by default on batches of 200 records finish(bc) Required finish method - we could do something here like send a platform event or notify the user that the batch is complete start(bc) execute(bc, data) Eecute this method multiple times, by default on batches of 200 records Signature public void execute(Database.BatchableContext bc, List<SObject> data) Parameters bc Type: Database.BatchableContext Database.BatchableContext  data Type: List<SObject> The list of SObjects to act on finish(bc) Required finish method - we could do something here like send a platform event or notify the user that the batch is complete Signature public void finish(Database.BatchableContext bc) Parameters bc Type: Database.BatchableContext BatchableContext Author Salesforce Labs start(bc) Signature public Database.QueryLocator start(Database.BatchableContext bc)"
    },
    {
        "title": "ActionPlansCanTheUser",
        "fileName": "ActionPlansCanTheUser.html",
        "text": "ActionPlansCanTheUser A reusable, intuitive library for determining wether or not the current use can create, read, edit, or delete objects as well as determining if the user has access or update permissions on specific fields. This class name was chosen to facilitate easy-to-understand and read code. Whenever you need to check FLS or CRUD access your code reads like this if(ActionPlansCanTheUser.read(new account())){}  making the calling and use of this code easy and intuitive. Taken from Codefriar code. Signature public inherited sharing class ActionPlansCanTheUser See https://github.com/codefriar/CanTheUser , https://github.com/trailheadapps/apex-recipes , ActionPlansCanTheUserTest , ActionPlansSafely Codefriar 2022 ActionPlansCanTheUser Properties Name Signature Annotations Description accessibleFieldsByObject private static Map<String, Set<String>> accessibleFieldsByObject @testVisible memoizedFLSResults private static Map<String, Map<FLSType, Boolean>> memoizedFLSResults This variable stores, within the same transaction, all previously calculated FLS results for an object. This prevents multiple calls to this library within the same transaction from executing more than a single describe call. updatableFieldsByObject private static Map<String, Set<String>> updatableFieldsByObject @testVisible Enums Name Signature Values CrudType public enum CrudType CREATEABLE, READABLE, EDITABLE, DELETABLE, UPSERTABLE FLSType public enum FLSType ACCESSIBLE, UPDATABLE ActionPlansCanTheUser Methods bulkFLSAccessible(obj, fields) bulk form of flsAccessible bulkFLSUpdatable(obj, fields) bulk form of flsUpdatable call calculateFLS(objType) Calculates the FLS for a given object type create(obj) convenience api for determining if the running user can create the specified object create(objs) convenience api for determining if the running user can create the specified object create(objName) convenience api for determining if the running user can create the specified object crud(obj, permission) This class' name was chosen to facilitate easy-to-understand and read code. Whenever you need to check FLS or CRUD access your code reads like this if(ActionPlansCanTheUser.read(new account())){}  making the calling and use of this code easy and intuitive. crud(objs, permission) crud(objectName, permission) destroy(obj) convenience api for determining if the running user can delete/destroy the specified object destroy(objs) convenience api for determining if the running user can delete the specified object destroy(objName) convenience api for determining if the running user can delete the specified object edit(obj) convenience api for determining if the running user can edit / update the specified object edit(objs) convenience api for determining if the running user can edit / update the specified objects edit(objName) convenience api for determining if the running user can edit the specified object flsAccessible(obj, field) public static method to determine if a given field on a given object is Accessible(readable) flsUpdatable(obj, field) public static method to determine if a given field on a given object is Updatable. getFLSForFieldOnObject(obj, field, checkType) Abstracted method for retrieving or calculating(memoization) of the FLS for a given field on a given object. read(obj) convenience api for determining if the running user can read / access the specified object read(objs) convenience api for determining if the running user can read / access the specified objects read(objName) convenience api for determining if the running user can read the specified object ups(obj) convenience api for determining if the running user can upsert(insert and update) the specified objects ups(objs) convenience api for determining if the running user can edit / update the specified objects ups(objName) convenience api for determining if the running user can upsert the specified object bulkFLSAccessible(obj, fields) bulk form of flsAccessible Signature public static Map<String, Boolean> bulkFLSAccessible(String obj, Set<String> fields) Parameters obj Type: String Obj name on which to check fields Type: Set<String> Set of Fields to check for accessibility. Returns Map<String, Boolean> Example String[] fields = new String[]{'Name', 'ShippingStreet'}; System.debug(ActionPlansCanTheUser.bulkFLSAccessible('Account', fields)); bulkFLSUpdatable(obj, fields) bulk form of flsUpdatable call Signature public static Map<String, Boolean> bulkFLSUpdatable(String obj, Set<String> fields) Parameters obj Type: String Name of the object fields Type: Set<String> Set of Field names to check Returns Map<String, Boolean> Example String[] fields = new String[]{'Name', 'ShippingStreet'}; System.debug(ActionPlansCanTheUser.bulkFLSUpdatable('Account', fields)); calculateFLS(objType) Calculates the FLS for a given object type Signature private static Map<String, Map<FLSType, Boolean>> calculateFLS(String objType) Parameters objType Type: String String name of the object type Returns Map<String, Map<FLSType, Boolean>> create(obj) convenience api for determining if the running user can create the specified object Signature public static Boolean create(SObject obj) Parameters obj Type: SObject Object type to check create permissions on Returns Boolean Example System.debug(ActionPlansCanTheUser.create(new Account())); create(objs) convenience api for determining if the running user can create the specified object Signature public static Boolean create(List<SObject> objs) Parameters objs Type: List<SObject> list of objects. Only the first will be checked.(logically, a list is of uniform type and, and if the user can create one) Returns Boolean create(objName) convenience api for determining if the running user can create the specified object Signature public static Boolean create(String objName) Parameters String Object type to check create permissions on Returns Boolean Example System.debug(ActionPlansCanTheUser.create('Account')); crud(obj, permission) This class' name was chosen to facilitate easy-to-understand and read code. Whenever you need to check FLS or CRUD access your code reads like this if(ActionPlansCanTheUser.read(new account())){}  making the calling and use of this code easy and intuitive. Signature @testVisible private static Boolean crud(SObject obj, CrudType permission) crud(objs, permission) Signature @testVisible private static Boolean crud(List<SObject> objs, CrudType permission) crud(objectName, permission) Signature @testVisible private static Boolean crud(String objectName, CrudType permission) destroy(obj) convenience api for determining if the running user can delete/destroy the specified object Signature public static Boolean destroy(SObject obj) Parameters obj Type: SObject object type to check destroy permissions on Returns Boolean Example System.debug(ActionPlansCanTheUser.destroy(new Account())); destroy(objs) convenience api for determining if the running user can delete the specified object Signature public static Boolean destroy(List<SObject> objs) Parameters String Object type to check delete permissions on Returns Boolean destroy(objName) convenience api for determining if the running user can delete the specified object Signature public static Boolean destroy(String objName) Parameters String Object type to check create permissions on Returns Boolean Example System.debug(ActionPlansCanTheUser.destroy('Account')); edit(obj) convenience api for determining if the running user can edit / update the specified object Signature public static Boolean edit(SObject obj) Parameters obj Type: SObject object type to check edit permissions on Returns Boolean Example System.debug(ActionPlansCanTheUser.edit(new Account())); edit(objs) convenience api for determining if the running user can edit / update the specified objects Signature public static Boolean edit(List<SObject> objs) Parameters obj object type to check edit permissions on Returns Boolean edit(objName) convenience api for determining if the running user can edit the specified object Signature public static Boolean edit(String objName) Parameters String Object type to check edit permissions on Returns Boolean Example System.debug(ActionPlansCanTheUser.edit('Account')); flsAccessible(obj, field) public static method to determine if a given field on a given object is Accessible(readable) Signature public static Boolean flsAccessible(String obj, String field) Parameters obj Type: String the object in question, in string form field Type: String the field in question in SObjectField form Returns Boolean Example System.debug(ActionPlansCanTheUser.flsAccessible('Account', 'Name')); flsUpdatable(obj, field) public static method to determine if a given field on a given object is Updatable. Signature public static Boolean flsUpdatable(String obj, String field) Parameters obj Type: String the string version of an object name field Type: String the field to check Returns Boolean Example System.debug(ActionPlansCanTheUser.flsUpdatable('Account', 'Name')); getFLSForFieldOnObject(obj, field, checkType) Abstracted method for retrieving or calculating(memoization) of the FLS for a given field on a given object. Signature private static Boolean getFLSForFieldOnObject(String obj, String field, FLSType checkType) Parameters obj Type: String String version of object name to check field Type: String String version of the field to check checkType Type: FLSType Enum of Accessible or Updatable. Returns Boolean read(obj) convenience api for determining if the running user can read / access the specified object Signature public static Boolean read(SObject obj) Parameters obj Type: SObject object type to check read permissions on Returns Boolean Example System.debug(ActionPlansCanTheUser.read(new Account())); read(objs) convenience api for determining if the running user can read / access the specified objects Signature public static Boolean read(List<SObject> objs) Parameters obj object type to check read permissions on Returns Boolean Example ActionPlansCanTheUser.read(new List<Account>{a1, a2})); read(objName) convenience api for determining if the running user can read the specified object Signature public static Boolean read(String objName) Parameters String Object type to check read permissions on Returns Boolean Example System.debug(ActionPlansCanTheUser.read('Account')); ups(obj) convenience api for determining if the running user can upsert(insert and update) the specified objects Signature public static Boolean ups(SObject obj) Parameters obj Type: SObject object type to check edit permissions on Returns Boolean Example System.debug(ActionPlansCanTheUser.ups(new Account())); ups(objs) convenience api for determining if the running user can edit / update the specified objects Signature public static Boolean ups(List<SObject> objs) Parameters obj object type to check upsert permissions on Returns Boolean ups(objName) convenience api for determining if the running user can upsert the specified object Signature public static Boolean ups(String objName) Parameters String Object type to check upsert permissions on Returns Boolean Example System.debug(ActionPlansCanTheUser.ups('Account'));"
    },
    {
        "title": "ActionPlansCreateMultipleAPsExtension",
        "fileName": "ActionPlansCreateMultipleAPsExtension.html",
        "text": "ActionPlansCreateMultipleAPsExtension Visualforce extension to create multiple Aciton Plans(one per selected record) Invoked via a button on a list view Signature public with sharing class ActionPlansCreateMultipleAPsExtension 2011 ActionPlansCreateMultipleAPsExtension Properties Name Signature Description objIDs public String objIDs All the selected records from the list view standardController private ApexPages.StandardSetController standardController ActionPlansCreateMultipleAPsExtension Constructors ActionPlansCreateMultipleAPsExtension(standardController) Controller ActionPlansCreateMultipleAPsExtension(standardController) Controller Signature public ActionPlansCreateMultipleAPsExtension(ApexPages.StandardSetController standardController) ActionPlansCreateMultipleAPsExtension Methods doRedirect() Go to the page that shows the ActionPlan creation screen to customize the plan for each selected record doRedirect() Go to the page that shows the ActionPlan creation screen to customize the plan for each selected record Signature public PageReference doRedirect() Returns The Action Plan creation page Author David Schach"
    },
    {
        "title": "ActionPlansDeleteMultipleAPExtension",
        "fileName": "ActionPlansDeleteMultipleAPExtension.html",
        "text": "ActionPlansDeleteMultipleAPExtension Controller for page to mass-delete using a set controller. Validates using CanTheUser to ensure user permissions Signature public with sharing class ActionPlansDeleteMultipleAPExtension See ActionPlansDeleteMultipleAPExtTest , CanTheUser David Schach2011 ActionPlansDeleteMultipleAPExtension Properties Name Signature actionPlansToShow public List<ActionPlan__c> actionPlansToShow standardController private ApexPages.StandardSetController standardController ActionPlansDeleteMultipleAPExtension Constructors ActionPlansDeleteMultipleAPExtension(standardController) ActionPlansDeleteMultipleAPExtension(standardController) Signature public ActionPlansDeleteMultipleAPExtension(ApexPages.StandardSetController standardController) ActionPlansDeleteMultipleAPExtension Methods deleteRecords() deleteRecords() Signature public PageReference deleteRecords()"
    },
    {
        "title": "ActionPlansPostInstallScript",
        "fileName": "ActionPlansPostInstallScript.html",
        "text": "ActionPlansPostInstallScript Install sample data on first installation Signature global class ActionPlansPostInstallScript implements InstallHandler David Schach2022 ActionPlansPostInstallScript Methods onInstall(context) onInstall(context) Signature global void onInstall(InstallContext context)"
    },
    {
        "title": "ActionPlansRedirect",
        "fileName": "ActionPlansRedirect.html",
        "text": "ActionPlansRedirect Visualforce controller for a redirect page to allow override of object actions Signature public with sharing class ActionPlansRedirect 2011 ActionPlansRedirect Properties Name Signature actionPlanTask private APTaskTemplate__c actionPlanTask actionPlanTemplateTask private APTTaskTemplate__c actionPlanTemplateTask parentId private Id parentId ActionPlansRedirect Constructors ActionPlansRedirect(controller) Controller. Gets the SObjectType and returns the correct page to display the record view ActionPlansRedirect(controller) Controller. Gets the SObjectType and returns the correct page to display the record view Signature public ActionPlansRedirect(ApexPages.StandardController controller) Parameters controller Type: ApexPages.StandardController Standard Controller. Accepts any SObject Author David Schach ActionPlansRedirect Methods redirect() Show the view page for either the Action Plan or the Action Plan Template redirect() Show the view page for either the Action Plan or the Action Plan Template Signature public Pagereference redirect() Returns PageReference by recordId('/' + parentId) Author David Schach"
    },
    {
        "title": "ActionPlansSafely",
        "fileName": "ActionPlansSafely.html",
        "text": "ActionPlansSafely Class wraps DML Calls in FLS / Crud checks. Taken from Codefriar code. Signature public with sharing class ActionPlansSafely See https://github.com/codefriar/ActionPlansCanTheUser , https://github.com/trailheadapps/apex-recipes , ActionPlansCanTheUser , ActionPlansSafelyTest Codefriar 2022 ActionPlansSafely Properties Name Signature Annotations allOrNothing private Boolean allOrNothing @testVisible throwIfRemovedFields private Boolean throwIfRemovedFields @testVisible ActionPlansSafely Methods allOrNothing() doDelete(records) doDelete(record) doDML(accessType, records) doInsert(records) doInsert(record) doQuery(query) doUpdate(records) doUpdate(record) doUpsert(records) doUpsert(record) guardAgainstRemovedFields(accessType, records) throwIfRemovedFields() allOrNothing() Signature public ActionPlansSafely allOrNothing() doDelete(records) Signature public List<Database.DeleteResult> doDelete(List<SObject> records) doDelete(record) Signature public List<Database.DeleteResult> doDelete(SObject record) doDML(accessType, records) Signature private List<Database.SaveResult> doDML(System.AccessType accessType, List<SObject> records) doInsert(records) Signature public List<Database.SaveResult> doInsert(List<SObject> records) doInsert(record) Signature public List<Database.SaveResult> doInsert(SObject record) doQuery(query) Signature public List<SObject> doQuery(String query) doUpdate(records) Signature public List<Database.SaveResult> doUpdate(List<SObject> records) doUpdate(record) Signature public List<Database.SaveResult> doUpdate(SObject record) doUpsert(records) Signature public List<Database.UpsertResult> doUpsert(List<SObject> records) doUpsert(record) Signature public List<Database.UpsertResult> doUpsert(Sobject record) guardAgainstRemovedFields(accessType, records) Signature private SObjectAccessDecision guardAgainstRemovedFields(System.AccessType accessType, List<SObject> records) throwIfRemovedFields() Signature public ActionPlansSafely throwIfRemovedFields() ActionPlansSafely.RemovedFieldsException Exception thrown if fields are removed from a query due to the user not having access Signature public class RemovedFieldsException extends Exception"
    },
    {
        "title": "ActionPlansSectionHeaderController",
        "fileName": "ActionPlansSectionHeaderController.html",
        "text": "ActionPlansSectionHeaderController Controller for the Section Header at the top of every VF page. Determines the icon for the page object Signature public inherited sharing class ActionPlansSectionHeaderController David Schach2022 ActionPlansSectionHeaderController Properties Name Signature Description objectName public String objectName The object for the Section Header ActionPlansSectionHeaderController Methods getIsCustom() Is this a custom object? getObjectIconInfo() Map of Icon attribute and value isCustom(sObjectName) Given an object name, return if it is a custom object retrieveIconForObject(sObjectName) Explores the schema of the soject passed in and finds lightning icon style and image url for sObject If nothing is found, defaults to the custom icon Code adapted from https://salesforce.stackexchange.com/questions/116688/lightning-get-sobject-tab-icon Thanks to https://salesforce.stackexchange.com/users/12582/cricketlang getIsCustom() Is this a custom object? Signature public Boolean getIsCustom() Returns true if custom object getObjectIconInfo() Map of Icon attribute and value Signature public Map<String, String> getObjectIconInfo() Returns Key-value pairs isCustom(sObjectName) Given an object name, return if it is a custom object Signature private Boolean isCustom(String sObjectName) retrieveIconForObject(sObjectName) Explores the schema of the soject passed in and finds lightning icon style and image url for sObject If nothing is found, defaults to the custom icon Code adapted from https://salesforce.stackexchange.com/questions/116688/lightning-get-sobject-tab-icon Thanks to https://salesforce.stackexchange.com/users/12582/cricketlang Signature private Map<String, String> retrieveIconForObject(String sObjectName) Parameters sObjectTypeName       the sObject to find the icon for Returns Map<String,String>    Map of properties about the icon to be consumed by the front end. Right now, returns values for keys: iconStyle,iconURL"
    },
    {
        "title": "ActionPlansTaskTriggerUtilities",
        "fileName": "ActionPlansTaskTriggerUtilities.html",
        "text": "ActionPlansTaskTriggerUtilities Set to WITHOUT sharing because this is only called from a trigger handler Signature public without sharing class ActionPlansTaskTriggerUtilities David Schach2011 ActionPlansTaskTriggerUtilities Properties Name Signature dependentAptts private static List<APTaskTemplate__c> dependentAptts tasksSendEmail private static List<Task> tasksSendEmail tasksSendNoEmail private static List<Task> tasksSendNoEmail ActionPlansTaskTriggerUtilities Methods actionsOnTaskBeforeDelete(cTasks) Before deleting an APTemplate task, initialize the functionalities to create all dependent Tasks and reset index deleteAPTasks(aPTasks) Delete Action Plan Tasks deleteTasks(apttIds) Delete Action Plan Tasks related Tasks generateDependentTasksAndReset(apTasks, tmp_taskIndex) initDependentTaskWork(cTasks) Initialize the functionalities to create all dependent Tasks populateNewTaskMap(dependentApttList) Cycle through list of dependent Action Plans Template Task and create actual tasks populateUpdateApttsList(dependentApttList) Cycle through list of dependent Action Plans Template Task and create tasks queryDependentAPTaskTemplates(closedTasks) Get list of dependent Action Plan Template Tasks updateActionPlansTemplateTaskStatus(cTasks) Update associated aptt of task to match status updateAPTasksStatus(cTasks) Update APTasks status as passed into method actionsOnTaskBeforeDelete(cTasks) Before deleting an APTemplate task, initialize the functionalities to create all dependent Tasks and reset index Signature public static void actionsOnTaskBeforeDelete(Set<Id> cTasks) Parameters cTasks Type: Set<Id> Set of Task template IDs to be deleted deleteAPTasks(aPTasks) Delete Action Plan Tasks Signature @future public static void deleteAPTasks(Set<Id> aPTasks) Parameters aPTasks Type: Set<Id> We are changing this to synchronous; can make future later deleteTasks(apttIds) Delete Action Plan Tasks related Tasks Signature @future public static void deleteTasks(Set<Id> apttIds) Parameters apttIds Type: Set<Id> generateDependentTasksAndReset(apTasks, tmp_taskIndex) Signature private static void generateDependentTasksAndReset(List<APTaskTemplate__c> apTasks, Decimal tmp_taskIndex) initDependentTaskWork(cTasks) Initialize the functionalities to create all dependent Tasks Signature @future public static void initDependentTaskWork(Map<Id, String> cTasks) Parameters cTasks Type: Map<Id, String> Map of Tasks by Id populateNewTaskMap(dependentApttList) Cycle through list of dependent Action Plans Template Task and create actual tasks Signature private static List<APTaskTemplate__c> populateNewTaskMap(List<APTaskTemplate__c> dependentApttList) populateUpdateApttsList(dependentApttList) Cycle through list of dependent Action Plans Template Task and create tasks Signature private static List<APTaskTemplate__c> populateUpdateApttsList(List<APTaskTemplate__c> dependentApttList) queryDependentAPTaskTemplates(closedTasks) Get list of dependent Action Plan Template Tasks Signature private static List<APTaskTemplate__c> queryDependentAPTaskTemplates(Set<Id> closedTasks) updateActionPlansTemplateTaskStatus(cTasks) Update associated aptt of task to match status Signature private static void updateActionPlansTemplateTaskStatus(Map<Id, String> cTasks) updateAPTasksStatus(cTasks) Update APTasks status as passed into method Signature @future public static void updateAPTasksStatus(Map<Id, String> cTasks) Parameters cTasks Type: Map<Id, String>"
    },
    {
        "title": "ActionPlansTestUtilities",
        "fileName": "ActionPlansTestUtilities.html",
        "text": "ActionPlansTestUtilities Utilities for Tests Signature public with sharing class ActionPlansTestUtilities 2011 ActionPlansTestUtilities Properties Name Signature Description forceError public static Boolean forceError forceHasRecordType public static Boolean forceHasRecordType showDebugParameters public static Boolean showDebugParameters Should we show debug statements for Visualforce parameters when testing? standardObjects public static Set<String> standardObjects ActionPlansTestUtilities Methods assignAPPermissionSets(testUserId, allOrNone) Assign a permissionSet to a user(via UserId) batchIds(relatedObject) Create Enviroment for BatchProcess return apTasksIds createNewAccount(insertRecord) Creates a new Account SObject With option to insert or just return the record createNewAccount() Creates a new Account SObject Defaults to inserting before returning createNewActionPlan(relatedObject, numTasks) Create Action Plan and APTaskss createNewActionPlanTask(actionPlan, days, user, category, priority) Create Action Plan Task template createNewActionPlanTemplate(numTasks) Create Action Plan Template createNewActionPlanTemplateTask(apTemplate, days, user, category, priority) Create Action Plan Template Task Template createNewCampaign(insertRecord) Creates a new Campaign SObject createNewCampaign() Creates a new Campaign SObject Defaults to inserting before returning createNewCase(insertRecord) Creates a new Case SObject createNewCase() Creates a new Case Object Defaults to inserting before returning createNewContact(insertRecord) Creates a new Contact Object createNewContact() Creates a new Contact Object Defaults to inserting before returning createNewContract(insertRecord) Creates a new Contract Object createNewContract() Creates a new Contract Object Defaults to inserting before returning createNewLead(insertRecord) Creates a new Lead Object createNewLead() Creates a new Lead Object Defaults to inserting before returning createNewOpportunity(insertRecord) Creates a new Opportunity Object createNewOpportunity() Creates a new Opportunity Object Defaults to inserting before returning createRandomWord() Random words are required for testing, as you will likely run into any word I can insert during a test class and produce false test results. createRandomWord(prefix) Make a random String  with a specific prefix and a random Integer createTestUser() createTestUser(p) Creates a new User debugParameters(prefix) Utility method for debugging Visualforce page parameters getNonDefaultAvailableTaskRecordType() Find a non-default Task Record Type assignAPPermissionSets(testUserId, allOrNone) Assign a permissionSet to a user(via UserId) Signature public List<PermissionSetAssignment> assignAPPermissionSets(Id testUserId, Boolean allOrNone) Parameters testUserId Type: Id The User ID allOrNone Type: Boolean Insert allOrNone, or allow an insert of only successful assingments, failing silently Returns The list of PermissionSetAssignment  records Author David Schach batchIds(relatedObject) Create Enviroment for BatchProcess return apTasksIds Signature public List<Id> batchIds(String relatedObject) createNewAccount(insertRecord) Creates a new Account SObject With option to insert or just return the record Signature public Account createNewAccount(Boolean insertRecord) Parameters insertRecord Type: Boolean insert the record before returning it? Returns newaccount createNewAccount() Creates a new Account SObject Defaults to inserting before returning Signature public Account createNewAccount() Returns newAccount createNewActionPlan(relatedObject, numTasks) Create Action Plan and APTaskss Signature public ActionPlan__c createNewActionPlan(String relatedObject, Integer numTasks) Parameters relatedObject Type: String The Related Object(included field) for the Action Plan numTasks Type: Integer How many tasks to create for the ActionPlan Returns newActionPlan createNewActionPlanTask(actionPlan, days, user, category, priority) Create Action Plan Task template Signature public APTaskTemplate__c createNewActionPlanTask(ActionPlan__c actionPlan, Integer days, User user, String category, String priority) Returns newAPTask createNewActionPlanTemplate(numTasks) Create Action Plan Template Signature public ActionPlanTemplate__c createNewActionPlanTemplate(Integer numTasks) Parameters numTasks Type: Integer Number of tasks to create Returns ActionPlanTemplate__c  record Author David Schach createNewActionPlanTemplateTask(apTemplate, days, user, category, priority) Create Action Plan Template Task Template Signature public APTTaskTemplate__c createNewActionPlanTemplateTask(ActionPlanTemplate__c apTemplate, Integer days, User user, String category, String priority) Parameters apTemplate Type: ActionPlanTemplate__c The parent ActionPlanTemplate__c object days Type: Integer Days from now to start Action Plan user Type: User The assigned user for each created task category Type: String Task Category priority Type: String Task Priority Returns The new Action Plan Template Task Template Author David Schach createNewCampaign(insertRecord) Creates a new Campaign SObject Signature public Campaign createNewCampaign(Boolean insertRecord) Parameters insertRecord Type: Boolean insert the record before returning it? Returns newCampaign createNewCampaign() Creates a new Campaign SObject Defaults to inserting before returning Signature public Campaign createNewCampaign() Returns newCampaign createNewCase(insertRecord) Creates a new Case SObject Signature public Case createNewCase(Boolean insertRecord) Parameters insertRecord Type: Boolean insert the record before returning it? Returns newCase createNewCase() Creates a new Case Object Defaults to inserting before returning Signature public Case createNewCase() Returns newCase createNewContact(insertRecord) Creates a new Contact Object Signature public Contact createNewContact(Boolean insertRecord) Parameters insertRecord Type: Boolean insert the record before returning it? Returns newContact createNewContact() Creates a new Contact Object Defaults to inserting before returning Signature public Contact createNewContact() Returns newContact createNewContract(insertRecord) Creates a new Contract Object Signature public Contract createNewContract(Boolean insertRecord) Parameters insertRecord Type: Boolean insert the record before returning it? Returns newContract createNewContract() Creates a new Contract Object Defaults to inserting before returning Signature public Contract createNewContract() Returns newContract createNewLead(insertRecord) Creates a new Lead Object Signature public Lead createNewLead(Boolean insertRecord) Parameters insertRecord Type: Boolean insert the record before returning it? Returns newLead createNewLead() Creates a new Lead Object Defaults to inserting before returning Signature public Lead createNewLead() Returns newLead createNewOpportunity(insertRecord) Creates a new Opportunity Object Signature public Opportunity createNewOpportunity(Boolean insertRecord) Parameters insertRecord Type: Boolean insert the record before returning it? Returns newOpportunity createNewOpportunity() Creates a new Opportunity Object Defaults to inserting before returning Signature public Opportunity createNewOpportunity() Returns newOpportunity createRandomWord() Random words are required for testing, as you will likely run into any word I can insert during a test class and produce false test results. Signature public String createRandomWord() Returns A random work createRandomWord(prefix) Make a random String  with a specific prefix and a random Integer Signature public String createRandomWord(String prefix) Parameters prefix Type: String The prefix Returns the random word Example createRandomWord('test'); test123456 createTestUser() Signature public User createTestUser() createTestUser(p) Creates a new User Signature public User createTestUser(Profile p) Parameters p Type: Profile Profile(not the Id) Returns Testuser debugParameters(prefix) Utility method for debugging Visualforce page parameters Signature public static void debugParameters(String prefix) Parameters prefix Type: String The line prefix for the debug statement Author David Schach getNonDefaultAvailableTaskRecordType() Find a non-default Task Record Type Signature public static Id getNonDefaultAvailableTaskRecordType() Returns The Id  of a non-default Task  Record Type for the running user Author David Schach"
    },
    {
        "title": "ActionPlansTriggerHandlers",
        "fileName": "ActionPlansTriggerHandlers.html",
        "text": "ActionPlansTriggerHandlers Trigger Handler class to manage all triggers. Methods for managed objects are here, as well as a method that any other object can use to enable it to be linked to Action Plans. Signature global without sharing class ActionPlansTriggerHandlers David Schach2011 ActionPlansTriggerHandlers Methods actionPlansSObjectTriggerHandler(sObjectName) Global so that if in managed package, this method is the only one available actionPlansSObjectTriggerHandler(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent, sObjectName) Handle SObjects with related Action Plans when those sObject records are deleted and undeleted allowChangeParentStatus(apTaskTemplateIds) Validates if the given tasks can change status to in progress or completed. If the task depends on another that is open, returns false This bulkified method avoids SOQL queries in a loop getRelationshipName(recordId) triggerHandler_ActionPlan(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent) triggerHandler_ActionPlanAccount(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent) triggerHandler_ActionPlanLead(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent) Handle ActionPlans related to Leads after conversion triggerHandler_ActionPlanTask(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent) Trigger handler for Task records when they are inserted, updated, or deleted triggerHandler_ActionPlanTaskTemplate(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent) triggerHandler_ActionPlanTemplate(newRecords, oldRecords, oldRecordsMap, triggerEvent) triggerHandler_ActionPlanTemplateTaskTemplate(newRecords, oldRecords, oldRecordsMap, triggerEvent) validateActionPlans(actionPlans) Validate that 1 and only 1 custom reference field is filled actionPlansSObjectTriggerHandler(sObjectName) Global so that if in managed package, this method is the only one available Signature global static void actionPlansSObjectTriggerHandler(String sObjectName) Parameters sObjectName Type: String the name of the sObject Author David Schach actionPlansSObjectTriggerHandler(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent, sObjectName) Handle SObjects with related Action Plans when those sObject records are deleted and undeleted Signature public static void actionPlansSObjectTriggerHandler(\t\tList<SObject> newRecords,\t\tList<SObject> oldRecords,\t\tMap<Id, SObject> newRecordsMap,\t\tMap<Id, SObject> oldRecordsMap,\t\tSystem.TriggerOperation triggerEvent,\t\tString sObjectName\t) Parameters newRecords Type: \t\tList<SObject> Trigger.new oldRecords    Trigger.old newRecordsMap Type: SObject> Trigger.newMap oldRecordsMap Type: SObject> Trigger.oldMap triggerEvent  Trigger context sObjectName   the name of the SObject Author David Schach allowChangeParentStatus(apTaskTemplateIds) Validates if the given tasks can change status to in progress or completed. If the task depends on another that is open, returns false This bulkified method avoids SOQL queries in a loop Signature private static Map<Id, Boolean> allowChangeParentStatus(Set<Id> apTaskTemplateIds) Parameters apTaskTemplateIds Type: Set<Id> bulkified set of task IDs to consider Returns dependsOnInProgressTask getRelationshipName(recordId) Signature private static String getRelationshipName(Id recordId) triggerHandler_ActionPlan(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent) Signature public static void triggerHandler_ActionPlan(\t\tList<ActionPlan__c> newRecords,\t\tList<ActionPlan__c> oldRecords,\t\tMap<Id, ActionPlan__c> newRecordsMap,\t\tMap<Id, ActionPlan__c> oldRecordsMap,\t\tSystem.TriggerOperation triggerEvent\t) triggerHandler_ActionPlanAccount(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent) Signature public static void triggerHandler_ActionPlanAccount(\t\tList<Account> newRecords,\t\tList<Account> oldRecords,\t\tMap<Id, Account> newRecordsMap,\t\tMap<Id, Account> oldRecordsMap,\t\tSystem.TriggerOperation triggerEvent\t) triggerHandler_ActionPlanLead(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent) Handle ActionPlans related to Leads after conversion Signature public static void triggerHandler_ActionPlanLead(List<Lead> newRecords, List<Lead> oldRecords, Map<Id, Lead> newRecordsMap, Map<Id, Lead> oldRecordsMap, System.TriggerOperation triggerEvent) Parameters newRecords Type: List<Lead> Trigger.new oldRecords Type: List<Lead> Trigger.old newRecordsMap Type: Map<Id, Lead> Trigger.newMap oldRecordsMap Type: Map<Id, Lead> Trigger.oldMap triggerEvent Type: System.TriggerOperation Trigger context Author David Schach triggerHandler_ActionPlanTask(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent) Trigger handler for Task records when they are inserted, updated, or deleted Signature public static void triggerHandler_ActionPlanTask(List<Task> newRecords, List<Task> oldRecords, Map<Id, Task> newRecordsMap, Map<Id, Task> oldRecordsMap, System.TriggerOperation triggerEvent) Parameters newRecords Type: List<Task> Trigger.new oldRecords Type: List<Task> Trigger.old newRecordsMap Type: Map<Id, Task> Trigger.newMap oldRecordsMap Type: Map<Id, Task> Trigger.oldMap triggerEvent Type: System.TriggerOperation Trigger context Author David Schach triggerHandler_ActionPlanTaskTemplate(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent) Signature public static void triggerHandler_ActionPlanTaskTemplate(\t\tList<APTaskTemplate__c> newRecords,\t\tList<APTaskTemplate__c> oldRecords,\t\tMap<Id, APTaskTemplate__c> newRecordsMap,\t\tMap<Id, APTaskTemplate__c> oldRecordsMap,\t\tSystem.TriggerOperation triggerEvent\t) triggerHandler_ActionPlanTemplate(newRecords, oldRecords, oldRecordsMap, triggerEvent) Signature public static void triggerHandler_ActionPlanTemplate(\t\tList<ActionPlanTemplate__c> newRecords,\t\tList<ActionPlanTemplate__c> oldRecords,\t\tMap<Id, ActionPlanTemplate__c> oldRecordsMap,\t\tSystem.TriggerOperation triggerEvent\t) triggerHandler_ActionPlanTemplateTaskTemplate(newRecords, oldRecords, oldRecordsMap, triggerEvent) Signature public static void triggerHandler_ActionPlanTemplateTaskTemplate(\t\tList<APTTaskTemplate__c> newRecords,\t\tList<APTTaskTemplate__c> oldRecords,\t\tMap<Id, APTTaskTemplate__c> oldRecordsMap,\t\tSystem.TriggerOperation triggerEvent\t) validateActionPlans(actionPlans) Validate that 1 and only 1 custom reference field is filled Signature private static void validateActionPlans(List<ActionPlan__c> actionPlans) Parameters actionPlans Type: List<ActionPlan__c> Trigger records to validate Author David Schach"
    },
    {
        "title": "ActionPlansUtilities",
        "fileName": "ActionPlansUtilities.html",
        "text": "ActionPlansUtilities Utilities class - mostly describe methods and constants Signature public without sharing class ActionPlansUtilities See ActionPlansUtilitiesTest 2011 ActionPlansUtilities Properties Name Signature Description apCustomRelationshipFields private static List<String> apCustomRelationshipFields Section to describe ActionPlan object to make custom relationship fields dynamic canDisplayReminder private static Boolean canDisplayReminder checkReminderByDefault private static Boolean checkReminderByDefault closedTaskStatuses private static Set<String> closedTaskStatuses Find all closed Task statuses dayOfWeekEnglish public static Map<Integer, String> dayOfWeekEnglish Map of day of week(as number) to English day defaultMinutesForReminderTime private static String defaultMinutesForReminderTime HAS_RECORD_TYPE public static final Boolean HAS_RECORD_TYPE Allows us to force the environment variable checking if Task has a Record Type for testing. Increases code coverage. MASTER_RECORD_TYPE_ID public static final Id MASTER_RECORD_TYPE_ID The standard Master RecordType  Id MAX_APTASKS public static final Integer MAX_APTASKS Max number of APTasks per Action Plan MAX_APTODELETE public static final Integer MAX_APTODELETE Max number of Action Plans that can be deleted from list namespacePrefix public static String namespacePrefix Check if we are in a managed package - if so, return the namespace prefix openTaskStatuses private static Set<String> openTaskStatuses set private set taskRecordTypePriorityDefaultValues private static Map<Id, String> taskRecordTypePriorityDefaultValues taskRecordTypes private static List<SObject> taskRecordTypes taskRecordTypeStatusDefaultValues private static Map<Id, String> taskRecordTypeStatusDefaultValues taskRecordTypeTypeDefaultValues private static Map<Id, String> taskRecordTypeTypeDefaultValues taskRTs private static List<SelectOption> taskRTs ActionPlansUtilities Methods actionPlanSubjectToName(subject) Single method to shorten long strings to the hard-coded 80 character length of record name field actionPlanSubjectToName(subject, maxChars) Single method to shorten long strings to the dynamically described character length of record name field adjustTaskDueDate(actionPlanStartDate, taskDaysFromStart, apSkipDay) Given a task due date, we adjust it here for weekends canSendEmails() Is the org allowed to send emails? This could be because deliverability is off, or because we have hit the org limits for emails getCanDisplayReminder() Verifies that the user is able to add reminders. Checks the existence of a reminder setting field of the user object. Mathod can be improved by asking for Reminder Options at Activity settings. Does not query if the user wants reminders by default getCheckReminderByDefault() Check user preferences for whether to show task reminders by default getClosedTaskStatuses() Set of all Task  Status values that are Closed getCustomRelationshipFields() getCustomSetting() Get the \"Default\" Custom Setting and return it. getDayOfWeek(d) Given a date, give the English day of the week getDefaultReminderMinutes() Gets task reminder default time for current user getDefaultTaskRecordTypeId() Find user default recordtype getFieldOptions(objectname, fieldname, hasDefaultValue) Get a Visualforce picklist from any object and field getHoursOption() Set the Hours for select box of Reminder Time getIsLex() Detect user theme getObjectKeyPrefix(objName) Get prefix of sObject getOpenTaskStatuses() Lazy load open task statuses getTaskRecordTypePriorityDefaultValues() Generate Map of Record Type Id to default Task Priority getTaskRecordTypes() Lazy load task record types to reduce queries getTaskRecordTypeStatusDefaultValues() Generate Map of Record Type Id to default Task Status getTaskRecordTypeTypeDefaultValues() Generate Map of Record Type Id to default Task Type getTaskRTPicklistValues() Generate picklist of Task Record Types getWeekendDay(developerName) Get the Custom Metadata record for the weekend day onPageLoad() Actions to perform whenever loading a Visualforce page Ensures that Custom Setting is created for the org actionPlanSubjectToName(subject) Single method to shorten long strings to the hard-coded 80 character length of record name field Signature public static String actionPlanSubjectToName(String subject) Parameters subject Type: String the long string Returns the full string or shortened if longer than 80 characters actionPlanSubjectToName(subject, maxChars) Single method to shorten long strings to the dynamically described character length of record name field Signature public static String actionPlanSubjectToName(String subject, Integer maxChars) Parameters subject Type: String the long string maxChars Type: Integer the maximum length allowed for Action Plan Subject Returns the full string or shortened if longer than max characters adjustTaskDueDate(actionPlanStartDate, taskDaysFromStart, apSkipDay) Given a task due date, we adjust it here for weekends Signature public static Date adjustTaskDueDate(Date actionPlanStartDate, Integer taskDaysFromStart, String apSkipDay) Parameters actionPlanStartDate Type: Date the start date of the action plan taskDaysFromStart Type: Integer the days after the initial date that the task will be due Returns the new task due date canSendEmails() Is the org allowed to send emails? This could be because deliverability is off, or because we have hit the org limits for emails Signature public static Boolean canSendEmails() Returns Can the org send an email? getCanDisplayReminder() Verifies that the user is able to add reminders. Checks the existence of a reminder setting field of the user object. Mathod can be improved by asking for Reminder Options at Activity settings. Does not query if the user wants reminders by default Signature public static Boolean getCanDisplayReminder() Returns if the user has access to reminders getCheckReminderByDefault() Check user preferences for whether to show task reminders by default Signature public static Boolean getCheckReminderByDefault() Returns Boolean if Task reminder checkbox should be checked by default(this will override default value) getClosedTaskStatuses() Set of all Task  Status values that are Closed Signature public static Set<String> getClosedTaskStatuses() Returns Set of closed Task  Statuses Author David Schach getCustomRelationshipFields() Signature public static List<String> getCustomRelationshipFields() getCustomSetting() Get the \"Default\" Custom Setting and return it. Signature public static Action_Plans_Settings__c getCustomSetting() Returns cSetting getDayOfWeek(d) Given a date, give the English day of the week Signature public static String getDayOfWeek(Date d) Parameters d Type: Date The given date Returns The day of hte week in English Author David Schach getDefaultReminderMinutes() Gets task reminder default time for current user Signature public static String getDefaultReminderMinutes() Returns String  picklist value for default minutes after midnight for reminder getDefaultTaskRecordTypeId() Find user default recordtype Signature public static String getDefaultTaskRecordTypeId() getFieldOptions(objectname, fieldname, hasDefaultValue) Get a Visualforce picklist from any object and field Signature public static List<SelectOption> getFieldOptions(String objectname, String fieldname, Boolean hasDefaultValue) Parameters objectname Type: String the object name fieldname Type: String the field name Returns List<SelectOption> getHoursOption() Set the Hours for select box of Reminder Time Signature public static List<SelectOption> getHoursOption() Returns options getIsLex() Detect user theme Signature public static Boolean getIsLex() Returns Are we in Lightning Experience? getObjectKeyPrefix(objName) Get prefix of sObject Signature public static String getObjectKeyPrefix(String objName) Parameters objName Type: String Returns obj.getKeyPrefix() Example ActionPlansUtilities.getObjetKeyPrefix('Account'); (returns '001') getOpenTaskStatuses() Lazy load open task statuses Signature public static Set<String> getOpenTaskStatuses() getTaskRecordTypePriorityDefaultValues() Generate Map of Record Type Id to default Task Priority Signature public static Map<Id, String> getTaskRecordTypePriorityDefaultValues() getTaskRecordTypes() Lazy load task record types to reduce queries Signature private static List<SObject> getTaskRecordTypes() Returns A list of all Task RecordType  records getTaskRecordTypeStatusDefaultValues() Generate Map of Record Type Id to default Task Status Signature public static Map<Id, String> getTaskRecordTypeStatusDefaultValues() getTaskRecordTypeTypeDefaultValues() Generate Map of Record Type Id to default Task Type Signature public static Map<Id, String> getTaskRecordTypeTypeDefaultValues() getTaskRTPicklistValues() Generate picklist of Task Record Types Signature public static List<SelectOption> getTaskRTPicklistValues() getWeekendDay(developerName) Get the Custom Metadata record for the weekend day Signature public static Weekend_Day__mdt getWeekendDay(String developerName) Parameters developerName Type: String Of day(Saturday, Sunday, etc) Returns Custom Metadata Author David Schach onPageLoad() Actions to perform whenever loading a Visualforce page Ensures that Custom Setting is created for the org Signature public static PageReference onPageLoad() Returns PageReference"
    },
    {
        "title": "ActionPlanCreateInvocableTest",
        "fileName": "ActionPlanCreateInvocableTest.html",
        "text": "ActionPlanCreateInvocableTest Test class for Invocable Apex class Signature @IsTest private class ActionPlanCreateInvocableTest David Schach2022 ActionPlanCreateInvocableTest Properties Name Signature TASK_COUNT private static final Integer TASK_COUNT ActionPlanCreateInvocableTest Methods bulkAccounts() checkWeekendDueDate() relatedAccount() relatedCampaign() relatedContact() relatedContract() relatedLead() relatedOpportunity() setupRequest(templateId, relatedID, daysToActionPlanStart) bulkAccounts() Signature @IsTest private static void bulkAccounts() checkWeekendDueDate() Signature @IsTest private static void checkWeekendDueDate() relatedAccount() Signature @IsTest private static void relatedAccount() relatedCampaign() Signature @IsTest private static void relatedCampaign() relatedContact() Signature @IsTest private static void relatedContact() relatedContract() Signature @IsTest private static void relatedContract() relatedLead() Signature @IsTest private static void relatedLead() relatedOpportunity() Signature @IsTest private static void relatedOpportunity() setupRequest(templateId, relatedID, daysToActionPlanStart) Signature private static ActionPlanCreateInvocable.CreateActionPlanRequest setupRequest(Id templateId, Id relatedID, Integer daysToActionPlanStart)"
    },
    {
        "title": "ActionPlanCreationControllerTest",
        "fileName": "ActionPlanCreationControllerTest.html",
        "text": "ActionPlanCreationControllerTest Tests for ActionPlan__c  Create/Edit Visualforce Extension Signature @IsTest private class ActionPlanCreationControllerTest ActionPlanCreationControllerTest Methods checkActionPlanTaskList() checkCompletedTasks() checkMaxTasks() checkMaxTasksError() checkReferredObject() checkSubjectItems() constructorTests() longNameTasks() makeData() singleRecordConstructor() testActionPlanSave() testActionPlanSaveAndNew() testAddNewTask() testCyclicDependencyTasksFail() testCyclicDependencyTaskSuccess() testForceNoRecordTypes() testRelateToMultipleContacts() testRemoveActionPlanTask() testSetTaskRecordType() checkActionPlanTaskList() Signature @IsTest private static void checkActionPlanTaskList() checkCompletedTasks() Signature @IsTest private static void checkCompletedTasks() checkMaxTasks() Signature @IsTest private static void checkMaxTasks() checkMaxTasksError() Signature @IsTest private static void checkMaxTasksError() checkReferredObject() Signature @IsTest private static void checkReferredObject() checkSubjectItems() Signature @IsTest private static void checkSubjectItems() constructorTests() Signature @IsTest private static void constructorTests() longNameTasks() Signature @IsTest private static void longNameTasks() makeData() Signature @TestSetup static void makeData() singleRecordConstructor() Signature @IsTest private static void singleRecordConstructor() testActionPlanSave() Signature @IsTest private static void testActionPlanSave() testActionPlanSaveAndNew() Signature @IsTest private static void testActionPlanSaveAndNew() testAddNewTask() Signature @IsTest private static void testAddNewTask() testCyclicDependencyTasksFail() Signature @IsTest private static void testCyclicDependencyTasksFail() testCyclicDependencyTaskSuccess() Signature @IsTest private static void testCyclicDependencyTaskSuccess() testForceNoRecordTypes() Signature @IsTest private static void testForceNoRecordTypes() testRelateToMultipleContacts() Signature @IsTest private static void testRelateToMultipleContacts() testRemoveActionPlanTask() Signature @IsTest private static void testRemoveActionPlanTask() testSetTaskRecordType() Signature @IsTest private static void testSetTaskRecordType()"
    },
    {
        "title": "ActionPlanDetailControllerTest",
        "fileName": "ActionPlanDetailControllerTest.html",
        "text": "ActionPlanDetailControllerTest Tests for ActionPlan__c  View Controller Signature @IsTest private class ActionPlanDetailControllerTest ActionPlanDetailControllerTest Methods checkActionPlanTemplateVersion() checkCompletedTasks() checkDeleteActionPlan() checkGetrelatedRecordName() checkTasks() constructorTests() printConstructorTests() testForceNoRecordType() checkActionPlanTemplateVersion() Signature @IsTest private static void checkActionPlanTemplateVersion() checkCompletedTasks() Signature @IsTest private static void checkCompletedTasks() checkDeleteActionPlan() Signature @IsTest private static void checkDeleteActionPlan() checkGetrelatedRecordName() Signature @IsTest private static void checkGetrelatedRecordName() checkTasks() Signature @IsTest private static void checkTasks() constructorTests() Signature @IsTest private static void constructorTests() printConstructorTests() Signature @IsTest private static void printConstructorTests() testForceNoRecordType() Signature @IsTest private static void testForceNoRecordType()"
    },
    {
        "title": "ActionPlanTemplateCreationCntrlTest",
        "fileName": "ActionPlanTemplateCreationCntrlTest.html",
        "text": "ActionPlanTemplateCreationCntrlTest Signature @IsTest private class ActionPlanTemplateCreationCntrlTest See ActionPlanTemplateCreationController David Schach ActionPlanTemplateCreationCntrlTest Methods checkMaxTasksError() checkTemplateSubjectItem() checkTemplateTaskSize() testAddNewActionPlanTemplateTask() testAddTemplateTask() testCancel() testContructor() testCyclicDependencyFail() testCyclicDependencySuccess() testForceNoRecordType() testItselfCyclicDependencyFail() testLongNameTemplateTasks() testRemoveTemplateTask() testRemovingActionPlanTemplateTask() testRetrievingTemplateTasks() testSave() testSaveTemplate() checkMaxTasksError() Signature @IsTest private static void checkMaxTasksError() checkTemplateSubjectItem() Signature @IsTest private static void checkTemplateSubjectItem() checkTemplateTaskSize() Signature @IsTest private static void checkTemplateTaskSize() testAddNewActionPlanTemplateTask() Signature @IsTest private static void testAddNewActionPlanTemplateTask() testAddTemplateTask() Signature @IsTest private static void testAddTemplateTask() testCancel() Signature @IsTest private static void testCancel() testContructor() Signature @IsTest private static void testContructor() testCyclicDependencyFail() Signature @IsTest private static void testCyclicDependencyFail() testCyclicDependencySuccess() Signature @IsTest private static void testCyclicDependencySuccess() testForceNoRecordType() Signature @IsTest private static void testForceNoRecordType() testItselfCyclicDependencyFail() Signature @IsTest private static void testItselfCyclicDependencyFail() testLongNameTemplateTasks() Signature @IsTest private static void testLongNameTemplateTasks() testRemoveTemplateTask() Signature @IsTest private static void testRemoveTemplateTask() testRemovingActionPlanTemplateTask() Signature @IsTest private static void testRemovingActionPlanTemplateTask() testRetrievingTemplateTasks() Signature @IsTest private static void testRetrievingTemplateTasks() testSave() Signature @IsTest private static void testSave() testSaveTemplate() Signature @IsTest private static void testSaveTemplate()"
    },
    {
        "title": "ActionPlanTemplateDetailCntrlTest",
        "fileName": "ActionPlanTemplateDetailCntrlTest.html",
        "text": "ActionPlanTemplateDetailCntrlTest Signature @IsTest private class ActionPlanTemplateDetailCntrlTest ActionPlanTemplateDetailCntrlTest Methods exportTest() testConstructor() testDeleteActionPlanTemplate() testForceNoRecordType() testRetrievingActionPlanTemplate() testRetrievingTemplateTasks() exportTest() Signature @IsTest private static void exportTest() testConstructor() Signature @IsTest private static void testConstructor() testDeleteActionPlanTemplate() Signature @IsTest private static void testDeleteActionPlanTemplate() testForceNoRecordType() Signature @IsTest private static void testForceNoRecordType() testRetrievingActionPlanTemplate() Signature @IsTest private static void testRetrievingActionPlanTemplate() testRetrievingTemplateTasks() Signature @IsTest private static void testRetrievingTemplateTasks()"
    },
    {
        "title": "ActionPlanTemplateExportTest",
        "fileName": "ActionPlanTemplateExportTest.html",
        "text": "ActionPlanTemplateExportTest Action Plans v4 Signature @IsTest private class ActionPlanTemplateExportTest See ActionPlanTemplateExport David Schach2022 ActionPlanTemplateExportTest Methods exportDocTest() exportFileTest() exportTest() exportDocTest() Signature @IsTest private static void exportDocTest() exportFileTest() Signature @IsTest private static void exportFileTest() exportTest() Signature @IsTest private static void exportTest()"
    },
    {
        "title": "ActionPlanTemplateImportCntrlTest",
        "fileName": "ActionPlanTemplateImportCntrlTest.html",
        "text": "ActionPlanTemplateImportCntrlTest Signature @IsTest private class ActionPlanTemplateImportCntrlTest See ActionPlanTemplateImportController ActionPlanTemplateImportCntrlTest Properties Name Signature xmlImport private static String xmlImport xmlImportEmptyMetaData private static String xmlImportEmptyMetaData xmlImportFromExport private static String xmlImportFromExport xmlImportWrongAPTask private static String xmlImportWrongAPTask xmlImportWrongAPTemplate private static String xmlImportWrongAPTemplate xmlImportWrongMetaData private static String xmlImportWrongMetaData ActionPlanTemplateImportCntrlTest Methods testRoundTrip() testXMLImport() testXMLImportEmptyAttachment() testXMLImportEmptyXML() testXMLImportFromExport() testXMLImportWrongMetaData() testXMLImportWrongTemplate() testXMLImportWrongTemplateTask() testRoundTrip() Signature @IsTest private static void testRoundTrip() testXMLImport() Signature @IsTest private static void testXMLImport() testXMLImportEmptyAttachment() Signature @IsTest private static void testXMLImportEmptyAttachment() testXMLImportEmptyXML() Signature @IsTest private static void testXMLImportEmptyXML() testXMLImportFromExport() Signature @IsTest private static void testXMLImportFromExport() testXMLImportWrongMetaData() Signature @IsTest private static void testXMLImportWrongMetaData() testXMLImportWrongTemplate() Signature @IsTest private static void testXMLImportWrongTemplate() testXMLImportWrongTemplateTask() Signature @IsTest private static void testXMLImportWrongTemplateTask()"
    },
    {
        "title": "ActionPlansBatchBuilderTest",
        "fileName": "ActionPlansBatchBuilderTest.html",
        "text": "ActionPlansBatchBuilderTest \\Test for Action Plans Batch Builder Signature @IsTest private class ActionPlansBatchBuilderTest ActionPlansBatchBuilderTest Methods makeData() runBatchAccount() runBatchContact() runBatchException() runBatchOpportunity() makeData() Signature @TestSetup static void makeData() runBatchAccount() Signature @IsTest private static void runBatchAccount() runBatchContact() Signature @IsTest private static void runBatchContact() runBatchException() Signature @IsTest private static void runBatchException() runBatchOpportunity() Signature @IsTest private static void runBatchOpportunity()"
    },
    {
        "title": "ActionPlansBatchDeleteTest",
        "fileName": "ActionPlansBatchDeleteTest.html",
        "text": "ActionPlansBatchDeleteTest Test class for Batch Delete class Signature @IsTest private class ActionPlansBatchDeleteTest ActionPlansBatchDeleteTest Methods testDelete() testDeleteException() testFutureDelete() testUnDelete() testDelete() Signature @IsTest private static void testDelete() testDeleteException() Signature @IsTest private static void testDeleteException() testFutureDelete() Signature @IsTest private static void testFutureDelete() testUnDelete() Signature @IsTest private static void testUnDelete()"
    },
    {
        "title": "ActionPlansBatchTaskBuilderTest",
        "fileName": "ActionPlansBatchTaskBuilderTest.html",
        "text": "ActionPlansBatchTaskBuilderTest Test for Batch Task Builder Apex Signature @IsTest private class ActionPlansBatchTaskBuilderTest ActionPlansBatchTaskBuilderTest Methods makeData() runBatchAccount() runBatchCampaign() runBatchCase() runBatchContact() runBatchContract() runBatchLead() runBatchOpportunity() makeData() Signature @TestSetup static void makeData() runBatchAccount() Signature @IsTest private static void runBatchAccount() runBatchCampaign() Signature @IsTest private static void runBatchCampaign() runBatchCase() Signature @IsTest private static void runBatchCase() runBatchContact() Signature @IsTest private static void runBatchContact() runBatchContract() Signature @IsTest private static void runBatchContract() runBatchLead() Signature @IsTest private static void runBatchLead() runBatchOpportunity() Signature @IsTest private static void runBatchOpportunity()"
    },
    {
        "title": "ActionPlansCanTheUserTest",
        "fileName": "ActionPlansCanTheUserTest.html",
        "text": "ActionPlansCanTheUserTest Taken from Codefriar code Signature @IsTest private class ActionPlansCanTheUserTest See https://github.com/codefriar/CanTheUser , https://github.com/trailheadapps/apex-recipes Codefriar ActionPlansCanTheUserTest Methods canCrudAccountCreatePositive() canCrudAccountDeletePositive() canCrudAccountReadPositive() canCrudAccountUpdatePositive() canCrudCreateAccountPositive() canCrudDestroyAccountPositive() canCrudEditAccountPositive() canCrudReadAccountPositive() canCrudUpsertAccountPositive() generateAccounts() getBulkFLSAccessibleWithAccountPositive() getBulkFLSAccessibleWithAccountPositiveWithNegativeResults() getBulkFLSUpdatableWithAccountPositive() getBulkFLSUpdatableWithAccountPositiveWithNegativeResults() getFLSofAccountIDNegative() getFLSofAccountNamePositive() canCrudAccountCreatePositive() Signature @IsTest private static void canCrudAccountCreatePositive() canCrudAccountDeletePositive() Signature @IsTest private static void canCrudAccountDeletePositive() canCrudAccountReadPositive() Signature @IsTest private static void canCrudAccountReadPositive() canCrudAccountUpdatePositive() Signature @IsTest private static void canCrudAccountUpdatePositive() canCrudCreateAccountPositive() Signature @IsTest private static void canCrudCreateAccountPositive() canCrudDestroyAccountPositive() Signature @IsTest private static void canCrudDestroyAccountPositive() canCrudEditAccountPositive() Signature @IsTest private static void canCrudEditAccountPositive() canCrudReadAccountPositive() Signature @IsTest private static void canCrudReadAccountPositive() canCrudUpsertAccountPositive() Signature @IsTest private static void canCrudUpsertAccountPositive() generateAccounts() Signature private static List<Account> generateAccounts() getBulkFLSAccessibleWithAccountPositive() Signature @IsTest private static void getBulkFLSAccessibleWithAccountPositive() getBulkFLSAccessibleWithAccountPositiveWithNegativeResults() Signature @IsTest private static void getBulkFLSAccessibleWithAccountPositiveWithNegativeResults() getBulkFLSUpdatableWithAccountPositive() Signature @IsTest private static void getBulkFLSUpdatableWithAccountPositive() getBulkFLSUpdatableWithAccountPositiveWithNegativeResults() Signature @IsTest private static void getBulkFLSUpdatableWithAccountPositiveWithNegativeResults() getFLSofAccountIDNegative() Signature @IsTest private static void getFLSofAccountIDNegative() getFLSofAccountNamePositive() Signature @IsTest private static void getFLSofAccountNamePositive()"
    },
    {
        "title": "ActionPlansCreateMultipleAPsExtTest",
        "fileName": "ActionPlansCreateMultipleAPsExtTest.html",
        "text": "ActionPlansCreateMultipleAPsExtTest Signature @IsTest private class ActionPlansCreateMultipleAPsExtTest David Schach ActionPlansCreateMultipleAPsExtTest Methods givenNoRecordsToDeleteThenNotDeleted() givenRecordsToDeleteThenDeleted() givenNoRecordsToDeleteThenNotDeleted() Signature @IsTest private static void givenNoRecordsToDeleteThenNotDeleted() givenRecordsToDeleteThenDeleted() Signature @IsTest private static void givenRecordsToDeleteThenDeleted()"
    },
    {
        "title": "ActionPlansDeleteMultipleAPExtTest",
        "fileName": "ActionPlansDeleteMultipleAPExtTest.html",
        "text": "ActionPlansDeleteMultipleAPExtTest Signature @IsTest private class ActionPlansDeleteMultipleAPExtTest David Schach ActionPlansDeleteMultipleAPExtTest Properties Name Signature APS_TO_CREATE private static final Integer APS_TO_CREATE ActionPlansDeleteMultipleAPExtTest Methods givenNoRecordsToDeleteThenNotDeleted() givenRecordsToDeleteThenDeleted() noDeletePermission() setupdata() givenNoRecordsToDeleteThenNotDeleted() Signature @IsTest private static void givenNoRecordsToDeleteThenNotDeleted() givenRecordsToDeleteThenDeleted() Signature @IsTest private static void givenRecordsToDeleteThenDeleted() noDeletePermission() Signature @IsTest private static void noDeletePermission() setupdata() Signature @testSetup private static void setupdata()"
    },
    {
        "title": "ActionPlansObjectTriggersTest",
        "fileName": "ActionPlansObjectTriggersTest.html",
        "text": "ActionPlansObjectTriggersTest Tests for trigger handlers Signature @IsTest private class ActionPlansObjectTriggersTest David Schach ActionPlansObjectTriggersTest Properties Name Signature aps static Action_Plans_Settings__c aps ActionPlansObjectTriggersTest Methods makeData() testAccountTrigger() testCampaignTrigger() testCaseTrigger() testContactTrigger() testContractTrigger() testLeadConversionAccount() testLeadConversionContact() testLeadConversionOpportunity() testLeadTrigger() testOpportunityTrigger() makeData() Signature @TestSetup static void makeData() testAccountTrigger() Signature @IsTest private static void testAccountTrigger() testCampaignTrigger() Signature @IsTest private static void testCampaignTrigger() testCaseTrigger() Signature @IsTest private static void testCaseTrigger() testContactTrigger() Signature @IsTest private static void testContactTrigger() testContractTrigger() Signature @IsTest private static void testContractTrigger() testLeadConversionAccount() Signature @IsTest private static void testLeadConversionAccount() testLeadConversionContact() Signature @IsTest private static void testLeadConversionContact() testLeadConversionOpportunity() Signature @IsTest private static void testLeadConversionOpportunity() testLeadTrigger() Signature @IsTest private static void testLeadTrigger() testOpportunityTrigger() Signature @IsTest private static void testOpportunityTrigger()"
    },
    {
        "title": "ActionPlansPostInstallScriptTest",
        "fileName": "ActionPlansPostInstallScriptTest.html",
        "text": "ActionPlansPostInstallScriptTest Test for PostInstallScript Utility Signature @IsTest private class ActionPlansPostInstallScriptTest See ActionPlansPostInstallScript ActionPlansPostInstallScriptTest Methods testInstallScript() testInstallScript() Signature @isTest static void testInstallScript()"
    },
    {
        "title": "ActionPlansRedirectTest",
        "fileName": "ActionPlansRedirectTest.html",
        "text": "ActionPlansRedirectTest Test for Redirect Visualforce Controller Signature @IsTest public class ActionPlansRedirectTest ActionPlansRedirectTest Methods aPTaskRedirect() aPTTaskRedirect() makeData() aPTaskRedirect() Signature @IsTest private static void aPTaskRedirect() aPTTaskRedirect() Signature @IsTest private static void aPTTaskRedirect() makeData() Signature @TestSetup static void makeData()"
    },
    {
        "title": "ActionPlansSafelyTest",
        "fileName": "ActionPlansSafelyTest.html",
        "text": "ActionPlansSafelyTest Test class for Safely Signature @IsTest private class ActionPlansSafelyTest See https://github.com/codefriar/CanTheUser , https://github.com/trailheadapps/apex-recipes Codefriar ActionPlansSafelyTest Methods createMarketingUser(doInsert) createMinAccessUser(doInsert) createTestUser(profileId, doInsert) emptyCollections() testConstructorChains() testDeleteWithRegularProfileNegative() testDeleteWithRegularProfilePositive() testDoInsertMethodsNoThrowPositive() testDoInsertNegative() testDoQueryPositive() testDoQueryThrowsRemovedFieldsException() testDoUpdateMethodsNoThrowPositive() testDoUpdateNegative() testDoUpsertMethodsNegative() testDoUpsertMethodsNoThrowPositive() testMarketingProfileDeleteNegative() testMarketingProfileGeneratesInsertExceptionPositive() testMarketingProfileGeneratesUpdateExceptionPositive() testMarketingProfileGeneratesUpsertExceptionPositive() createMarketingUser(doInsert) Signature private static User createMarketingUser(Boolean doInsert) createMinAccessUser(doInsert) Signature private static User createMinAccessUser(Boolean doInsert) createTestUser(profileId, doInsert) Signature private static User createTestUser(Id profileId, boolean doInsert) emptyCollections() Signature @IsTest private static void emptyCollections() testConstructorChains() Signature @IsTest private static void testConstructorChains() testDeleteWithRegularProfileNegative() Signature @IsTest private static void testDeleteWithRegularProfileNegative() testDeleteWithRegularProfilePositive() Signature @IsTest private static void testDeleteWithRegularProfilePositive() testDoInsertMethodsNoThrowPositive() Signature @IsTest private static void testDoInsertMethodsNoThrowPositive() testDoInsertNegative() Signature @IsTest private static void testDoInsertNegative() testDoQueryPositive() Signature @IsTest private static void testDoQueryPositive() testDoQueryThrowsRemovedFieldsException() Signature @IsTest private static void testDoQueryThrowsRemovedFieldsException() testDoUpdateMethodsNoThrowPositive() Signature @IsTest private static void testDoUpdateMethodsNoThrowPositive() testDoUpdateNegative() Signature @IsTest private static void testDoUpdateNegative() testDoUpsertMethodsNegative() Signature @IsTest private static void testDoUpsertMethodsNegative() testDoUpsertMethodsNoThrowPositive() Signature @IsTest private static void testDoUpsertMethodsNoThrowPositive() testMarketingProfileDeleteNegative() Signature @IsTest private static void testMarketingProfileDeleteNegative() testMarketingProfileGeneratesInsertExceptionPositive() Signature @IsTest private static void testMarketingProfileGeneratesInsertExceptionPositive() testMarketingProfileGeneratesUpdateExceptionPositive() Signature @IsTest private static void testMarketingProfileGeneratesUpdateExceptionPositive() testMarketingProfileGeneratesUpsertExceptionPositive() Signature @IsTest private static void testMarketingProfileGeneratesUpsertExceptionPositive()"
    },
    {
        "title": "ActionPlansSectionHeaderControllerTest",
        "fileName": "ActionPlansSectionHeaderControllerTest.html",
        "text": "ActionPlansSectionHeaderControllerTest Test class for Section Header Visualforce Controller Signature @IsTest private class ActionPlansSectionHeaderControllerTest David Schach ActionPlansSectionHeaderControllerTest Methods testNullObject() testObjectTabDescribe() testObjectTabDescribeNotInApplication() testNullObject() Signature @IsTest private static void testNullObject() testObjectTabDescribe() Signature @IsTest private static void testObjectTabDescribe() testObjectTabDescribeNotInApplication() Signature @IsTest private static void testObjectTabDescribeNotInApplication()"
    },
    {
        "title": "ActionPlansTaskTriggerUtilitiesTest",
        "fileName": "ActionPlansTaskTriggerUtilitiesTest.html",
        "text": "ActionPlansTaskTriggerUtilitiesTest Signature @IsTest private class ActionPlansTaskTriggerUtilitiesTest David Schach ActionPlansTaskTriggerUtilitiesTest Properties Name Signature testClosedStatus static String testClosedStatus ActionPlansTaskTriggerUtilitiesTest Methods testActionPlanDelete() test trigger AP Delete testAPTTemplateUndeleteException() test ActionPlanTaskTemplateTrigger When the user undeletes an ActionPlan Task Template testAPTTemplateUpdate() test trigger testAPTTUndelete() test ActionPlanTaskTemplateTrigger When the user undeletes an ActionPlan Task Template testTaskAfterUpdateToCompleted() test trigger without skipweekends method for testing Task After Update trigger when updating task to status 'Completed' testTaskBeforeDelete() testTrigger6() testActionPlanDelete() test trigger AP Delete Signature @IsTest private static void testActionPlanDelete() testAPTTemplateUndeleteException() test ActionPlanTaskTemplateTrigger When the user undeletes an ActionPlan Task Template Signature @IsTest private static void testAPTTemplateUndeleteException() testAPTTemplateUpdate() test trigger Signature @IsTest private static void testAPTTemplateUpdate() testAPTTUndelete() test ActionPlanTaskTemplateTrigger When the user undeletes an ActionPlan Task Template Signature @IsTest private static void testAPTTUndelete() testTaskAfterUpdateToCompleted() test trigger without skipweekends method for testing Task After Update trigger when updating task to status 'Completed' Signature @IsTest private static void testTaskAfterUpdateToCompleted() testTaskBeforeDelete() Signature @IsTest private static void testTaskBeforeDelete() testTrigger6() Signature @IsTest private static void testTrigger6()"
    },
    {
        "title": "ActionPlansUtilitiesTest",
        "fileName": "ActionPlansUtilitiesTest.html",
        "text": "ActionPlansUtilitiesTest Signature @IsTest private class ActionPlansUtilitiesTest See ActionPlansUtilities David Schach ActionPlansUtilitiesTest Methods doChatterPost() makeAppTask(ap) makeData() testAccount() testbatchIds() testCampaign() testCancel() testCase() testContact() testContract() testDebugParameters() testDeleteActionPlans() testLead() testObject(objectName) testRandomWord() testRelatedObjectId() testSaveMethod() testSaveMultiple() doChatterPost() Signature @IsTest private static void doChatterPost() makeAppTask(ap) Signature private static APTaskTemplate__c makeAppTask(ActionPlan__c ap) makeData() Signature @TestSetup static void makeData() testAccount() Signature @IsTest private static void testAccount() testbatchIds() Signature @IsTest private static void testbatchIds() testCampaign() Signature @IsTest private static void testCampaign() testCancel() Signature @IsTest private static void testCancel() testCase() Signature @IsTest private static void testCase() testContact() Signature @IsTest private static void testContact() testContract() Signature @IsTest private static void testContract() testDebugParameters() Signature @IsTest private static void testDebugParameters() testDeleteActionPlans() Signature @IsTest private static void testDeleteActionPlans() testLead() Signature @IsTest private static void testLead() testObject(objectName) Signature private static void testObject(String objectName) testRandomWord() Signature @IsTest private static void testRandomWord() testRelatedObjectId() Signature @IsTest private static void testRelatedObjectId() testSaveMethod() Signature @IsTest private static void testSaveMethod() testSaveMultiple() Signature @IsTest private static void testSaveMultiple()"
    }
];
