export default [
    {
        "title": "Home",
        "fileName": "index.html",
        "text": "Home  About Action Plans   Action Plans Installation and Setup  AppExchange   Scratch\t\tOrg   Developer Edition / Sandbox   About Action Plans Action Plans helps your organization encapsulate best practices into easily sharable, reusable task templates. You can create Action Plans for the following objects: \tAccounts \tContacts \tLeads \tOpportunities \tCampaigns \tContracts \tCases \tPerson Accounts \tCustom Objects   Getting Help Action Plans is unsupported. For community assistance with Action Plans, please visit Salesforce Trailblazer Community . To submit ideas or issues, please visit Action Plans on Github .  Community Action Plans is open source software. We welcome your issue reports, ideas, documentation, code tweaks and all other participation. Learn more .  Features: \tExport and share your Action Plan Templates with other orgs. \tImport Action Plan Templates. \tSupports Task reminder times. \tAction Plans Settings controls behavior around Chatter Notifications, actions when a Lead is converted, and default Task assignment behavior \tInvocable Apex allows automatic Action Plan creation from a Template in Process Builder and Flow   Post Install Configuration Getting started is easy. For each object, you need to add a button to the list view, add a button to the detail page. For Accounts, follow these steps:\"  Update Action Plans Custom Settings Change these setting by editing Action Plan Settings, and updating values at either the organization level, profile levels, or user levels. Navigate to Setup > Develop > Custom Settings. Click on ‘Manage’ next to Action Plans Settings . Click the ‘New’ button near ‘Default Organizational Level Value’. Check the values that you want to enable. \tEnable Chatter Post  places a post in the related record’s Chatter Feed(if Chatter is enabled for that object). If unchecked, Action Plans does not create a Feed Post.; \tUnassigned Task Defaults to Record Owner  ensures that Action Plan Template tasks with a blank ‘Assigned To’ field go to the related record’s owner. If unchecked, tasks with a blank ‘Assigned To’ field are assigned to\t\tthe running user. Tasks can be assigned to specific people on Action Plan Templates, which overrides this setting. \tDefault Object on Lead Conversion  specifies that if an Action Plan is related to a Lead, whether the Action Plan should be moved to the converted Account, Contact, or Opportunity when the Lead is converted. The\t\tdefault is Contact. \tAction Plans Business Hours ID  and Use Business Hours  are reserved for future functionality.   Weekends: Custom Metadata Modify Custom Metadata Weekend Day  to indicate which days of the week are the weekend and how many days to move a task forward or backwards to move it to the end of the previous week or the start of the next week. This\tallows you to work with a different weekend, or to avoid assigning any task to be due on any specific day of the week.\tAll weekdays should have 0 in both numeric fields.  Update Your Page & Search Layout Configurations  Create Action Plans Button For each object, you need to add a button to the list view, For Accounts, follow these steps: \tNavigate to Setup > Object Manager > Account > Search Layouts for Salesforce Classic \tClick on “Edit” from the menu near “List View.” \tMove the “Create Account Action Plans” button from “Available Buttons” to “Selected Buttons.” \tClick “Save.” \tNavigate to Setup > Object Manager > Account > Page Layouts. \tNote: the package includes a default “Action Plan Layout” for your reference. You do not need to use it. \tClick on “Edit” near one of your standard Account Page Layouts. \tAdd “Action Plans” related list to the page. \tEdit the properties of the related list by clicking the configuration button above it. \tExpand “Buttons” section, clear the “New” checkbox and move “Create Account Action Plan” to the Selected buttons. \tUpdate the fields in the related list to meet your needs. Recommended fields include Start Date, Action Plan Status, Action Plan Template, Plan Start Date. \tClick “Save.”  Repeat these steps for the other standard objects Action Plans supports: Contacts, Leads, Opportunities, etc.  Delete Action Plans Button Follow this steps for Action Plan Object: \tNavigate to Setup > Object Manager > Action Plan > Search Layouts. \tClick on “Edit” near “List View.” \tMove the “Delete Action Plans” button from “Available Buttons” to “Selected Buttons.” \tClick “Save.”   Security  Update Your Org-Wide Default Sharing Settings Action Plans includes two shareable objects: Action Plan  and Action Plan Template . You may configure your sharing settings in whatever way works for your organization. \tIf you want anyone to be able to create and see plans and their templates, use Public Read/Write for Action Plan and Action Plan Template. \tIf you want anyone to be able to see Action Plans and Templates without being able to change them, select “Public Read Only.” \tIf your Org-Wide Default sharing settings are set to Private for Action Plan or Action Plan Template, you may need to implement custom automation to share Action Plan records with the appropriate people. You may do this via Apex\t\tsharing, or you may use other automation, to assign ownership of the Action Plan itself to the related record owner or any desired user. \tTo use Action Plans, most users require access only to Tasks . They can be assigned Tasks without knowing that these Tasks are part of an Action Plan. Any changes they make to a Task’s Status will be reflected in the\t\trelated Action Plan Task Template record automatically. No Permission Set is required.   Use Permission Sets For Security Assign the appropriate Permission Set(s) to each user who will need to use Action Plans: \tAction Plans Admin:  Full permissions for Action Plans, Action Plan Templates, AP Tasks and APT Task Templates. \tAction Plans Template Creator:  Full permissions for Action Plan Templates and AP Template Tasks. No Action Plan access. \tAction Plans Creator:  Read, Create, Edit, Delete for Action Plans and AP Tasks. Read-only for Action Plan Templates and APT Task Templates. \tAction Plans User:  Read-only for Action Plans and AP Tasks.  Uses for each Permission Set: \tSome users may require visibility into the Action Plans related to those Tasks. These users need the Action Plans User  Permission Set. It gives Read-only access to Action Plan. \tSome users may need to create Action Plans from Templates but not edit the templates themselves. The Action Plans Creator  Permission Set gives read-only access to Action Plan Templates, and Read, Create, Edit, and\t\tDelete access to Action Plans. \tUsers who can create and edit Action Plan Templates require the Action Plans Template Creator  Permission Set. This includes permission to Read, Create, Edit, and Delete all Action Plan Templates only. It does not\t\tinclude any Action Plan or Task permissions. If these users require Action Plan access, other Permission Sets should be used as well. A custom permission allows exporting of Action Plan Templates. \tAction Plans Admin  includes Modify All permissions for all four Action Plan objects(Action Plan, Action Plan Task Template, Action Plan Template, and Action Plan Template Task Template). A custom permission allows\t\texporting Action Plan Templates.  Note: The Apex used in Flows or via triggers does not require special permissions to run.  Using Action Plans with Custom Objects  To Start Using an Object with Action Plans \t\t\tCreate the object and be sure to check “Track Activities” for the object attrributes \t \t\t\tCreate a lookup field from Action Plan to the object. Name the field the same as the object name.  The field label can be anything. \t \t\t\tAdd the field to the Related Objects  fieldset on Action Plan. \t \t\t\tThe related object will now be available for selection when creating a new Action Plan and relating it to an object. \t \t\t\tAdd the following code to the object trigger in before delete  and after undelete  contexts: \t\t<pre>ActionPlansTriggerHandlers.actionPlansSObjectTriggerHandler( ‘Custom_Object__c’ );</pre> \t    Adding a New Custom Object Action Plan button to the Action Plan object While Action Plans already overrides the New Action Plan action, the New button will show a new Action Plan screen, but will not allow adding an existing template.(Perhaps this will be in a future release… safe harbor.) Create a\tcustom button with the following format on the Action Plan object and add it to the related list on the custom object page layout: \tNavigate to Setup > Object Manager > Action Plan > Buttons, Links, and Actions > New Button or Link \tGive it a label and name, such as “New MyObject Action Plan” \tDisplay Type is List Button. Uncheck the list checkbox. \tUse the following format for the button:\t\t{!URLFOR( $Action.ActionPlan__c.New, null, [refType=\"CustomObject__c\", refId=CustomObject__c.Id])}  \t   To Stop Using an Object with Action Plans If you want, for example, not to allow relating Action Plans to Contracts, remove the Contract field from the Action Plan Related Objects fieldset.\tThere is no need to delete the field from the Action Plan object.  Create a Template Now you’re ready to create your first template. Navigate to the Action Plans Templates tab. Click on the “New Action Plan Template” button. The template screen looks like this:  \t\t\tName - Template Name. \t \t\t\tDescription - An explanation of how the template should be used. \t \t\t\tSkip Weekends - Allows you to automatically reschedule a task that would fall on a weekend to either the day before or day after the weekend. When checked, a picklist appears, allowing you to select before or after the\t\t\tweekend. \t \t\t\tAction - Click “X” to eliminate a step in a template. \t \t\t\tSubject - What the task is to do. \t \t\t\tTask Dependency - The dependent task will only be created once the controlling task is completed. \t \t\t\tDays After- This value determines the due date of the task. \t\t\t\t\tFor tasks with no dependency, the task’s due date will be offset from the plan start date. \t\t\tFor tasks with a dependency, the due date will be offset from the expected due date of the task on which it depends. \t\t \t \t\t\tAssigned To – Looks up to user. Leave blank if you want to assign the task dynamically.\t\t\tWhen assigning dynamically, the default behavior will be to assign the task to the running user. You can also have the system assign it to the record owner by changing your Action Plan Settings. See “Post Install Configuration” guide above. \t \t\t\tCategory - What type of activity. \t \t\t\tPriority - Taken from Task priorities and Record Type(if applicable). \t \t\t\tEmail - Send a standard New Task email when checked. For Tasks depending on others, the email will be sent when the task is created. \t \t\t\tReminder – This check box will define the default behaviour for reminders when applying the template to create an Action plan . \t \t\t\tIf it’s left unchecked, in the Action Plan Creation page the reminders will be initially disabled \t \t\t\tIf it’s checked the reminders will be available. \t\t\t\t\tUser Reminder settings: Go Personal Setup > My Personal Information > Reminders, if the option “By default, set reminder on Tasks to:” is checked then the selected time will be the default option for task template\t\t\t\treminders. \t\t\tUser setting for Activity Object : Go App Setup> Feature Settings > Sales > Activity Settings, If “Enable Activity Reminders” is not checked, then reminders column will not be displayed in the Action Plan\t\t\t\tcreation page. \t\t \t \t\t\tComments - Comments supporting a task. \t \t\t\tAdd New Task - Adds an additional row to the tasks grid. \t \t\t\tSave - Saves the template. \t   Task Record Types If your org uses Task Record Types, you must specify which Record Type to use for all Tasks from each Action Plan and Template record. This will affect the Status values available for each related Action Plan Task. This cannot be\tchanged once an Action Plan or Template is created. Only one record type may be specified for all the Tasks on that Action Plan or Template.  Create Action Plans for Several Accounts \t\t\tNavigate to an Accounts list view. Select the Accounts for which you want to create Action Plans. Click on the “Create Account Action Plans” button. \t\t \t \t\t\tSelect the template you want to use by typing the name on the lookup and clicking on it.\t\t\t\t\t \t \t\t\tEnter the information specific to this plan. Note that the Accounts you selected earlier are visible.\t\t\t\t\t \t \t\t\tSave the Action Plan.\t\t\tNote: Action Plan creation is handled by a batch process. It can take a couple of minutes to be able to view all created records. \t\t \t \t\t\tVerify the Action Plan and the tasks. \t \t\t\tComplete the first task on the Action Plan.\t\t\tNote that the Action Plan is now in the correct related list and that this Account has one open activity and one closed activity. The third activity in the template is dependent and will be created only when its controlling task is complete. \t\t \t   Automate Action Plan Creation  Flow Action Plans includes an Invocable Apex class that can be included in a Flow. The Record ID of the triggering record is required, as is the Id OR the Name of the desired template.\tDays from trigger to start Action Plan is optional(and defaults to 0). The first task will be due the number of days(specified on the template) from the start date. This date may fall on a weekend, though task due dates can be moved to avoid weekends if set on the template.  (Optional) Sample Action Plan Template for Account onboarding, run the following sfdx force:apex:execute -f ./data/sample-data.apex  To use this Template with the included Flow, see the Create Action Plan From Template  Apex Action in the New Customer Onboarding Activities  Flow  Create an Account and set Type  to any value that starts with ‘Customer’  Process Builder It is recommended NOT to check the Recursion box when creating a Process Builder to work with Action Plans.   Apex To call the invocable Apex from a Trigger or Apex class, adapt the following sample code: String apTemplateName;ActionPlanTemplate__c apTemplate;List toInsert... // can use any object, such as Account, or the generic SObject classList requests = new List();for(SObject a : toInsert){    ActionPlanCreateInvocable.CreateActionPlanRequest req = new ActionPlanCreateInvocable.CreateActionPlanRequest();    req.templateNameOrID = apTemplate.Id;    req.relatedRecordID = a.Id;    req.daysToActionPlanStart = 0;    requests.add(req);}List resultIDs = ActionPlanCreateInvocable.makeActionPlanFromTemplate(requests);   ActionPlanCreateInvocable.CreateActionPlanRequest class Variables: \tString templateNameOrID (required) Name is not unique, so ID is preferred \tId relatedRecordID (required) Must have a relationship field named the related record object name from Action Plan object \tInteger daysToActionPlanStart (not required) Defaults to 0, the day the plan is created   Share Your Templates and Discover Best Practices using Template Export and Template Import Action Plans supports the sharing and discovery of best practices using Template Export and Template Import.  How to Share Your Template Export is simple. Navigate to the Template you wish to export. Click on the “Export” button.  Export creates a simple XML file containing template header and task information. It also includes information about who created the template.\tNote: It does not include user information or sensitive data about what objects you might use this template with. If you are using Lightning Experience, the exported file is in your Files tab, in your private files library. If you are still using Salesforce Classic, it is in your Documents tab, in your private documents folder. Sharing the file is easy. Email the file to whomever you want to share it with. Do you want to share it with a broader audience? Contact the file to Salesforce Labs at @salesforcelabs.  Best Practices: How to Import Import is also simple. Navigate to the “Import Template” tab. Select the file you want to import using “Browse” and once you’ve found it click on “Import Template.” (Optional) Sample Action Plan Template Import This repository also includes a sample Action Plan Template file, which you can import on the appropriate tab(https://<yourinstance>.lightning.force.com/lightning/n/Action_Plans_Template_Import ) in the org, Trade show follow up . You may download the file from GitHub, or you can find it in your SFDX project in the data  folder."
    },
    {
        "title": "ActionPlanCreateInvocable",
        "fileName": "ActionPlanCreateInvocable.html",
        "text": "ActionPlanCreateInvocable Signature global without sharing class ActionPlanCreateInvocable David Schach2022 ActionPlanCreateInvocable Methods makeActionPlanFromTemplate(requests) Invocable Apex for creating Action Plans from a template, a parent ID, and days from now to start the task due dates makeActionPlanFromTemplate(requests) Invocable Apex for creating Action Plans from a template, a parent ID, and days from now to start the task due dates Signature @InvocableMethod(label='Create Action Plan From Template' description='Takes a Template Name/Id and Record Id and makes an Action Plan for that record.' category='ActionPlans') global static List<Id> makeActionPlanFromTemplate(List<CreateActionPlanRequest> requests) Parameters requests Type: List<CreateActionPlanRequest> Wrapper of CreateActionPlanRequest Returns List<Id>  of the created Action Plans See ActionPlanCreateInvocable.CreateActionPlanRequest Example String apTemplateName; ActionPlanTemplate__c apTemplate; List<SObject> toInsert... // can use any object, such as Account, or the generic SObject class List<requests> = new List<ActionPlanCreateInvocable.CreateActionPlanRequest>(); for(SObject a : toInsert){ ActionPlanCreateInvocable.CreateActionPlanRequest req = new ActionPlanCreateInvocable.CreateActionPlanRequest(); req.templateNameOrID = apTemplate.Id; req.relatedRecordID = a.Id; req.daysToActionPlanStart = 0; requests.add(req); List resultIDs = ActionPlanCreateInvocable.makeActionPlanFromTemplate(requests); ActionPlanCreateInvocable.CreateActionPlanRequest Wrapper class for ActionPlan Request for invocable Apex. Signature global class CreateActionPlanRequest David Schach2022 ActionPlanCreateInvocable.CreateActionPlanRequest Properties Name Signature Annotations Description daysToActionPlanStart global Integer daysToActionPlanStart Days from trigger to start Action Plan. Defaults to 0, the day the plan is created. relatedRecordID global Id relatedRecordID @InvocableVariable(required=true label='The parent Record ID' description='Must have a relationship named the related record object name from Action Plan object') The parent Record ID. Must have a relationship named the related record object name from Action Plan object. templateNameOrID global String templateNameOrID The template Id or Name to use.(Name is not unique, so ID is preferred)"
    },
    {
        "title": "ActionPlanCreationController",
        "fileName": "ActionPlanCreationController.html",
        "text": "ActionPlanCreationController Controller for ActionPlan Create and ActionPlan Edit screens(the same page overrides both actions) Signature public with sharing class ActionPlanCreationController See ActionPlanCreateInvocable Rodrigo Birriel David Schach2011 ActionPlanCreationController Properties Name Signature Annotations Description actionPlan private ActionPlan__c actionPlan @TestVisible apTasks private List<APTask__c> apTasks @testVisible canDisplayReminder public Boolean canDisplayReminder Is the User able to see reminders? cloneParam private String cloneParam errorMsg private String errorMsg hasRelated public Boolean hasRelated Is there a related record or template when we load the page? hasRelatedObject public Boolean hasRelatedObject Set to true if a relationship field is filled inVisualforceContext private Boolean inVisualforceContext @testVisible mapTasksListBkp private Map<Id, ApTaskWrapper> mapTasksListBkp mySettings private Action_Plans_Settings__c mySettings pendingDeletes private List<APTask__c> pendingDeletes refId public String refId Getter and Setter for refId(related record Id) refType public String refType Getter and Setter for RefType(related object Name) relatedFieldName public String relatedFieldName Get the specific lookup field used by this Aciton Plan relatedObjDisplayField public String relatedObjDisplayField The field on the related record we use to display on the ActionPlan.(Not Name for Case and Contract) relatedObjectName public String relatedObjectName The name of the object(the same as the relationship field, except for standard objects) the AP is related to. NOT the name of the related record relatedObjectNameMap private Map<Id, String> relatedObjectNameMap relatedObjectOptions private List<SelectOption> relatedObjectOptions relatedObjLabelPlural public String relatedObjLabelPlural Related Object Name(Plural) relatedObjNameList private List<String> relatedObjNameList @TestVisible We need a list of parent RECORD names when showing all the parents when we mass-create action plans This initializes the list, and then divides it into three parts for three columns on the page. relatedRecordIDs private Set<Id> relatedRecordIDs Related Record IDs relatedRecordsOne public List<String> relatedRecordsOne relatedRecordsThree public List<String> relatedRecordsThree relatedRecordsTwo public List<String> relatedRecordsTwo set private set set private set subtitle public String subtitle The subtitle shown on the page taskHasRecordType public Boolean taskHasRecordType If the Task object has Record Types enabled, return true taskIndex private Double taskIndex taskPriorities private List<SelectOption> taskPriorities taskTypes private List<SelectOption> taskTypes templateId private Id templateId ActionPlanCreationController Constructors ActionPlanCreationController(stdController) Constructor for ActionPlan Create/Edit Page ActionPlanCreationController(stdController) Constructor for ActionPlan Create/Edit Page Signature public ActionPlanCreationController(ApexPages.StandardController stdController) Parameters stdController Type: ApexPages.StandardController ActionPlan__c  standard controller Author David Schach ActionPlanCreationController Methods addTask() Creates a blank APTask__c  record and adds it to apTasks calculateAPTaskIndexValue() Calculates the highest task index value for Action Plan Tasks calculateAPTTaskIndexValue() Calculates the highest task index value for Action Plan Template Tasks cancel() Action that redirects to previous page checkCycleDependent() Checks if Action Plan Tasks has cyclic dependency. checkPendingDeletes() Check if have pending Tasks to delete chooseDisplayField(objectName) Based on the related object name, we display a field from that object as the related record dependantCycle(controllingTask, index) Check for cyclically dependent tasks findActivityEnabledObjects() getAPTasks() Gets Tasks related to an Action Plan, or initializes from the Action Plan Template getAssignToParentOwner() Utility method for checking if we default ownership to parent record owner if we can't edit the field This could be replaced by a $Setup tag in Visualforce, but our logic may become more complex here getCompleted() Retrieves number of completed tasks getDefaultTaskRecordTypeId() Find user default task recordtype getDisplayTemplateLookup() Retrieves if template lookup must be displayed getErrorMsg() Getter method to return the error message getHoursOption() Generate picklist of available task due times getNameListSize() The size of the list of related objects available as parents to the Action Plan getNamespacePrefix() Retrieve the Namespace Prefix in case we are in a managed package. Needed for the JavaScript in the page getRecordTypeName() Convert Record Type Id to Record Type Name for the Action Plan's Tasks getRelatedObjectOptions() Getter method with the related object options by default. getSubjectItems() Returns list of Dependent tasks to fill drop down getTaskPriorities() Generate picklist of Task Priorities getTaskRTPicklistValues() Generate picklist of Task Record Types getTasks() Method that retrieves all AP tasks for a Action Plan for Visualforce Page getTaskTypes() Generate picklist of Task Types getTemplateName() Send Action Plan's Template Name to the Visualforce page Because the record has not been saved, the Action Plan Name on initialization is the same as the name of the template hasRelatedObject() Check if the action plan has a related object initCloneActionPlan() Initalize controller for cloning an Action Plan initEditActionPlan() Initalize controller for editing an Action Plan initNewActionPlan() Initalize controller for creating a new Action Plan initNewActionPlanFromTemplate(visualforceContext) Initalize controller for creating a new Action Plan from a template Used so we can instantiate this controller from Invocable Apex initNewActionPlanFromTemplate(visualforceContext, apt) initNewActionPlanFromTemplate description onLoad() Action on page load to ensure custom setting is created parseRelatedIDs(relatedIDs) Take related IDs parameter and put into a list if each is an Id. Discard invalid IDs referedObjectInit() Set the Refered object to Create New Action Plan refreshRelatedObjectsLookUp() Refresh the related object lookup field. relatedObjectId() Returns the related object Id from lookup fields. removeTask() Action for removing a existing Action Plan Task retrieveNameRelatedRecord(relatedRecordIDs, relatedObjectName) Query the names of the parent records from the IDs. Some standard objects have special \"name\" fields retrieveTaskFromExistingActionPlan(actionPlanId) Get a Existing Action Plan Task List save() Action that saves a new Action Plan saveAndNew() Saves Action Plan Instance and tasks and returns to the creation page with the previous Action Plan's details. saveAp() Saves Action Plan Instance and task. Also creates all due dates for tasks, then redirects to the AP list saveHandler() Saves Action Plan Handler. Decides if we are assigning to multiple parent records or just one saveMultiple() Save Action Plans for Multiple Related Object Instances. Invokes batch process that creates : ActionPlan, ActionPlanTasksTemplate AND Tasks savePageRef() Saves Action Plan Instance and tasks and redirects to that detail page addTask() Creates a blank APTask__c  record and adds it to apTasks Signature public APTask__c addTask() Returns the APTask__c  we are adding calculateAPTaskIndexValue() Calculates the highest task index value for Action Plan Tasks Signature private Double calculateAPTaskIndexValue() Returns maxIndex calculateAPTTaskIndexValue() Calculates the highest task index value for Action Plan Template Tasks Signature private Double calculateAPTTaskIndexValue() Returns maxIndex cancel() Action that redirects to previous page Signature public PageReference cancel() Returns PageReference checkCycleDependent() Checks if Action Plan Tasks has cyclic dependency. Signature public Boolean checkCycleDependent() Returns True if there is a cyclic dependency checkPendingDeletes() Check if have pending Tasks to delete Signature private void checkPendingDeletes() chooseDisplayField(objectName) Based on the related object name, we display a field from that object as the related record Signature private String chooseDisplayField(String objectName) Parameters objectName Type: String SObject Name Returns The display field Author David Schach dependantCycle(controllingTask, index) Check for cyclically dependent tasks Signature private Boolean dependantCycle(APTask__c controllingTask, Integer index) Parameters controllingTask Type: APTask__c The task we are checking index Type: Integer The index of the task(for referencing the controllign one) Returns Boolean  Does this task have a dependency? findActivityEnabledObjects() Signature private Set<String> findActivityEnabledObjects() getAPTasks() Gets Tasks related to an Action Plan, or initializes from the Action Plan Template Signature public List<APTask__c> getAPTasks() Returns Action Plan Tasks getAssignToParentOwner() Utility method for checking if we default ownership to parent record owner if we can't edit the field This could be replaced by a $Setup tag in Visualforce, but our logic may become more complex here Signature public Boolean getAssignToParentOwner() Returns Boolean  Is the Custom Setting present, and do we default uneditable assigned user fields to the parent record owner? getCompleted() Retrieves number of completed tasks Signature public Integer getCompleted() Returns Integer getDefaultTaskRecordTypeId() Find user default task recordtype Signature @testVisible private Id getDefaultTaskRecordTypeId() Returns default task record type Id getDisplayTemplateLookup() Retrieves if template lookup must be displayed Signature public Boolean getDisplayTemplateLookup() Returns True if there is a related record or if there is a template ID provided getErrorMsg() Getter method to return the error message Signature public String getErrorMsg() Returns String  Error message getHoursOption() Generate picklist of available task due times Signature public List<SelectOption> getHoursOption() Returns picklist of 30-minute intervals getNameListSize() The size of the list of related objects available as parents to the Action Plan Signature public Integer getNameListSize() Returns The picklist size Author David Schach getNamespacePrefix() Retrieve the Namespace Prefix in case we are in a managed package. Needed for the JavaScript in the page Signature public String getNamespacePrefix() Returns String  Namespace Prefix(LabsActionPlans or empty string) getRecordTypeName() Convert Record Type Id to Record Type Name for the Action Plan's Tasks Signature public String getRecordTypeName() Returns Task Record Type Name for the current Action Plan getRelatedObjectOptions() Getter method with the related object options by default. Signature public List<SelectOption> getRelatedObjectOptions() Returns Picklist of all related objects to Action Plan getSubjectItems() Returns list of Dependent tasks to fill drop down Signature public List<SelectOption> getSubjectItems() Returns List<SelectOption>  All other AP Task subjects getTaskPriorities() Generate picklist of Task Priorities Signature public List<SelectOption> getTaskPriorities() Returns Picklist of Task.Priority getTaskRTPicklistValues() Generate picklist of Task Record Types Signature public List<SelectOption> getTaskRTPicklistValues() Returns Picklist of Task.RecordType  options getTasks() Method that retrieves all AP tasks for a Action Plan for Visualforce Page Signature public List<ApTaskWrapper> getTasks() Returns The List<ApTaskWrapper>  of AP Task Wrappers for Visualforce Page getTaskTypes() Generate picklist of Task Types Signature public List<SelectOption> getTaskTypes() Returns Picklist of Task.Type getTemplateName() Send Action Plan's Template Name to the Visualforce page Because the record has not been saved, the Action Plan Name on initialization is the same as the name of the template Signature public String getTemplateName() Returns ActionPlan__c.Name (from ActionPlan__c.Action_Plan_Template__r.Name ) Author David Schach hasRelatedObject() Check if the action plan has a related object Signature public Boolean hasRelatedObject() Returns Is a relationship field filled? initCloneActionPlan() Initalize controller for cloning an Action Plan Signature private void initCloneActionPlan() initEditActionPlan() Initalize controller for editing an Action Plan Signature private void initEditActionPlan() initNewActionPlan() Initalize controller for creating a new Action Plan Signature private void initNewActionPlan() initNewActionPlanFromTemplate(visualforceContext) Initalize controller for creating a new Action Plan from a template Used so we can instantiate this controller from Invocable Apex Signature private void initNewActionPlanFromTemplate(Boolean visualforceContext) Parameters visualforceContext Type: Boolean Are we in Visualforce context? Author David Schach initNewActionPlanFromTemplate(visualforceContext, apt) initNewActionPlanFromTemplate description Signature private void initNewActionPlanFromTemplate(Boolean visualforceContext, ActionPlanTemplate__c apt) Parameters visualforceContext Type: Boolean visualforceContext description apt Type: ActionPlanTemplate__c apt description Author David Schach onLoad() Action on page load to ensure custom setting is created Signature public PageReference onLoad() Returns null(required for page actions method) parseRelatedIDs(relatedIDs) Take related IDs parameter and put into a list if each is an Id. Discard invalid IDs Signature private List<Id> parseRelatedIDs(String relatedIDs) Parameters relatedIDs Type: String The page URL parameters Returns A list(not set) of all related IDs from the URL Author David Schach referedObjectInit() Set the Refered object to Create New Action Plan Signature @TestVisible private void referedObjectInit() refreshRelatedObjectsLookUp() Refresh the related object lookup field. Signature public PageReference refreshRelatedObjectsLookUp() Returns PageReference  null relatedObjectId() Returns the related object Id from lookup fields. Signature @testVisible private Id relatedObjectId() Returns the related object id removeTask() Action for removing a existing Action Plan Task Signature public void removeTask() retrieveNameRelatedRecord(relatedRecordIDs, relatedObjectName) Query the names of the parent records from the IDs. Some standard objects have special \"name\" fields Signature private List<String> retrieveNameRelatedRecord(Set<Id> relatedRecordIDs, String relatedObjectName) Parameters relatedRecordIDs Type: Set<Id> The related object IDs relatedObjectName Type: String The name of the SObject for which the IDs refer Returns List of related record names retrieveTaskFromExistingActionPlan(actionPlanId) Get a Existing Action Plan Task List Signature private List<APTask__c> retrieveTaskFromExistingActionPlan(Id actionPlanId) Parameters actionPlanId Type: Id Parent ActionPlan__c  Id Returns All template tasks save() Action that saves a new Action Plan Signature public PageReference save() Returns PageReference See ActionPlanCreationController.saveHandler saveAndNew() Saves Action Plan Instance and tasks and returns to the creation page with the previous Action Plan's details. Signature public PageReference saveAndNew() Returns newPage saveAp() Saves Action Plan Instance and task. Also creates all due dates for tasks, then redirects to the AP list Signature private Id saveAp() Returns ActionPlan__c  Id saveHandler() Saves Action Plan Handler. Decides if we are assigning to multiple parent records or just one Signature private PageReference saveHandler() Returns Pagereference called Method See ActionPlanCreationController.save , ActionPlanCreationController.savePageRef , ActionPlanCreationController.saveMultiple saveMultiple() Save Action Plans for Multiple Related Object Instances. Invokes batch process that creates : ActionPlan, ActionPlanTasksTemplate AND Tasks Signature @TestVisible private PageReference saveMultiple() Returns Pagereference(null or ActionPlansHome with confirmation) savePageRef() Saves Action Plan Instance and tasks and redirects to that detail page Signature private PageReference savePageRef() Returns newPage See ActionPlanCreationController.saveAp ActionPlanCreationController.ApTaskWrapper Wrapper Class for AP Task SObject Signature public class ApTaskWrapper Rodrigo Birriel David Schach08/01/2010 4/2022 ActionPlanCreationController.ApTaskWrapper Properties Name Signature Description apt public APTask__c apt Action Plan Task in wrapper displayLookUp public Boolean displayLookUp Should we display the lookup? isLast public Boolean isLast Last Task position public Integer position Task position(order on the page) userRequired public Boolean userRequired Is the User lookup required? ActionPlanCreationController.ApTaskWrapper Constructors ApTaskWrapper(apTask, pos, looKp, userReq, apTaskRTId) Constructor ApTaskWrapper(apTask, pos, looKp, userReq, apTaskRTId) Constructor Signature public ApTaskWrapper(APTask__c apTask, Integer pos, Boolean looKp, Boolean userReq, Id apTaskRTId) Parameters apTask Type: APTask__c Action Plan Task Template pos Type: Integer Position(in the list of AP Tasks) on the Page looKp Type: Boolean Should the User lookup(for assignment) be displayed? userReq Type: Boolean Should the assigned user field be required? apTaskRTId Type: Id The Record Type of the Task eventually to be created"
    },
    {
        "title": "ActionPlanDetailController",
        "fileName": "ActionPlanDetailController.html",
        "text": "ActionPlanDetailController Signature public with sharing class ActionPlanDetailController See ActionPlanDetailControllerTest David Schach2011 ActionPlanDetailController Properties Name Signature Description actionPlan private ActionPlan__c actionPlan apTaskWrapperList private List<TaskWrapper> apTaskWrapperList canDisplayReminder public Boolean canDisplayReminder Does the user have reminders enabled? If not, do not shrae the reminder option hasControllingTasks public Boolean hasControllingTasks Display ControllingTasks column only if there are controlling tasks hasRecordType public Boolean hasRecordType Does the org have Record Types enabled for Task SObject set private set ActionPlanDetailController Constructors ActionPlanDetailController(stdController) Constructor ActionPlanDetailController(stdController) Constructor Signature public ActionPlanDetailController(ApexPages.StandardController stdController) Parameters stdController Type: ApexPages.StandardController Standard Controller ActionPlanDetailController Methods deletePlan() Deletes the current Action Plan loaded and redirects to the AP List getActionPlanTasks() Collect and return all TaskWrappers getCanShare() If we have no share object, we don't need to show a Share button getCanTransfer() Does the user have permission to transfer? We query UserRecordAccess  to find out. getCompleted() Returns number of completed tasks for this Action Plan getRecordTypeName() Convert AP Task Record Type Id to Record Type Name getRelatedObjectLabel() The label of the Action Plan's parent record SObject getrelatedRecordName() The name of the parent record - show a different field based on SObject Type getVersion() Checks if Action Plan Template has been changed since the creation of the Action Plan. print() Show the Print page(simple formatting) deletePlan() Deletes the current Action Plan loaded and redirects to the AP List Signature public PageReference deletePlan() Returns Page to go to after deleting ActionPlan__c getActionPlanTasks() Collect and return all TaskWrappers Signature public List<TaskWrapper> getActionPlanTasks() Returns List of TaskWrapper  for this Action Plan getCanShare() If we have no share object, we don't need to show a Share button Signature public Boolean getCanShare() Returns Does the ActionPlan__Share  object exist? Author David Schach getCanTransfer() Does the user have permission to transfer? We query UserRecordAccess  to find out. Signature public Boolean getCanTransfer() Returns Boolean  yes/no Author David Schach getCompleted() Returns number of completed tasks for this Action Plan Signature public Integer getCompleted() Returns Number of completed tasks getRecordTypeName() Convert AP Task Record Type Id to Record Type Name Signature public String getRecordTypeName() Returns Record Type Name getRelatedObjectLabel() The label of the Action Plan's parent record SObject Signature public String getRelatedObjectLabel() Returns Label of the object related to this Action Plan getrelatedRecordName() The name of the parent record - show a different field based on SObject Type Signature public String getrelatedRecordName() Returns name of the object related to this Action Plan getVersion() Checks if Action Plan Template has been changed since the creation of the Action Plan. Signature public Boolean getVersion() Returns Was the AP's template modified after the Action Plan was created? print() Show the Print page(simple formatting) Signature public PageReference print() Returns ActionPlanPrint page Author David Schach ActionPlanDetailController.TaskWrapper Wrapper for Action Plan Task It contains the Action Plan Task  and the Task  Id Signature public class TaskWrapper ActionPlanDetailController.TaskWrapper Properties Name Signature Description apt public APTask__c apt The Action Plan Task taskId public Id taskId The(standard) Task  Id ActionPlanDetailController.TaskWrapper Constructors TaskWrapper(aptParam, taskIdParam) Constructor for the task wrapper TaskWrapper(aptParam, taskIdParam) Constructor for the task wrapper Signature public TaskWrapper(APTask__c aptParam, Id taskIdParam) Parameters aptParam Type: APTask__c Action Plan Task Template taskIdParam Type: Id TaskId(for the standard object Task )"
    },
    {
        "title": "ActionPlanTemplateCreationController",
        "fileName": "ActionPlanTemplateCreationController.html",
        "text": "ActionPlanTemplateCreationController Extension for Action Plan Template  Create/Edit page Signature public with sharing class ActionPlanTemplateCreationController 2011 ActionPlanTemplateCreationController Properties Name Signature Annotations Description actionPlanTemplate private ActionPlanTemplate__c actionPlanTemplate @testVisible aptTasks private List<APTemplateTask__c> aptTasks @TestVisible canDisplayReminder public Boolean canDisplayReminder Does the user have reminders enabled? errorMsg private String errorMsg pendingTemplateDeletes private List<APTemplateTask__c> pendingTemplateDeletes @testVisible subTitle public String subTitle Page SubTitle taskHasRecordType public Boolean taskHasRecordType Does the Task  object have Record Types enabled? taskIndex private Double taskIndex taskPriorities private List<SelectOption> taskPriorities taskTypes private List<SelectOption> taskTypes Generate picklist of Task Types templateId private Id templateId ActionPlanTemplateCreationController Constructors ActionPlanTemplateCreationController(stdController) Constructor If we can obtain the Id from the page parameters then we search for that template and set the variable for that template. If we can't obtain the Id from the page parameters then we create a new template and obtain from the controller. Then we need to check if we are cloning the template; in that case clone the template without Id. ActionPlanTemplateCreationController(stdController) Constructor If we can obtain the Id from the page parameters then we search for that template and set the variable for that template. If we can't obtain the Id from the page parameters then we create a new template and obtain from the controller. Then we need to check if we are cloning the template; in that case clone the template without Id. Signature public ActionPlanTemplateCreationController(ApexPages.StandardController stdController) Parameters stdController Type: ApexPages.StandardController Standard Controller(ActionPlanTemplate__c ) ActionPlanTemplateCreationController Methods addTemplateTask() Call method addTemplateTask() calculateTaskIndexValue() Calculates the highest task index value cancelTemplate() Call method cancelTemplate() checkCycleDependent() Checks if Action Plan Tasks has cyclic dependency. dependantCycle(destinyTask, index) Check for dependent tasks getDefaultTaskRecordTypeId() Find user default recordtype getErrorMsg() Getter method to return the error message from action plans utilities getHoursOption() Get the reminder time picklist options from the central utilities class getTaskPriorities() Generate picklist of Task Priorities getTaskRTPicklistValues() Generate picklist of Task Record Types getTaskTypes() Generate a picklist of Task.Type getTemplateSubjectItems() Call method getTemplateSubjectItems() getTemplateTasks() Get all tasks related to the Action Template. getTemplateTaskSize() Return size of the APTTemplate Tasks List. getTemplateWrappers() Iterate over aptTasks onLoad() Action on page load to ensure custom setting is created queryAPTTasks(recordId) removeTemplateTask() Call method removeTemplateTask() saveAndNew() Save and go to New page for Save and New saveTemplate() Saves Action Plan Template and all tasks, then redirects to the AP template list. First check for pending templates for delete; in case that exists then delete those objects. Then insert or update the Action Plan Template pending to save and save tasks to the template and attach relation to Action Plan. templateCycleDependent() Checks if Action Plans Tasks has cyclic dependency. addTemplateTask() Call method addTemplateTask() Signature public void addTemplateTask() calculateTaskIndexValue() Calculates the highest task index value Signature public Double calculateTaskIndexValue() Returns maxIndex cancelTemplate() Call method cancelTemplate() Signature public PageReference cancelTemplate() Returns PageReference checkCycleDependent() Checks if Action Plan Tasks has cyclic dependency. Signature public PageReference checkCycleDependent() Returns PageReference dependantCycle(destinyTask, index) Check for dependent tasks Signature private Boolean dependantCycle(APTemplateTask__c destinyTask, Integer index) Parameters destinyTask Type: APTemplateTask__c index Type: Integer Returns Boolean getDefaultTaskRecordTypeId() Find user default recordtype Signature public Id getDefaultTaskRecordTypeId() Returns The org default Task RecordTypeId getErrorMsg() Getter method to return the error message from action plans utilities Signature public String getErrorMsg() Returns errorMsg getHoursOption() Get the reminder time picklist options from the central utilities class Signature public List<SelectOption> getHoursOption() Returns Picklist of reminder times getTaskPriorities() Generate picklist of Task Priorities Signature public List<SelectOption> getTaskPriorities() Returns Picklist of Task.Priority getTaskRTPicklistValues() Generate picklist of Task Record Types Signature public List<SelectOption> getTaskRTPicklistValues() Returns A picklist of available Record Types getTaskTypes() Generate a picklist of Task.Type Signature public List<SelectOption> getTaskTypes() Returns Picklist of TaskType getTemplateSubjectItems() Call method getTemplateSubjectItems() Signature public List<SelectOption> getTemplateSubjectItems() Returns the picklist of Task subjects getTemplateTasks() Get all tasks related to the Action Template. Signature public List<APTemplateTask__c> getTemplateTasks() Returns aptTasks getTemplateTaskSize() Return size of the APTTemplate Tasks List. Signature public Integer getTemplateTaskSize() Returns the number of template tasks getTemplateWrappers() Iterate over aptTasks Signature public List<ApTTaskWrapper> getTemplateWrappers() Returns All the template wrappers for display on the page onLoad() Action on page load to ensure custom setting is created Signature public PageReference onLoad() Returns PageReference(null) queryAPTTasks(recordId) Signature private List<APTemplateTask__c> queryAPTTasks(Id recordId) removeTemplateTask() Call method removeTemplateTask() Signature public void removeTemplateTask() saveAndNew() Save and go to New page for Save and New Signature public Pagereference saveAndNew() Returns PageReference saveTemplate() Saves Action Plan Template and all tasks, then redirects to the AP template list. First check for pending templates for delete; in case that exists then delete those objects. Then insert or update the Action Plan Template pending to save and save tasks to the template and attach relation to Action Plan. Signature public PageReference saveTemplate() Returns newPage templateCycleDependent() Checks if Action Plans Tasks has cyclic dependency. Signature public Boolean templateCycleDependent() Returns Boolean cyclicErrorExists ActionPlanTemplateCreationController.ApTTaskWrapper Inner Wrapper Class for Action Plan Template Tasks Signature public class ApTTaskWrapper Matias Menafra @date 08/08/2010 David Schach @date 05/2021 ActionPlanTemplateCreationController.ApTTaskWrapper Properties Name Signature Description isLast public Boolean isLast Last Task position public Integer position Task position(order on the page) task public APTemplateTask__c task Action Plan Template Task in wrapper ActionPlanTemplateCreationController.ApTTaskWrapper Constructors ApTTaskWrapper(apTask, pos, apTTaskRTId) Constructor for ActionPlan Template Task Wrapper ApTTaskWrapper(apTask, pos, apTTaskRTId) Constructor for ActionPlan Template Task Wrapper Signature public ApTTaskWrapper(APTemplateTask__c apTask, Integer pos, Id apTTaskRTId) Parameters apTask Type: APTemplateTask__c Action Plan Template Task pos Type: Integer Position/Index apTTaskRTId Type: Id The RecordType of the related Task"
    },
    {
        "title": "ActionPlanTemplateDetailController",
        "fileName": "ActionPlanTemplateDetailController.html",
        "text": "ActionPlanTemplateDetailController Signature public with sharing class ActionPlanTemplateDetailController 2011 ActionPlanTemplateDetailController Properties Name Signature Annotations Description actionPlanExportXMLId public Id actionPlanExportXMLId The Id of the Action Plan for Exporting. Shown on the Export page that shares thsi controller actionPlanTemplate private ActionPlanTemplate__c actionPlanTemplate @TestVisible canDisplayReminder public Boolean canDisplayReminder Does the user have reminders enabled? taskHasRecordType public Boolean taskHasRecordType Does the org use Task RecordType? ActionPlanTemplateDetailController Constructors ActionPlanTemplateDetailController(stdController) Constructor If we can obtain the Id from the page parameters then we search for that template and set the variable for that template. If we can't obtain the Id from the page parameters then we create a new template and obtain from the controller. ActionPlanTemplateDetailController(stdController) Constructor If we can obtain the Id from the page parameters then we search for that template and set the variable for that template. If we can't obtain the Id from the page parameters then we create a new template and obtain from the controller. Signature public ActionPlanTemplateDetailController(ApexPages.StandardController stdController) Parameters stdController Type: ApexPages.StandardController Standard Controller(Action Plan Template) ActionPlanTemplateDetailController Methods deleteTemplate() Call method deleteTemplate() exportTemplateToXMLDoc() Method exports the Action Plan template into a new XML document getCanShare() If we have no share object, we don't need to show a Share button getCanTransfer() Does the user have permission to transfer? We query UserRecordAccess  to find out. getRecordTypeName() Convert Record Type Id to Record Type Name getSuccessMessage() Determine the export success message based on LEX vs Classic getTemplateTasks() Call method getTemplateTasks() deleteTemplate() Call method deleteTemplate() Signature public PageReference deleteTemplate() Returns PageReference exportTemplateToXMLDoc() Method exports the Action Plan template into a new XML document Signature public void exportTemplateToXMLDoc() getCanShare() If we have no share object, we don't need to show a Share button Signature public Boolean getCanShare() Returns Does the ActionPlanTemplate__Share  object exist? Author David Schach getCanTransfer() Does the user have permission to transfer? We query UserRecordAccess  to find out. Signature public Boolean getCanTransfer() Returns Boolean  yes/no Author David Schach getRecordTypeName() Convert Record Type Id to Record Type Name Signature public String getRecordTypeName() Returns Record Type Name getSuccessMessage() Determine the export success message based on LEX vs Classic Signature public String getSuccessMessage() Returns The success message getTemplateTasks() Call method getTemplateTasks() Signature public List<APTemplateTask__c> getTemplateTasks() Returns List<APTemplateTask__c>"
    },
    {
        "title": "ActionPlanTemplateExport",
        "fileName": "ActionPlanTemplateExport.html",
        "text": "ActionPlanTemplateExport Helper class to do the work for creating XML for a given Action Plan Template Signature public without sharing class ActionPlanTemplateExport 2011 ActionPlanTemplateExport Properties Name Signature Description fileOrDocumentId public Id fileOrDocumentId The File  or Document  Id for display on the Visualforce confirmation page templateId private String templateId ActionPlanTemplateExport Constructors ActionPlanTemplateExport(templateId) Constructor ActionPlanTemplateExport(templateId) Constructor Signature public ActionPlanTemplateExport(String templateId) Parameters templateId Type: String ActionPlanTemplate__c  Id ActionPlanTemplateExport Methods buildXmlString(target) Method to compile XML document for a given Action Plan Template and child tasks export() Method in charge of handling the export task related to a Action Plan Template saveToContent(name, xml) saveToDocument(name, xml) Method in charge of saving document in personal folder for later retrievel writeElement(out, tag, content) Method used for sanatizing input for XML document buildXmlString(target) Method to compile XML document for a given Action Plan Template and child tasks Signature @TestVisible private String buildXmlString(ActionPlanTemplate__c target) Parameters target Type: ActionPlanTemplate__c Returns The XML export() Method in charge of handling the export task related to a Action Plan Template Signature public Id export() Returns ContentDocument  or Document  Id saveToContent(name, xml) Signature @TestVisible private Id saveToContent(String name, String xml) saveToDocument(name, xml) Method in charge of saving document in personal folder for later retrievel Signature @TestVisible private Id saveToDocument(String name, String xml) Parameters name Type: String xml Type: String Returns doc writeElement(out, tag, content) Method used for sanatizing input for XML document Signature private void writeElement(Xmlstreamwriter out, String tag, String content) Parameters out Type: Xmlstreamwriter tag Type: String content Type: String"
    },
    {
        "title": "ActionPlanTemplateImport",
        "fileName": "ActionPlanTemplateImport.html",
        "text": "ActionPlanTemplateImport Called from ActionPlanTemplateImportController - can probably be rolled into that class, but it's doing fine here. Signature public inherited sharing class ActionPlanTemplateImport See ActionPlanTemplateImportController 2011 ActionPlanTemplateImport Properties Name Signature importedTasks private Map<Id, APTemplateTask__c> importedTasks newTasks private Map<Id, APTemplateTask__c> newTasks ActionPlanTemplateImport Constructors ActionPlanTemplateImport() Constructor ActionPlanTemplateImport() Constructor Signature public ActionPlanTemplateImport() ActionPlanTemplateImport Methods getDecodedString(reader) Method for decoding strings from XML document importAPTemplate(xml) Method for handling importing of a Action Plan Template Object importAPTtasks(xml, apTemplateId) Method for handling importing of Action Plan Template Task Objects parseMetaData(reader) Method in charge of parsing meta data from XMl document parseTemplate(reader) Method in charge of parsing data from XMl document to create a Action Plan Template Object parseTemplateTask(reader, apTemplateId) Method in charge of parsing data from XMl document to create a Template Task Object processImportedDocument(document) Method in charge of retrieving and compiling the data from imported file, for then inserting into the system. readingMetaData(xml) Method for reading the meta data tag from xml document setupDependentTasks() Method in charge of re-building dependent tasks for imported Action Plans Template getDecodedString(reader) Method for decoding strings from XML document Signature private String getDecodedString(Xmlstreamreader reader) Parameters reader Type: Xmlstreamreader Part of the XML string Returns String importAPTemplate(xml) Method for handling importing of a Action Plan Template Object Signature private ActionPlanTemplate__c importAPTemplate(String xml) Parameters xml Type: String import file Returns apTemplate importAPTtasks(xml, apTemplateId) Method for handling importing of Action Plan Template Task Objects Signature private void importAPTtasks(String xml, Id apTemplateId) Parameters xml Type: String import file apTemplateId Type: Id Action Plan Template Id parseMetaData(reader) Method in charge of parsing meta data from XMl document Signature private Boolean parseMetaData(Xmlstreamreader reader) Parameters reader Type: Xmlstreamreader Returns correctMetaData Exceptions ImportException parseTemplate(reader) Method in charge of parsing data from XMl document to create a Action Plan Template Object Signature private ActionPlanTemplate__c parseTemplate(Xmlstreamreader reader) Parameters reader Type: Xmlstreamreader Returns The created Action Plan Template parseTemplateTask(reader, apTemplateId) Method in charge of parsing data from XMl document to create a Template Task Object Signature private void parseTemplateTask(Xmlstreamreader reader, Id apTemplateId) Parameters reader Type: Xmlstreamreader XML reader apTemplateId Type: Id template Id processImportedDocument(document) Method in charge of retrieving and compiling the data from imported file, for then inserting into the system. Signature public String processImportedDocument(Attachment document) Parameters document Type: Attachment Attachment record Returns String Exceptions ImportException readingMetaData(xml) Method for reading the meta data tag from xml document Signature private void readingMetaData(String xml) Parameters xml Type: String String of import file Exceptions ImportException setupDependentTasks() Method in charge of re-building dependent tasks for imported Action Plans Template Signature private List<APTemplateTask__c> setupDependentTasks() Returns updatedTasks ActionPlanTemplateImport.ImportException Signature public class ImportException extends Exception"
    },
    {
        "title": "ActionPlanTemplateImportController",
        "fileName": "ActionPlanTemplateImportController.html",
        "text": "ActionPlanTemplateImportController Controller for import page Signature public with sharing class ActionPlanTemplateImportController See ActionPlanTemplateImport 2011 ActionPlanTemplateImportController Properties Name Signature Description attachment public Attachment attachment The attachment to be used to hold imported xml ActionPlanTemplateImportController Constructors ActionPlanTemplateImportController() Constructor ActionPlanTemplateImportController() Constructor Signature public ActionPlanTemplateImportController() ActionPlanTemplateImportController Methods importTemplate() Action that initiates the Import process importTemplate() Action that initiates the Import process Signature public PageReference importTemplate() Returns PageReference See ActionPlanTemplateImport"
    },
    {
        "title": "ActionPlansBatchBuilder",
        "fileName": "ActionPlansBatchBuilder.html",
        "text": "ActionPlansBatchBuilder Batch for creating Action Plans Stateful because we may be making a LOT of Action Plans and we want to maintain state in the Utilities class Signature public inherited sharing class ActionPlansBatchBuilder implements Database.Batchable<SObject>, Database.Stateful 2011 ActionPlansBatchBuilder Constructors ActionPlansBatchBuilder(baseObj, aPTList, refType, oIdsSet) Constructor ActionPlansBatchBuilder(baseObj, aPTList, refType, oIdsSet) Constructor Signature public ActionPlansBatchBuilder(ActionPlan__c baseObj, List<APTask__c> aPTList, String refType, Set<Id> oIdsSet) Parameters baseObj Type: ActionPlan__c ActionPlan base aPTList Type: List<APTask__c> List of the task templates refType Type: String The related object name oIdsSet Type: Set<Id> IDs of related parents ActionPlansBatchBuilder Methods execute(bc, data) Batch execute method finish(bc) Batch finish method. Do nothing. start(bc) Use the start method to collect the records or objects to be passed to the interface method execute execute(bc, data) Batch execute method Signature public void execute(Database.BatchableContext bc, List<SObject> data) Parameters bc Type: Database.BatchableContext data Type: List<SObject> finish(bc) Batch finish method. Do nothing. Signature public void finish(Database.BatchableContext bc) start(bc) Use the start method to collect the records or objects to be passed to the interface method execute Signature public Iterable<sObject> start(Database.BatchableContext bc) Parameters bc Type: Database.BatchableContext BatchableContext Returns Iterable"
    },
    {
        "title": "ActionPlansBatchBuilderUtilities",
        "fileName": "ActionPlansBatchBuilderUtilities.html",
        "text": "ActionPlansBatchBuilderUtilities Batch Utilities class Signature public inherited sharing class ActionPlansBatchBuilderUtilities See ActionPlanCreateInvocable , ActionPlanCreationController , ActionPlansBatchBuilder 2011 ActionPlansBatchBuilderUtilities Properties Name Signature baseAPTaskList private List<APTask__c> baseAPTaskList mode private ApEditMode mode myNewTasksWithEmail private List<Task> myNewTasksWithEmail myOldTasksWithEmail private List<Task> myOldTasksWithEmail myTasksWithOutEmail private List<Task> myTasksWithOutEmail relActionPlans private List<ActionPlan__c> relActionPlans relAPTaskList private List<APTask__c> relAPTaskList relatedObjectName private String relatedObjectName relatedRecordIDs private Set<Id> relatedRecordIDs Enums Name Signature Values Description ApEditMode private enum ApEditMode MODE_EDIT_SINGLE, MODE_NEW Editing or creating an ActionPlan__c  record? ActionPlansBatchBuilderUtilities Constructors ActionPlansBatchBuilderUtilities(baseObj, aPTListparam, refType, oIdsLIst) Constructor ActionPlansBatchBuilderUtilities(baseObj, aPTListparam, refType, oIdsLIst) Constructor Signature public ActionPlansBatchBuilderUtilities(ActionPlan__c baseObj, List<APTask__c> aPTListparam, String refType, Set<Id> oIdsLIst) Parameters baseObj Type: ActionPlan__c ActionPlan object aPTListparam Type: List<APTask__c> Action Plan Task Template records refType Type: String Related object Name oIdsLIst Type: Set<Id> Parent IDs ActionPlansBatchBuilderUtilities Methods generateActionPlans() Generate Action Plans from parameters passed to this class generateObjectFeeds(objIds) Generate New FeedItems  for multiple Action Plans getAPTaskTemplateUser(ap, relObjOwners, apTaskUser) Read the Action Plan and see the custom setting to determine who should own the AP Tasks getObjects(bc) Iterable method for batch getPostObjectBody(recID, apName) Given a parentID and the name of an Action Plan, make the FeedItem  post body getRelatedRecordOwnerId(ap, relObjOwners) Given an Action Plan, looking in its relationship fields, find the owner of the related record from the map of records and owners retrieveOwnersDataRelatedObject(relatedRecordIDs, relatedObjectName) Retrieve the owner list from the related object. generateActionPlans() Generate Action Plans from parameters passed to this class Signature public Id generateActionPlans() Returns the Id  of the first created ActionPlan__c Author David Schach generateObjectFeeds(objIds) Generate New FeedItems  for multiple Action Plans Signature public static void generateObjectFeeds(Set<Id> objIds) Parameters objIds Type: Set<Id> Set of IDs of records for which we may make Chatter posts getAPTaskTemplateUser(ap, relObjOwners, apTaskUser) Read the Action Plan and see the custom setting to determine who should own the AP Tasks Signature public static Id getAPTaskTemplateUser(ActionPlan__c ap, Map<Id, Id> relObjOwners, Id apTaskUser) Parameters ap Type: ActionPlan__c ActionPlan__c  relObjOwners Type: Map<Id, Id> Map of Id to record owner apTaskUser Type: Id the current record user Returns Id  related OwnerID getObjects(bc) Iterable method for batch Signature public Iterable<sObject> getObjects(Database.BatchableContext bc) Parameters bc Type: Database.BatchableContext BatchableContext automatically passed Returns Iterable<sObject> getPostObjectBody(recID, apName) Given a parentID and the name of an Action Plan, make the FeedItem  post body Signature public static String getPostObjectBody(Id recID, String apName) Parameters recID Type: Id Parent ID apName Type: String Action Plan Name Returns FeedItem.Body Author David Schach getRelatedRecordOwnerId(ap, relObjOwners) Given an Action Plan, looking in its relationship fields, find the owner of the related record from the map of records and owners Signature public static Id getRelatedRecordOwnerId(ActionPlan__c ap, Map<Id, Id> relObjOwners) Parameters ap Type: ActionPlan__c ActionPlan__c  relObjOwners Type: Map<Id, Id> Map of related object ID  to OwnerId Returns The related record OwnerId retrieveOwnersDataRelatedObject(relatedRecordIDs, relatedObjectName) Retrieve the owner list from the related object. Signature public static Map<Id, Id> retrieveOwnersDataRelatedObject(Set<Id> relatedRecordIDs, String relatedObjectName) Parameters relatedRecordIDs Type: Set<Id> list of sobjects' id relatedObjectName Type: String The name of the related object Returns Map of record Id to Owner Id"
    },
    {
        "title": "ActionPlansBatchDelete",
        "fileName": "ActionPlansBatchDelete.html",
        "text": "ActionPlansBatchDelete Batch delete class. This can probably be done in a different way. And we can certainly switch from sending an email to using a platform event. Signature public inherited sharing class ActionPlansBatchDelete implements Database.Batchable<SObject>, Database.Stateful 2011 ActionPlansBatchDelete Properties Name Signature relActionPlansIds private Set<Id> relActionPlansIds ActionPlansBatchDelete Constructors ActionPlansBatchDelete(oIDsSet) Constructor ActionPlansBatchDelete(oIDsSet) Constructor Signature public ActionPlansBatchDelete(Set<Id> oIDsSet) Parameters oIDsSet Type: Set<Id> The ActionPlan record IDs we're planning to delete ActionPlansBatchDelete Methods deleteActionPlans(relActionPlansIds) Tiven actionplanIDs, delete these Action Plans AND their open Tasks execute(bc, data) For each batch, delete the action plans and send an email on any errors finish(bc) No need to do anything at the finish makeEmailBody(e) Create an Email body from an Exception start(bc) Use the start method to collect the records or objects to be passed to the interface method execute deleteActionPlans(relActionPlansIds) Tiven actionplanIDs, delete these Action Plans AND their open Tasks Signature private void deleteActionPlans(Set<Id> relActionPlansIds) Parameters relActionPlansIds Type: Set<Id> Action Plan IDs Author David Schach execute(bc, data) For each batch, delete the action plans and send an email on any errors Signature public void execute(Database.BatchableContext bc, List<SObject> data) Parameters bc Type: Database.BatchableContext BatchableContext data Type: List<SObject> List<SObject>  records to be deleted finish(bc) No need to do anything at the finish Signature @SuppressWarnings('PMD') public void finish(Database.BatchableContext bc) makeEmailBody(e) Create an Email body from an Exception Signature private String makeEmailBody(Exception e) Parameters e Type: Exception Exception Returns Email body Author David Schach start(bc) Use the start method to collect the records or objects to be passed to the interface method execute Signature public Database.QueryLocator start(Database.BatchableContext bc) Parameters bc Type: Database.BatchableContext Returns queried records"
    },
    {
        "title": "ActionPlansBatchTaskBuilder",
        "fileName": "ActionPlansBatchTaskBuilder.html",
        "text": "ActionPlansBatchTaskBuilder When we have more than one task to create, run it in batch context for higher limits Signature public without sharing class ActionPlansBatchTaskBuilder implements Database.Batchable<SObject>, Database.Stateful 2011 ActionPlansBatchTaskBuilder Properties Name Signature apTasks private List<APTask__c> apTasks aptIds private List<Id> aptIds myTasksWithEmail private List<Task> myTasksWithEmail myTasksWithOutEmail private List<Task> myTasksWithOutEmail ActionPlansBatchTaskBuilder Constructors ActionPlansBatchTaskBuilder(apttIds) Constructor ActionPlansBatchTaskBuilder(apttIds) Constructor Signature public ActionPlansBatchTaskBuilder(List<Id> apttIds) Parameters apttIds Type: List<Id> List of ActionPlansTemplateTaskTemplate  IDs ActionPlansBatchTaskBuilder Methods execute(bc, data) Eecute this method multiple times, by default on batches of 200 records finish(bc) Required finish method - we could do something here like send a platform event or notify the user that the batch is complete start(bc) execute(bc, data) Eecute this method multiple times, by default on batches of 200 records Signature public void execute(Database.BatchableContext bc, List<SObject> data) Parameters bc Type: Database.BatchableContext Database.BatchableContext  data Type: List<SObject> The list of SObjects to act on finish(bc) Required finish method - we could do something here like send a platform event or notify the user that the batch is complete Signature public void finish(Database.BatchableContext bc) Parameters bc Type: Database.BatchableContext BatchableContext Author Salesforce Labs start(bc) Signature public Database.QueryLocator start(Database.BatchableContext bc)"
    },
    {
        "title": "ActionPlansCreateMultipleAPsExtension",
        "fileName": "ActionPlansCreateMultipleAPsExtension.html",
        "text": "ActionPlansCreateMultipleAPsExtension Visualforce extension to create multiple Aciton Plans(one per selected record) Invoked via a button on a list view Signature public with sharing class ActionPlansCreateMultipleAPsExtension 2011 ActionPlansCreateMultipleAPsExtension Properties Name Signature Description objIDs public String objIDs All the selected records from the list view standardController private ApexPages.StandardSetController standardController ActionPlansCreateMultipleAPsExtension Constructors ActionPlansCreateMultipleAPsExtension(standardController) Controller ActionPlansCreateMultipleAPsExtension(standardController) Controller Signature public ActionPlansCreateMultipleAPsExtension(ApexPages.StandardSetController standardController) Parameters standardController Type: ApexPages.StandardSetController Standard Controller - used only for Cancel standard action ActionPlansCreateMultipleAPsExtension Methods doRedirect() Go to the page that shows the ActionPlan creation screen to customize the plan for each selected record doRedirect() Go to the page that shows the ActionPlan creation screen to customize the plan for each selected record Signature public PageReference doRedirect() Returns The Action Plan creation page Author David Schach"
    },
    {
        "title": "ActionPlansDeleteMultipleAPExtension",
        "fileName": "ActionPlansDeleteMultipleAPExtension.html",
        "text": "ActionPlansDeleteMultipleAPExtension Controller for page to mass-delete using a set controller. Validates using CanTheUser to ensure user permissions Signature public with sharing class ActionPlansDeleteMultipleAPExtension See ActionPlansDeleteMultipleAPExtTest , CanTheUser Andrew Fawcett  Kevin Poorman  David Schach 2011 ActionPlansDeleteMultipleAPExtension Properties Name Signature Description actionPlansToShow public List<ActionPlan__c> actionPlansToShow The Action Plan records to delete(after user confirmation) standardController private ApexPages.StandardSetController standardController ActionPlansDeleteMultipleAPExtension Constructors ActionPlansDeleteMultipleAPExtension(stdController) Constructor for page showing Action Plans we want to delete ActionPlansDeleteMultipleAPExtension(stdController) Constructor for page showing Action Plans we want to delete Signature public ActionPlansDeleteMultipleAPExtension(ApexPages.StandardSetController stdController) Parameters stdController Type: ApexPages.StandardSetController ActionPlan__c  standard controller Author David Schach ActionPlansDeleteMultipleAPExtension Methods deleteRecords() Page Redirect on delete deleteRecords() Page Redirect on delete Signature public PageReference deleteRecords() Returns PageReference with success/error message Author David Schach"
    },
    {
        "title": "ActionPlansPostInstallScript",
        "fileName": "ActionPlansPostInstallScript.html",
        "text": "ActionPlansPostInstallScript Install sample data on first installation Signature global class ActionPlansPostInstallScript implements InstallHandler David Schach2022 ActionPlansPostInstallScript Methods onInstall(context) Script torun when the managed package is installed onInstall(context) Script torun when the managed package is installed Signature global void onInstall(InstallContext context) Parameters context Type: InstallContext Is this a new install, an upgrade, or a push(from the developer)? Author David Schach"
    },
    {
        "title": "ActionPlansRedirect",
        "fileName": "ActionPlansRedirect.html",
        "text": "ActionPlansRedirect Visualforce controller for a redirect page to allow override of object actions Signature public with sharing class ActionPlansRedirect 2011 ActionPlansRedirect Properties Name Signature Description actionPlan private ActionPlan__c actionPlan actionPlanTask private APTask__c actionPlanTask actionPlanTemplate private ActionPlanTemplate__c actionPlanTemplate actionPlanTemplateTask private APTemplateTask__c actionPlanTemplateTask objName public String objName Related object name so this page can work for multiple SObject Types parentId private Id parentId recordId private Id recordId ActionPlansRedirect Constructors ActionPlansRedirect(controller) Gets the SObjectType and returns the correct object to display the correct values ActionPlansRedirect(controller) Gets the SObjectType and returns the correct object to display the correct values Signature public ActionPlansRedirect(ApexPages.StandardController controller) Parameters controller Type: ApexPages.StandardController Standard Controller. Accepts any SObject Author David Schach ActionPlansRedirect Methods cancel() Go back to view the relevant record redirect() Show the view page for either the Action Plan or the Action Plan Template save() Change the relevant record owner, and then call cancel so we go back to the record page cancel() Go back to view the relevant record Signature public PageReference cancel() Returns Basic pageReference for the parent record Author David Schach redirect() Show the view page for either the Action Plan or the Action Plan Template Signature public Pagereference redirect() Returns PageReference by recordId('/' + parentId) Author David Schach save() Change the relevant record owner, and then call cancel so we go back to the record page Signature public PageReference save() See ActionPlansRedirect.cancel} Author David Schach"
    },
    {
        "title": "ActionPlansSectionHeaderController",
        "fileName": "ActionPlansSectionHeaderController.html",
        "text": "ActionPlansSectionHeaderController Controller for the Section Header at the top of every VF page. Determines the icon for the page object Signature public inherited sharing class ActionPlansSectionHeaderController David Schach2022 ActionPlansSectionHeaderController Properties Name Signature Description objectName public String objectName The object for the Section Header ActionPlansSectionHeaderController Methods getIsCustom() Is this a custom object? getObjectIconInfo() Map of Icon attribute and value isCustom(sObjectName) Given an object name, return if it is a custom object retrieveIconForObject(sObjectName) Explores the schema of the soject passed in and finds lightning icon style and image url for sObject If nothing is found, defaults to the custom icon Code adapted from https://salesforce.stackexchange.com/questions/116688/lightning-get-sobject-tab-icon Thanks to https://salesforce.stackexchange.com/users/12582/cricketlang getIsCustom() Is this a custom object? Signature public Boolean getIsCustom() Returns true if custom object getObjectIconInfo() Map of Icon attribute and value Signature public Map<String, String> getObjectIconInfo() Returns Key-value pairs isCustom(sObjectName) Given an object name, return if it is a custom object Signature private Boolean isCustom(String sObjectName) Parameters sObjectName Type: String The name of the SObject Returns Is this object a custom object? retrieveIconForObject(sObjectName) Explores the schema of the soject passed in and finds lightning icon style and image url for sObject If nothing is found, defaults to the custom icon Code adapted from https://salesforce.stackexchange.com/questions/116688/lightning-get-sobject-tab-icon Thanks to https://salesforce.stackexchange.com/users/12582/cricketlang Signature private Map<String, String> retrieveIconForObject(String sObjectName) Parameters sObjectName Type: String The sObject to find the icon for Returns Map of properties about the icon to be consumed by the front end. Returns values for keys: iconStyle,iconURL"
    },
    {
        "title": "ActionPlansTaskTriggerUtilities",
        "fileName": "ActionPlansTaskTriggerUtilities.html",
        "text": "ActionPlansTaskTriggerUtilities Set to WITHOUT sharing because this is only called from a trigger handler Signature public without sharing class ActionPlansTaskTriggerUtilities David Schach2011 ActionPlansTaskTriggerUtilities Properties Name Signature dependentAptts private static List<APTask__c> dependentAptts tasksSendEmail private static List<Task> tasksSendEmail tasksSendNoEmail private static List<Task> tasksSendNoEmail ActionPlansTaskTriggerUtilities Methods actionsOnTaskBeforeDelete(cTasks) Before deleting an APTemplate task, initialize the functionalities to create all dependent Tasks and reset index deleteAPTasks(aPTasks) Delete Action Plan Tasks deleteTasks(apttIds) Delete Action Plan Tasks related Tasks generateDependentTasksAndReset(apTasks, taskIndexToDelete) This method reviews the task list FOR A SINGLE ACTION PLAN and removes the one with TaskIndex__c  field matching taskIndexToDelete. Rearranges the dependencies between tasks. initDependentTaskWork(cTasks) Initialize the functionalities to create all dependent Tasks populateNewTaskMap(dependentApttList) Cycle through list of dependent Action Plans Template Task and create Task  records populateUpdateApttsList(dependentApttList) Cycle through list of dependent Action Plans Template Task and create tasks queryDependentAPTaskTemplates(closedTasks) Get list of dependent Action Plan Template Tasks updateActionPlansTemplateTaskStatus(cTasks) Update associated aptt of task to match status updateAPTasksStatus(cTasks) Update APTasks status as passed into method actionsOnTaskBeforeDelete(cTasks) Before deleting an APTemplate task, initialize the functionalities to create all dependent Tasks and reset index Signature public static void actionsOnTaskBeforeDelete(Set<Id> cTasks) Parameters cTasks Type: Set<Id> Set of Task template IDs to be deleted deleteAPTasks(aPTasks) Delete Action Plan Tasks Signature public static void deleteAPTasks(Set<Id> aPTasks) Parameters aPTasks Type: Set<Id> Ids of APTasks to delete deleteTasks(apttIds) Delete Action Plan Tasks related Tasks Signature @future public static void deleteTasks(Set<Id> apttIds) Parameters apttIds Type: Set<Id> generateDependentTasksAndReset(apTasks, taskIndexToDelete) This method reviews the task list FOR A SINGLE ACTION PLAN and removes the one with TaskIndex__c  field matching taskIndexToDelete. Rearranges the dependencies between tasks. Signature private static void generateDependentTasksAndReset(List<APTask__c> apTasks, Decimal taskIndexToDelete) Parameters apTasks Type: List<APTask__c> All the Action Plan Tasks for the Action Plan taskIndexToDelete Type: Decimal The index of the task we are trying to delete initDependentTaskWork(cTasks) Initialize the functionalities to create all dependent Tasks Signature @future public static void initDependentTaskWork(Map<Id, String> cTasks) Parameters cTasks Type: Map<Id, String> Map of Tasks by Id populateNewTaskMap(dependentApttList) Cycle through list of dependent Action Plans Template Task and create Task  records Signature private static List<APTask__c> populateNewTaskMap(List<APTask__c> dependentApttList) Parameters dependentApttList Type: List<APTask__c> The APTasks we check for dependencies before making Task  records Returns List of AP Tasks to update populateUpdateApttsList(dependentApttList) Cycle through list of dependent Action Plans Template Task and create tasks Signature private static List<APTask__c> populateUpdateApttsList(List<APTask__c> dependentApttList) Parameters dependentApttList Type: List<APTask__c> Returns the list of dependent Action Plan Tasks we just updated queryDependentAPTaskTemplates(closedTasks) Get list of dependent Action Plan Template Tasks Signature private static List<APTask__c> queryDependentAPTaskTemplates(Set<Id> closedTasks) updateActionPlansTemplateTaskStatus(cTasks) Update associated aptt of task to match status Signature private static void updateActionPlansTemplateTaskStatus(Map<Id, String> cTasks) Parameters cTasks Type: Map<Id, String> map of ActionPlan Tasks by Id updateAPTasksStatus(cTasks) Update APTasks status as passed into method Signature public static void updateAPTasksStatus(Map<Id, String> cTasks) Parameters cTasks Type: Map<Id, String> Map of ActionPlan Tasks by Id"
    },
    {
        "title": "ActionPlansTestUtilities",
        "fileName": "ActionPlansTestUtilities.html",
        "text": "ActionPlansTestUtilities Utilities for Tests Signature public inherited sharing class ActionPlansTestUtilities 2011 ActionPlansTestUtilities Properties Name Signature Description forceError public static Boolean forceError Used in testing - we force an Error during tests forceHasRecordType public static Boolean forceHasRecordType Used during testing to \"fool\" the org into thinking that it has Task record types showDebugParameters public static Boolean showDebugParameters Should we show debug statements for Visualforce parameters when testing? standardObjects public static Set<String> standardObjects Standard objects included in this package ActionPlansTestUtilities Methods assignAPPermissionSets(testUserId, allOrNone) Assign a permissionSet to a user(via UserId) batchIds(relatedObject) Create Environment for Batch Process createNewAccount(insertRecord) Creates a new Account SObject With option to insert or just return the record createNewAccount() Creates a new Account SObject Inserts before returning createNewActionPlan(relatedObject, numTasks) Create Action Plan and APTaskss createNewActionPlanTask(actionPlan, days, user, category, priority) Create Action Plan Task template createNewActionPlanTemplate(numTasks) Create Action Plan Template and Action Plan Template Tasks createNewActionPlanTemplateTask(apTemplate, days, user, category, priority) Create Action Plan Template Task Template createNewCampaign(insertRecord) Creates a new Campaign SObject createNewCampaign() Creates a new Campaign SObject Inserts before returning createNewCase(insertRecord) Creates a new Case SObject createNewCase() Creates a new Case Object Inserts before returning createNewContact(insertRecord) Creates a new Contact Object createNewContact() Creates a new Contact Object Inserts before returning createNewContract(insertRecord) Creates a new Contract Object createNewContract() Creates a new Contract Object Inserts before returning createNewLead(insertRecord) Creates a new Lead Object createNewLead() Creates a new Lead Object Inserts before returning createNewOpportunity(insertRecord) Creates a new Opportunity Object createNewOpportunity() Creates a new Opportunity Object Inserts before returning createRandomWord() Random words are required for testing, as you will likely run into any word I can insert during a test class and produce false test results. createRandomWord(prefix) Make a random String  with a specific prefix and a random Integer createTestUser() A random user is useful for testing in order to be sure that you are able to see data across posts regardless of follow status.  A Permission Set would still be required createTestUser(p) Creates a new User debugParameters(prefix) Utility method for debugging Visualforce page parameters getNonDefaultAvailableTaskRecordType() Find a non-default Task Record Type assignAPPermissionSets(testUserId, allOrNone) Assign a permissionSet to a user(via UserId) Signature public List<PermissionSetAssignment> assignAPPermissionSets(Id testUserId, Boolean allOrNone) Parameters testUserId Type: Id The User ID allOrNone Type: Boolean Insert allOrNone, or allow an insert of only successful assingments, failing silently Returns List<PermissionSetAssignment>  The list of PermissionSetAssignment  records Author David Schach batchIds(relatedObject) Create Environment for Batch Process Signature public List<Id> batchIds(String relatedObject) Parameters relatedObject Type: String The parent Object for the created Action Plans Returns List<Id>  The list of created Action Plan Task IDs Author David Schach createNewAccount(insertRecord) Creates a new Account SObject With option to insert or just return the record Signature public Account createNewAccount(Boolean insertRecord) Parameters insertRecord Type: Boolean Insert the record before returning it? Returns new Account createNewAccount() Creates a new Account SObject Inserts before returning Signature public Account createNewAccount() Returns inserted Account createNewActionPlan(relatedObject, numTasks) Create Action Plan and APTaskss Signature public ActionPlan__c createNewActionPlan(String relatedObject, Integer numTasks) Parameters relatedObject Type: String The Related Object(included field) for the Action Plan numTasks Type: Integer How many tasks to create for the ActionPlan Returns new ActionPlan__c createNewActionPlanTask(actionPlan, days, user, category, priority) Create Action Plan Task template Signature public APTask__c createNewActionPlanTask(ActionPlan__c actionPlan, Integer days, User user, String category, String priority) Parameters actionPlan Type: ActionPlan__c The ActionPlan__c  object days Type: Integer Days from now to start the plan user Type: User The assigned owner category Type: String Task Category priority Type: String Task Priority Returns APTask__c  The created APTask__c  record Author David Schach createNewActionPlanTemplate(numTasks) Create Action Plan Template and Action Plan Template Tasks Signature public ActionPlanTemplate__c createNewActionPlanTemplate(Integer numTasks) Parameters numTasks Type: Integer Number of tasks to create Returns ActionPlanTemplate__c  Action Plan Template Author David Schach createNewActionPlanTemplateTask(apTemplate, days, user, category, priority) Create Action Plan Template Task Template Signature public APTemplateTask__c createNewActionPlanTemplateTask(ActionPlanTemplate__c apTemplate, Integer days, User user, String category, String priority) Parameters apTemplate Type: ActionPlanTemplate__c The parent ActionPlanTemplate__c object days Type: Integer Days from now to start Action Plan user Type: User The assigned user for each created task category Type: String Task Category priority Type: String Task Priority Returns APTemplateTask__c  The new Action Plan Template Task Template Author David Schach createNewCampaign(insertRecord) Creates a new Campaign SObject Signature public Campaign createNewCampaign(Boolean insertRecord) Parameters insertRecord Type: Boolean Insert the record before returning it? Returns new Campaign createNewCampaign() Creates a new Campaign SObject Inserts before returning Signature public Campaign createNewCampaign() Returns inserted Campaign createNewCase(insertRecord) Creates a new Case SObject Signature public Case createNewCase(Boolean insertRecord) Parameters insertRecord Type: Boolean Insert the record before returning it? Returns new Case createNewCase() Creates a new Case Object Inserts before returning Signature public Case createNewCase() Returns inserted Case createNewContact(insertRecord) Creates a new Contact Object Signature public Contact createNewContact(Boolean insertRecord) Parameters insertRecord Type: Boolean Insert the record before returning it? Returns new Contact createNewContact() Creates a new Contact Object Inserts before returning Signature public Contact createNewContact() Returns inserted Contact createNewContract(insertRecord) Creates a new Contract Object Signature public Contract createNewContract(Boolean insertRecord) Parameters insertRecord Type: Boolean Insert the record before returning it? Returns inserted Contract createNewContract() Creates a new Contract Object Inserts before returning Signature public Contract createNewContract() Returns inserted Contract createNewLead(insertRecord) Creates a new Lead Object Signature public Lead createNewLead(Boolean insertRecord) Parameters insertRecord Type: Boolean Insert the record before returning it? Returns new Lead createNewLead() Creates a new Lead Object Inserts before returning Signature public Lead createNewLead() Returns inserted Lead createNewOpportunity(insertRecord) Creates a new Opportunity Object Signature public Opportunity createNewOpportunity(Boolean insertRecord) Parameters insertRecord Type: Boolean Insert the record before returning it? Returns new Opportunity createNewOpportunity() Creates a new Opportunity Object Inserts before returning Signature public Opportunity createNewOpportunity() Returns inserted Opportunity createRandomWord() Random words are required for testing, as you will likely run into any word I can insert during a test class and produce false test results. Signature public String createRandomWord() Returns A random word createRandomWord(prefix) Make a random String  with a specific prefix and a random Integer Signature public String createRandomWord(String prefix) Parameters prefix Type: String The prefix Returns the random word Example createRandomWord('test'); test123456 createTestUser() A random user is useful for testing in order to be sure that you are able to see data across posts regardless of follow status.  A Permission Set would still be required Signature public User createTestUser() Returns User  A newly-created User with Modify All Data createTestUser(p) Creates a new User Signature public User createTestUser(Profile p) Parameters p Type: Profile Profile(not the Id) Returns User  Testuser debugParameters(prefix) Utility method for debugging Visualforce page parameters Signature public static void debugParameters(String prefix) Parameters prefix Type: String The line prefix for the debug statement Author David Schach getNonDefaultAvailableTaskRecordType() Find a non-default Task Record Type Signature public static Id getNonDefaultAvailableTaskRecordType() Returns The Id  of a non-default Task  Record Type for the running user Author David Schach"
    },
    {
        "title": "ActionPlansTriggerHandlers",
        "fileName": "ActionPlansTriggerHandlers.html",
        "text": "ActionPlansTriggerHandlers Trigger Handler class to manage all triggers. Methods for managed objects are here, as well as a method that any other object can use to enable it to be linked to Action Plans. Signature global without sharing class ActionPlansTriggerHandlers David Schach2022 ActionPlansTriggerHandlers Methods actionPlansSObjectTriggerHandler(sObjectName) Global so that if in managed package, this method is the only one available actionPlansSObjectTriggerHandler(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent, sObjectName) Handle SObjects with related Action Plans when those sObject records are deleted and undeleted allowChangeParentStatus(apTaskTemplateIds) Validates if the given tasks can change status to in progress or completed. If the task depends on another that is open, returns false This bulkified method avoids SOQL queries in a loop fillRelatedRecordFields(newRecords) When inserting or updating Action Plan records, fill the text parent object Related_Object__c  and parent record  Related_Record__c  fields getRelationshipName(recordId) Though the object name should match the field name, we get the name of the related object triggerhandlerActionPlan(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent) Actions to take on ActionPlan DML triggerhandlerActionPlanAccount(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent) Handle Account-related Action Plans on delete and undelete(of the Account) triggerhandlerActionPlanLead(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent) Handle ActionPlans related to Leads after conversion triggerhandlerActionPlanTask(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent) Handle ActionPlan Tasks triggerhandlerActionPlanTemplate(newRecords, oldRecords, oldRecordsMap, triggerEvent) Handle ActionPlan Templates triggerhandlerActionPlanTemplateTask(newRecords, oldRecords, oldRecordsMap, triggerEvent) Handle Action Plan Template Tasks triggerhandlerTask(newRecords, oldRecords, triggerEvent) Trigger handler for Task records when they are inserted, updated, or deleted validateActionPlans(actionPlans) Validate that 1 and only 1 custom reference field is filled actionPlansSObjectTriggerHandler(sObjectName) Global so that if in managed package, this method is the only one available Signature global static void actionPlansSObjectTriggerHandler(String sObjectName) Parameters sObjectName Type: String the name of the sObject Author David Schach actionPlansSObjectTriggerHandler(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent, sObjectName) Handle SObjects with related Action Plans when those sObject records are deleted and undeleted Signature public static void actionPlansSObjectTriggerHandler(List<SObject> newRecords, List<SObject> oldRecords, Map<Id, SObject> newRecordsMap, Map<Id, SObject> oldRecordsMap, System.TriggerOperation triggerEvent, String sObjectName) Parameters newRecords Type: List<SObject> Trigger.new oldRecords Type: List<SObject> Trigger.old newRecordsMap Type: Map<Id, SObject> Trigger.newMap oldRecordsMap Type: Map<Id, SObject> Trigger.oldMap triggerEvent Type: System.TriggerOperation Trigger context sObjectName Type: String the name of the SObject Author David Schach allowChangeParentStatus(apTaskTemplateIds) Validates if the given tasks can change status to in progress or completed. If the task depends on another that is open, returns false This bulkified method avoids SOQL queries in a loop Signature private static Map<Id, Boolean> allowChangeParentStatus(Set<Id> apTaskTemplateIds) Parameters apTaskTemplateIds Type: Set<Id> bulkified set of task IDs to consider Returns dependsOnInProgressTask fillRelatedRecordFields(newRecords) When inserting or updating Action Plan records, fill the text parent object Related_Object__c  and parent record  Related_Record__c  fields Signature private static void fillRelatedRecordFields(List<ActionPlan__c> newRecords) Parameters newRecords Type: List<ActionPlan__c> Trigger.new Author David Schach getRelationshipName(recordId) Though the object name should match the field name, we get the name of the related object Signature private static String getRelationshipName(Id recordId) Parameters recordId Type: Id The related record Id Returns The name of the filled Relationship field object name triggerhandlerActionPlan(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent) Actions to take on ActionPlan DML Signature public static void triggerhandlerActionPlan(List<ActionPlan__c> newRecords, List<ActionPlan__c> oldRecords, Map<Id, ActionPlan__c> newRecordsMap, Map<Id, ActionPlan__c> oldRecordsMap, System.TriggerOperation triggerEvent) Parameters newRecords Type: List<ActionPlan__c> Trigger.new oldRecords Type: List<ActionPlan__c> Trigger.old newRecordsMap Type: Map<Id, ActionPlan__c> Trigger.newMap oldRecordsMap Type: Map<Id, ActionPlan__c> Trigger.oldMap triggerEvent Type: System.TriggerOperation Trigger context Author David Schach triggerhandlerActionPlanAccount(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent) Handle Account-related Action Plans on delete and undelete(of the Account) Signature public static void triggerhandlerActionPlanAccount(List<Account> newRecords, List<Account> oldRecords, Map<Id, Account> newRecordsMap, Map<Id, Account> oldRecordsMap, System.TriggerOperation triggerEvent) Parameters newRecords Type: List<Account> Trigger.new oldRecords Type: List<Account> Trigger.old newRecordsMap Type: Map<Id, Account> Trigger.newMap oldRecordsMap Type: Map<Id, Account> Trigger.oldMap triggerEvent Type: System.TriggerOperation Trigger context Author David Schach triggerhandlerActionPlanLead(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent) Handle ActionPlans related to Leads after conversion Signature public static void triggerhandlerActionPlanLead(List<Lead> newRecords, List<Lead> oldRecords, Map<Id, Lead> newRecordsMap, Map<Id, Lead> oldRecordsMap, System.TriggerOperation triggerEvent) Parameters newRecords Type: List<Lead> Trigger.new oldRecords Type: List<Lead> Trigger.old newRecordsMap Type: Map<Id, Lead> Trigger.newMap oldRecordsMap Type: Map<Id, Lead> Trigger.oldMap triggerEvent Type: System.TriggerOperation Trigger context Author David Schach triggerhandlerActionPlanTask(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent) Handle ActionPlan Tasks Signature public static void triggerhandlerActionPlanTask(List<APTask__c> newRecords, List<APTask__c> oldRecords,\tMap<Id, APTask__c> newRecordsMap,Map<Id, APTask__c> oldRecordsMap, System.TriggerOperation triggerEvent) Parameters newRecords Type: List<APTask__c> Trigger.new oldRecords Type: List<APTask__c> Trigger.old newRecordsMap Type: APTask__c> Trigger.newMap oldRecordsMap Type: APTask__c> Trigger.oldMap triggerEvent Type: System.TriggerOperation Trigger context Author David Schach triggerhandlerActionPlanTemplate(newRecords, oldRecords, oldRecordsMap, triggerEvent) Handle ActionPlan Templates Signature public static void triggerhandlerActionPlanTemplate(List<ActionPlanTemplate__c> newRecords, List<ActionPlanTemplate__c> oldRecords, Map<Id, ActionPlanTemplate__c> oldRecordsMap, System.TriggerOperation triggerEvent) Parameters newRecords Type: List<ActionPlanTemplate__c> Trigger.new oldRecords Type: List<ActionPlanTemplate__c> Trigger.old oldRecordsMap Type: Map<Id, ActionPlanTemplate__c> Trigger.oldMap triggerEvent Type: System.TriggerOperation Trigger context Author David Schach triggerhandlerActionPlanTemplateTask(newRecords, oldRecords, oldRecordsMap, triggerEvent) Handle Action Plan Template Tasks Signature public static void triggerhandlerActionPlanTemplateTask(List<APTemplateTask__c> newRecords, List<APTemplateTask__c> oldRecords, Map<Id, APTemplateTask__c> oldRecordsMap, System.TriggerOperation triggerEvent) Parameters newRecords Type: List<APTemplateTask__c> Trigger.new oldRecords Type: List<APTemplateTask__c> Trigger.old oldRecordsMap Type: Map<Id, APTemplateTask__c> Trigger.oldMap triggerEvent Type: System.TriggerOperation Trigger context Author David Schach triggerhandlerTask(newRecords, oldRecords, triggerEvent) Trigger handler for Task records when they are inserted, updated, or deleted Signature public static void triggerhandlerTask(List<Task> newRecords, List<Task> oldRecords, System.TriggerOperation triggerEvent) Parameters newRecords Type: List<Task> Trigger.new oldRecords Type: List<Task> Trigger.old triggerEvent Type: System.TriggerOperation Trigger context Author David Schach validateActionPlans(actionPlans) Validate that 1 and only 1 custom reference field is filled Signature private static void validateActionPlans(List<ActionPlan__c> actionPlans) Parameters actionPlans Type: List<ActionPlan__c> Trigger records to validate Author David Schach"
    },
    {
        "title": "ActionPlansUtilities",
        "fileName": "ActionPlansUtilities.html",
        "text": "ActionPlansUtilities Utilities class - mostly describe methods and constants Signature public without sharing class ActionPlansUtilities See ActionPlansUtilitiesTest 2011 ActionPlansUtilities Properties Name Signature Description apCustomRelationshipFields private static List<String> apCustomRelationshipFields apSettings private static Action_Plans_Settings__c apSettings canDisplayReminder private static Boolean canDisplayReminder checkReminderByDefault private static Boolean checkReminderByDefault closedTaskStatuses private static Set<String> closedTaskStatuses Find all closed Task statuses dayOfWeekEnglish private static Map<Integer, String> dayOfWeekEnglish Map of day of week(as number) to English day defaultMinutesForReminderTime private static String defaultMinutesForReminderTime MASTER_RECORD_TYPE_ID public static final Id MASTER_RECORD_TYPE_ID The standard Master RecordType  Id MAX_APTASKS public static final Integer MAX_APTASKS Max number of APTasks per Action Plan MAX_APTODELETE public static final Integer MAX_APTODELETE Max number of Action Plans that can be deleted from list namespacePrefix public static String namespacePrefix Check if we are in a managed package - if so, return the namespace prefix openTaskStatuses private static Set<String> openTaskStatuses prefixToDescribe private static Map<String, Schema.DescribeSObjectResult> prefixToDescribe Memoize objects as we describe them, to save on calls recordIdToRecordName private static Map<Id, String> recordIdToRecordName Memoize record IDs so we don't have to keep iterating over them if we already have them set private set taskRecordTypePriorityDefaultValues private static Map<Id, String> taskRecordTypePriorityDefaultValues taskRecordTypes private static List<SObject> taskRecordTypes taskRecordTypeStatusDefaultValues private static Map<Id, String> taskRecordTypeStatusDefaultValues taskRecordTypeTypeDefaultValues private static Map<Id, String> taskRecordTypeTypeDefaultValues taskRTs private static List<SelectOption> taskRTs Memoized picklist of Task  Record Types taskUsesRecordTypes public static final Boolean taskUsesRecordTypes Allows us to force the environment variable checking if Task has a Record Type for testing(forcing NO record type,). Increases code coverage. ActionPlansUtilities Methods actionPlanSubjectToName(subject) Single method to shorten long strings to the hard-coded 80 character length of record name field actionPlanSubjectToName(subject, maxChars) Single method to shorten long strings to the dynamically described character length of record name field adjustTaskDueDate(actionPlanStartDate, taskDaysFromStart, apSkipDay) Given a task due date, we adjust it here for weekends canSendEmails() Is the org allowed to send emails? This could be because deliverability is off, or because we have hit the org limits for emails canShareRecord(shareObjectName, recordId, recordOwnerId) We can get all the permissions and info required to see if the user can share the record RecordOwner, has Full Access, has ModifyAllData checkOrgDefaultCustomSetting(insertIfNull) Get the Default Custom Setting(Organization level) and insert if specified We cannot insert in a Visualforce constructor, but we can in a page OnLoad action getCanDisplayReminder() Verifies that the user is able to add reminders. Checks the existence of a reminder setting field of the user object. Mathod can be improved by asking for Reminder Options at Activity settings. Does not query if the user wants reminders by default. getCanTransfer(recordId) Does the user have permission to transfer? We query UserRecordAccess . getCheckReminderByDefault() Check user preferences for whether to show task reminders by default getClosedTaskStatuses() Set of all Task  Status values that are Closed getCustomRelationshipFields() Check the fieldSet for all active Action Plan relationaship fields(available parent objects) getCustomSetting() Get the \"Default\" Custom Setting and return it. getDayOfWeek(d) Given a date, give the English day of the week getDefaultReminderMinutes() Gets task reminder default time for current user getDefaultTaskRecordTypeId() Find user default recordtype getEscapedPageParameter(paramKey) Utility method to check if the page parameters contain a key, and then return the escaped value. Used because PMD wants it, and because XSS is a serious problem getFieldOptions(objectname, fieldname, requireValue) For a given object/field, generate a Visualforce Picklist getHoursOption() Set the Hours for select box of Reminder Time getIsLex() Detect user theme getObjectKeyPrefix(objName) Get prefix of sObject getOpenTaskStatuses() Lazy load open task statuses getRelatedRecordInfo(recordId) Store a map of object prefixes to describe info so we can fill the ActionPlan__c  related record fields getTaskRecordTypePriorityDefaultValues() Generate default Task Priority picklist getTaskRecordTypes() Lazy load task record types to reduce queries getTaskRecordTypeStatusDefaultValues() Generate Map of Record Type Id to default Task Status getTaskRecordTypeTypeDefaultValues() Generate Map of Record Type Id to default Task Type getTaskRTPicklistValues() Generate picklist of Task.RecordType getWeekendDay(developerName) Get the Custom Metadata record for the weekend day onPageLoad() Actions to perform whenever loading a Visualforce page Ensures that Custom Setting is created for the org Left as this method in case we want to add certain actions to both Creation Visualforce pages in the future queryRecordIDToRecordName(recordIDs) Give a set of recordIDs and retrrieve the related record names actionPlanSubjectToName(subject) Single method to shorten long strings to the hard-coded 80 character length of record name field Signature public static String actionPlanSubjectToName(String subject) Parameters subject Type: String the long string Returns the full string or shortened if longer than 80 characters actionPlanSubjectToName(subject, maxChars) Single method to shorten long strings to the dynamically described character length of record name field Signature public static String actionPlanSubjectToName(String subject, Integer maxChars) Parameters subject Type: String the long string maxChars Type: Integer the maximum length allowed for Action Plan Subject Returns the full string(or shortened if longer than max characters) adjustTaskDueDate(actionPlanStartDate, taskDaysFromStart, apSkipDay) Given a task due date, we adjust it here for weekends Signature public static Date adjustTaskDueDate(Date actionPlanStartDate, Integer taskDaysFromStart, String apSkipDay) Parameters actionPlanStartDate Type: Date the start date of the action plan taskDaysFromStart Type: Integer the days after the initial date that the task will be due apSkipDay Type: String Start or End(determines how to handle weekend day) Returns the new task due date canSendEmails() Is the org allowed to send emails? This could be because deliverability is off, or because we have hit the org limits for emails Signature public static Boolean canSendEmails() Returns Can the org send an email? canShareRecord(shareObjectName, recordId, recordOwnerId) We can get all the permissions and info required to see if the user can share the record RecordOwner, has Full Access, has ModifyAllData Signature public static Boolean canShareRecord(String shareObjectName, Id recordId, Id recordOwnerId) Parameters shareObjectName Type: String The Share object name, such as ActionPlan__Share  recordId Type: Id The recordId of the record in question recordOwnerId Type: Id The owner Id because an owner can share even without \"Modify all Data\" Returns Can the user share the record? Author David Schach checkOrgDefaultCustomSetting(insertIfNull) Get the Default Custom Setting(Organization level) and insert if specified We cannot insert in a Visualforce constructor, but we can in a page OnLoad action Signature public static Action_Plans_Settings__c checkOrgDefaultCustomSetting(Boolean insertIfNull) Parameters insertIfNull Type: Boolean Boolean  Should we insert the Organization Custom Setting if there isn't one? Returns Action_Plans_Settings__c  The Settings object Author David Schach getCanDisplayReminder() Verifies that the user is able to add reminders. Checks the existence of a reminder setting field of the user object. Mathod can be improved by asking for Reminder Options at Activity settings. Does not query if the user wants reminders by default. Signature public static Boolean getCanDisplayReminder() Returns if the user has access to reminders getCanTransfer(recordId) Does the user have permission to transfer? We query UserRecordAccess . Signature public static Boolean getCanTransfer(Id recordId) Parameters recordId Type: Id sample record Id that can be used to find user permission Returns Boolean  yes/no Author David Schach getCheckReminderByDefault() Check user preferences for whether to show task reminders by default Signature public static Boolean getCheckReminderByDefault() Returns Boolean if Task reminder checkbox should be checked by default(this will override default value) getClosedTaskStatuses() Set of all Task  Status values that are Closed Signature public static Set<String> getClosedTaskStatuses() Returns Set of closed Task  Statuses Author David Schach getCustomRelationshipFields() Check the fieldSet for all active Action Plan relationaship fields(available parent objects) Signature public static List<String> getCustomRelationshipFields() Returns List<String>  List of field names Author David Schach getCustomSetting() Get the \"Default\" Custom Setting and return it. Signature public static Action_Plans_Settings__c getCustomSetting() Returns cSetting getDayOfWeek(d) Given a date, give the English day of the week Signature public static String getDayOfWeek(Date d) Parameters d Type: Date The given date Returns String  The day of hte week in English Author David Schach getDefaultReminderMinutes() Gets task reminder default time for current user Signature public static String getDefaultReminderMinutes() Returns String  picklist value for default minutes after midnight for reminder getDefaultTaskRecordTypeId() Find user default recordtype Signature public static String getDefaultTaskRecordTypeId() Returns Default RecordType  Id getEscapedPageParameter(paramKey) Utility method to check if the page parameters contain a key, and then return the escaped value. Used because PMD wants it, and because XSS is a serious problem Signature public static String getEscapedPageParameter(String paramKey) Parameters paramKey Type: String The page parameter key Returns String  Escaped(single quotes escaped) value for that key, if present. Otherwise, null; Author David Schach getFieldOptions(objectname, fieldname, requireValue) For a given object/field, generate a Visualforce Picklist Signature public static List<SelectOption> getFieldOptions(String objectname, String fieldname, Boolean requireValue) Parameters objectname Type: String Object Nams fieldname Type: String Field Name requireValue Type: Boolean We can provide the option of not selecting the value by default Returns Picklist Author David Schach getHoursOption() Set the Hours for select box of Reminder Time Signature public static List<SelectOption> getHoursOption() Returns options getIsLex() Detect user theme Signature public static Boolean getIsLex() Returns Are we in Lightning Experience? getObjectKeyPrefix(objName) Get prefix of sObject Signature public static String getObjectKeyPrefix(String objName) Parameters objName Type: String Returns obj.getKeyPrefix() Example ActionPlansUtilities.getObjetKeyPrefix('Account'); (returns '001') getOpenTaskStatuses() Lazy load open task statuses Signature public static Set<String> getOpenTaskStatuses() Returns All Open Task  Status values getRelatedRecordInfo(recordId) Store a map of object prefixes to describe info so we can fill the ActionPlan__c  related record fields Signature public static Schema.DescribeSObjectResult getRelatedRecordInfo(Id recordId) Parameters recordId Type: Id recordId description Returns return description Author David Schach getTaskRecordTypePriorityDefaultValues() Generate default Task Priority picklist Signature public static Map<Id, String> getTaskRecordTypePriorityDefaultValues() Returns Map of RecordTypeId  to default Task Priority getTaskRecordTypes() Lazy load task record types to reduce queries Signature private static List<SObject> getTaskRecordTypes() Returns A list of all Task RecordType  records getTaskRecordTypeStatusDefaultValues() Generate Map of Record Type Id to default Task Status Signature public static Map<Id, String> getTaskRecordTypeStatusDefaultValues() Returns Default Status for each Task RecordType  Id getTaskRecordTypeTypeDefaultValues() Generate Map of Record Type Id to default Task Type Signature public static Map<Id, String> getTaskRecordTypeTypeDefaultValues() Returns Map of RecordTypeId  to default Task Type getTaskRTPicklistValues() Generate picklist of Task.RecordType Signature public static List<SelectOption> getTaskRTPicklistValues() Returns Visualforce Picklist getWeekendDay(developerName) Get the Custom Metadata record for the weekend day Signature public static Weekend_Day__mdt getWeekendDay(String developerName) Parameters developerName Type: String Of day(Saturday, Sunday, etc) Returns Custom Metadata Author David Schach onPageLoad() Actions to perform whenever loading a Visualforce page Ensures that Custom Setting is created for the org Left as this method in case we want to add certain actions to both Creation Visualforce pages in the future Signature public static PageReference onPageLoad() Returns PageReference(null) queryRecordIDToRecordName(recordIDs) Give a set of recordIDs and retrrieve the related record names Signature public static Map<Id, String> queryRecordIDToRecordName(Set<Id> recordIDs) Parameters recordIDs Type: Set<Id> Set<Id> of parent records to Action Plans Returns Map of RecordID to Record Name(special for Case & Contract) Author David Schach"
    },
    {
        "title": "CanTheUser",
        "fileName": "CanTheUser.html",
        "text": "CanTheUser A reusable, intuitive library for determining wether or not the current use can create, read, edit, or delete objects as well as determining if the user has access or update permissions on specific fields. This class name was chosen to facilitate easy-to-understand and read code. Whenever you need to check FLS or CRUD access your code reads like this if(CanTheUser.read(new account())){}  making the calling and use of this code easy and intuitive. Taken from Codefriar code. Signature public inherited sharing class CanTheUser See https://github.com/codefriar/CanTheUser , https://github.com/trailheadapps/apex-recipes , CanTheUserTest Codefriar 2021 CanTheUser Properties Name Signature Annotations Description accessibleFieldsByObject private static Map<String, Set<String>> accessibleFieldsByObject @testVisible memoizedFLSResults private static Map<String, Map<FLSType, Boolean>> memoizedFLSResults This variable stores, within the same transaction, all previously calculated FLS results for an object. This prevents multiple calls to this library within the same transaction from executing more than a single describe call. updatableFieldsByObject private static Map<String, Set<String>> updatableFieldsByObject @testVisible Enums Name Signature Values CrudType public enum CrudType CREATEABLE, READABLE, EDITABLE, DELETABLE, UPSERTABLE FLSType public enum FLSType ACCESSIBLE, UPDATABLE CanTheUser Methods bulkFLSAccessible(obj, fields) bulk form of flsAccessible bulkFLSUpdatable(obj, fields) bulk form of flsUpdatable call calculateFLS(objType) Calculates the FLS for a given object type create(obj) convenience api for determining if the running user can create the specified object create(objs) convenience api for determining if the running user can create the specified object create(objName) convenience api for determining if the running user can create the specified object crud(obj, permission) This class' name was chosen to facilitate easy-to-understand and read code. Whenever you need to check FLS or CRUD access your code reads like this if(CanTheUser.read(new account())){}  making the calling and use of this code easy and intuitive. crud(objs, permission) crud(objectName, permission) destroy(obj) convenience api for determining if the running user can delete/destroy the specified object destroy(objs) convenience api for determining if the running user can delete the specified object destroy(objName) convenience api for determining if the running user can delete the specified object edit(obj) convenience api for determining if the running user can edit / update the specified object edit(objs) convenience api for determining if the running user can edit / update the specified objects edit(objName) convenience api for determining if the running user can edit the specified object flsAccessible(obj, field) public static method to determine if a given field on a given object is Accessible(readable) flsUpdatable(obj, field) public static method to determine if a given field on a given object is Updatable. getFLSForFieldOnObject(obj, field, checkType) Abstracted method for retrieving or calculating(memoization) of the FLS for a given field on a given object. read(obj) convenience api for determining if the running user can read / access the specified object read(objs) convenience api for determining if the running user can read / access the specified objects read(objName) convenience api for determining if the running user can read the specified object ups(obj) convenience api for determining if the running user can upsert(insert and update) the specified objects ups(objs) convenience api for determining if the running user can edit / update the specified objects ups(objName) convenience api for determining if the running user can upsert the specified object bulkFLSAccessible(obj, fields) bulk form of flsAccessible Signature public static Map<String, Boolean> bulkFLSAccessible(String obj, Set<String> fields) Parameters obj Type: String Obj name on which to check fields Type: Set<String> Set of Fields to check for accessibility. Returns Map<String, Boolean> Example String[] fields = new String[]{'Name', 'ShippingStreet'}; System.debug(CanTheUser.bulkFLSAccessible('Account', fields)); bulkFLSUpdatable(obj, fields) bulk form of flsUpdatable call Signature public static Map<String, Boolean> bulkFLSUpdatable(String obj, Set<String> fields) Parameters obj Type: String Name of the object fields Type: Set<String> Set of Field names to check Returns Map<String, Boolean> (FieldName, true) Example String[] fields = new String[]{'Name', 'ShippingStreet'}; System.debug(CanTheUser.bulkFLSUpdatable('Account', fields)); calculateFLS(objType) Calculates the FLS for a given object type Signature private static Map<String, Map<FLSType, Boolean>> calculateFLS(String objType) Parameters objType Type: String String name of the object type Returns Map<String, Map<FLSType, Boolean>> create(obj) convenience api for determining if the running user can create the specified object Signature public static Boolean create(SObject obj) Parameters obj Type: SObject Object type to check create permissions on Returns Boolean Example System.debug(CanTheUser.create(new Account())); create(objs) convenience api for determining if the running user can create the specified object Signature public static Boolean create(List<SObject> objs) Parameters objs Type: List<SObject> list of objects. Only the first will be checked.(logically, a list is of uniform type and, and if the user can create one) Returns Boolean create(objName) convenience api for determining if the running user can create the specified object Signature public static Boolean create(String objName) Parameters String Object type to check create permissions on Returns Boolean Example System.debug(CanTheUser.create('Account')); crud(obj, permission) This class' name was chosen to facilitate easy-to-understand and read code. Whenever you need to check FLS or CRUD access your code reads like this if(CanTheUser.read(new account())){}  making the calling and use of this code easy and intuitive. Signature @testVisible private static Boolean crud(SObject obj, CrudType permission) crud(objs, permission) Signature @testVisible private static Boolean crud(List<SObject> objs, CrudType permission) crud(objectName, permission) Signature @testVisible private static Boolean crud(String objectName, CrudType permission) destroy(obj) convenience api for determining if the running user can delete/destroy the specified object Signature public static Boolean destroy(SObject obj) Parameters obj Type: SObject object type to check destroy permissions on Returns Boolean Example System.debug(CanTheUser.destroy(new Account())); destroy(objs) convenience api for determining if the running user can delete the specified object Signature public static Boolean destroy(List<SObject> objs) Parameters String Object type to check delete permissions on Returns Boolean destroy(objName) convenience api for determining if the running user can delete the specified object Signature public static Boolean destroy(String objName) Parameters String Object type to check create permissions on Returns Boolean Example System.debug(CanTheUser.destroy('Account')); edit(obj) convenience api for determining if the running user can edit / update the specified object Signature public static Boolean edit(SObject obj) Parameters obj Type: SObject object type to check edit permissions on Returns Boolean Example System.debug(CanTheUser.edit(new Account())); edit(objs) convenience api for determining if the running user can edit / update the specified objects Signature public static Boolean edit(List<SObject> objs) Parameters obj object type to check edit permissions on Returns Boolean edit(objName) convenience api for determining if the running user can edit the specified object Signature public static Boolean edit(String objName) Parameters String Object type to check edit permissions on Returns Boolean Example System.debug(CanTheUser.edit('Account')); flsAccessible(obj, field) public static method to determine if a given field on a given object is Accessible(readable) Signature public static Boolean flsAccessible(String obj, String field) Parameters obj Type: String the object in question, in string form field Type: String the field in question in SObjectField form Returns Boolean Example System.debug(CanTheUser.flsAccessible('Account', 'Name')); flsUpdatable(obj, field) public static method to determine if a given field on a given object is Updatable. Signature public static Boolean flsUpdatable(String obj, String field) Parameters obj Type: String the string version of an object name field Type: String the field to check Returns Boolean Example System.debug(CanTheUser.flsUpdatable('Account', 'Name')); getFLSForFieldOnObject(obj, field, checkType) Abstracted method for retrieving or calculating(memoization) of the FLS for a given field on a given object. Signature private static Boolean getFLSForFieldOnObject(String obj, String field, FLSType checkType) Parameters obj Type: String String version of object name to check field Type: String String version of the field to check checkType Type: FLSType Enum of Accessible or Updatable. Returns Boolean read(obj) convenience api for determining if the running user can read / access the specified object Signature public static Boolean read(SObject obj) Parameters obj Type: SObject object type to check read permissions on Returns Boolean Example System.debug(CanTheUser.read(new Account())); read(objs) convenience api for determining if the running user can read / access the specified objects Signature public static Boolean read(List<SObject> objs) Parameters obj object type to check read permissions on Returns Boolean Example CanTheUser.read(new List<Account>{a1, a2})); read(objName) convenience api for determining if the running user can read the specified object Signature public static Boolean read(String objName) Parameters String Object type to check read permissions on Returns Boolean Example System.debug(CanTheUser.read('Account')); ups(obj) convenience api for determining if the running user can upsert(insert and update) the specified objects Signature public static Boolean ups(SObject obj) Parameters obj Type: SObject object type to check edit permissions on Returns Boolean Example System.debug(CanTheUser.ups(new Account())); ups(objs) convenience api for determining if the running user can edit / update the specified objects Signature public static Boolean ups(List<SObject> objs) Parameters obj object type to check upsert permissions on Returns Boolean ups(objName) convenience api for determining if the running user can upsert the specified object Signature public static Boolean ups(String objName) Parameters String Object type to check upsert permissions on Returns Boolean Example System.debug(CanTheUser.ups('Account'));"
    }
];
