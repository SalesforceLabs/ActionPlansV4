export default [
    {
        "title": "Home",
        "fileName": "index.html",
        "text": "Home Action Plans Changelog Action Plans Installation and Setup Please follow installation instructions, shown on the Installation page AppExchange AppExchange Listing Post-intall extras Scratch Org Developer Edition / Sandbox Apex Code Documentation About Action Plans Action Plans helps your organization encapsulate best practices into easily sharable, reusable task templates. You can create Action Plans for the following objects: Accounts Contacts Leads Opportunities Campaigns Contracts Cases Person Accounts Custom Objects Getting Help Action Plans is unsupported. For community assistance with Action Plans, please visit Salesforce Trailblazer Community . To submit ideas or issues, please visit Action Plans on Github . Community Action Plans is open source software. We welcome your issue reports, ideas, documentation, code tweaks and all other participation. Learn more . Features: Export and share your Action Plan Templates with other orgs. Import Action Plan Templates. Supports Task reminder times. Action Plans Settings controls behavior around Chatter Notifications, actions when a Lead is converted, and default Task assignment behavior Invocable Apex allows automatic Action Plan creation from a Template in Process Builder and Flow Post Install Configuration Getting started is easy. For each object, you need to add a button to the list view, add a button to the detail page. For Accounts, follow these steps:\" Update Action Plans Custom Settings Change these setting by editing Action Plan Settings, and updating values at either the organization level, profile levels, or user levels. Navigate to Setup > Develop > Custom Settings. Click on 'Manage' next to Action Plans Settings . Click the 'New' button near 'Default Organizational Level Value'. Check the values that you want to enable. Enable Chatter Post  places a post in the related record's Chatter Feed(if Chatter is enabled for that object). If unchecked, Action Plans does not create a Feed Post. Unassigned Task Defaults to Record Owner  ensures that Action Plan Template tasks with a blank 'Assigned To' field go to the related record's owner. If unchecked, tasks with a blank 'Assigned To' field are assigned to the running user. Tasks can be assigned to specific people on Action Plan Templates, which overrides this setting. Default Object on Lead Conversion  specifies that if an Action Plan is related to a Lead, whether the Action Plan should be moved to the converted Account, Contact, or Opportunity when the Lead is converted. The default is Contact. Action Plans Business Hours ID  and Use Business Hours  are reserved for future functionality. Weekends: Custom Metadata Modify Custom Metadata Weekend Day  to indicate which days of the week are the weekend and how many days to move a task forward or backwards to move it to the end of the previous week or the start of the next week. This allows you to work with a different weekend, or to avoid assigning any task to be due on any specific day of the week.All weekdays should have 0 in both numeric fields. Update Your Page & Search Layout Configurations Create Action Plans Buttons For each object, you need to add a button to the list view, For Accounts, follow these steps: Navigate to Setup > Object Manager > Account > Search Layouts for Salesforce Classic Click on \"Edit\" from the menu near \"List View.\" Move the \"Create Account Action Plans\" button from \"Available Buttons\" to \"Selected Buttons.\" Click \"Save.\" Navigate to Setup > Object Manager > Account > Page Layouts. Note: the package includes a default \"Action Plan Layout\" for your reference. You do not need to use it. Click on \"Edit\" near one of your standard Account Page Layouts. Add \"Action Plans\" related list to the page. Edit the properties of the related list by clicking the configuration button above it. Expand \"Buttons\" section, clear the \"New\" checkbox and move \"Create Account Action Plan\" to the Selected buttons. Update the fields in the related list to meet your needs. Recommended fields include Start Date, Action Plan Status, Action Plan Template, Plan Start Date. Click \"Save.\" Repeat these steps for the other standard objects Action Plans supports: Contacts, Leads, Opportunities, etc. Delete Action Plans Buttons Follow this steps for Action Plan Object: Navigate to Setup > Object Manager > Action Plan > Search Layouts. Click on \"Edit\" near \"List View.\" Move the \"Delete Action Plans\" button from \"Available Buttons\" to \"Selected Buttons.\" Click \"Save.\" Task Layout Optionally, add the \"Action Plan Task\" field to your Task page layout, but it should be Read-Only , as clearing this field will break the ability to track Action Plan progress. Security Update Your Org-Wide Default Sharing Settings Action Plans includes two shareable objects: Action Plan  and Action Plan Template . You may configure your sharing settings in whatever way works for your organization. If you want anyone to be able to create and see plans and their templates, use Public Read/Write for Action Plan and Action Plan Template. If you want anyone to be able to see Action Plans and Templates without being able to change them, select \"Public Read Only.\" If your Org-Wide Default sharing settings are set to Private for Action Plan or Action Plan Template, you may need to implement custom automation to share Action Plan records with the appropriate people. You may do this via Apex sharing, or you may use other automation, to assign ownership of the Action Plan itself to the related record owner or any desired user. To use Action Plans, most users require access only to Tasks . They can be assigned Tasks without knowing that these Tasks are part of an Action Plan. Any changes they make to a Task's Status will be reflected in the related Action Plan Task Template record automatically. No Permission Set is required. Use Permission Sets For Security Assign the appropriate Permission Set(s) to each user who will need to use Action Plans: Action Plans Admin:  Full permissions for Action Plans, Action Plan Templates, AP Tasks and APT Task Templates. Action Plans Template Creator:  Full permissions for Action Plan Templates and AP Template Tasks. No Action Plan access. Action Plans Creator:  Read, Create, Edit, Delete for Action Plans and AP Tasks. Read-only for Action Plan Templates and APT Task Templates. Action Plans Import/Export:  Access to export and import Action Plan Template records. View the appropriate button for export and tab for import. Action Plans User:  Read-only for Action Plans and AP Tasks. Edit permission for Tasks should be provided via the user's profile or other permission sets. Uses for each Permission Set: Some users may require visibility into the Action Plans related to those Tasks. These users need the Action Plans User  Permission Set. It gives Read-only access to Action Plan. Some users may need to create Action Plans from Templates but not edit the templates themselves. The Action Plans Creator  Permission Set gives read-only access to Action Plan Templates, and Read, Create, Edit, and Delete access to Action Plans. Users who can create and edit Action Plan Templates require the Action Plans Template Creator  Permission Set. This includes permission to Read, Create, Edit, and Delete all Action Plan Templates only. It does not include any Action Plan or Task permissions. If these users require Action Plan access, other Permission Sets should be used as well. A custom permission allows exporting of Action Plan Templates. Intended as an add-on for Action Plans Template Creator , the Action Plans Import/Export  permission set allows the viewing of the Export button on Template detail pages and to the Import tab. The custom permission Action Plan Template Export  allows exporting of Action Plan Templates and associated tasks. Use this permission with care, as it is a potential security hole for your org's proprietary templates. This is a great way to move templates from a Sandbox to Production org. Action Plans Admin  includes Modify All permissions for all four Action Plan objects(Action Plan, Action Plan Task Template, Action Plan Template, and Action Plan Template Task Template). The custom permission allows exporting Action Plan Templates. Note: The Apex used in Flows or via triggers does not require special permissions to run. Using Action Plans with Custom Objects To Start Using an Object with Action Plans Create the object and be sure to check \"Track Activities\" for the object attrributes Create a lookup field from Action Plan to the object. Name the field the same as the object name.  The field label can be anything. As an example, if you have a custom object named MyObject__c , you must name the field on Action Plan MyObject__c Add the field to the Related Objects  fieldset on Action Plan. The related object will now be available for selection when creating a new Action Plan and relating it to an object. Add the following code to the object trigger in before delete  and after undelete  contexts(removing the LabsActionPlans  namespace if you're not using the managed package):LabsActionPlans.ActionPlansTriggerHandlers.actionPlansSObjectTriggerHandler( 'CustomObject__c' ); Test Code for Additional Objects Don't forget to write a test class to cover the custom object trigger. If you're just going for coverage(not a best-practice!) just make a test method inserting and then deleting a record.Unfortunately, the code in this package does not lend itself to easy creation of an Action Plan for a custom object... yet. Adding a New Custom Object Action Plan button to the Action Plan object While Action Plans already overrides the New Action Plan action, the New button will show a new Action Plan screen, but will not allow adding an existing template.(Perhaps this will be in a future release... safe harbor.) Create a custom button with the following format on the Action Plan object and add it to the related list on the custom object page layout: Navigate to Setup > Object Manager > Action Plan > Buttons, Links, and Actions > New Button or Link Give it a label and name, such as \"New MyObject Action Plan\" Display Type is List Button. Uncheck the list checkbox. Use the following format for the button(removing the LabsActionPlans__  namespace if you're not using the managed package):{!URLFOR( $Action.LabsActionPlans__ActionPlan__c.New, null, [refType=\"CustomObject__c\", refId=CustomObject__c.Id] )} Create Action Plans for multiple Custom Object records Just as there is a button for Account list views to create multiple Action Plans, you can do the same for your custom object. Create a Visualforce page with the following code: <apex:page standardController=\"CustomObject__c\" recordsetvar=\"o\" extensions=\"LabsActionPlans.ActionPlansCreateMultipleAPsExtension\" showHeader=\"false\" action=\"{!doRedirect}\"> <apex:form> <apex:actionFunction name=\"jsCancel\" action=\"{!cancel}\" immediate=\"true\" /> </apex:form> <script> var oids = '{!JSENCODE(objIDs)}'; if(oids.length < 15) { alert('{!$Label.LabsActionPlans__ap_Errors_selectOneRecord}'); jsCancel(); } </script> </apex:page> Then create a list view button for that object and add it to your list views. To Stop Using an Object with Action Plans If you want, for example, not to allow relating Action Plans to Contracts, remove the Contract field from the Action Plan Related Objects fieldset.There is no need to delete the field from the Action Plan object. Create a Template Now you're ready to create your first template. Navigate to the Action Plans Templates tab. Click on the \"New Action Plan Template\" button. The template screen looks like this: Name - Template Name. Description - An explanation of how the template should be used. Skip Weekends - Allows you to automatically reschedule a task that would fall on a weekend to either the day before or day after the weekend. When checked, a picklist appears, allowing you to select before or after the weekend. Action - Click \"X\" to eliminate a step in a template. Subject - What the task is to do. Task Dependency - The dependent task will only be created once the controlling task is completed. Days After- This value determines the due date of the task. For tasks with no dependency, the task's due date will be offset from the plan start date. For tasks with a dependency, the due date will be offset from the expected due date of the task on which it depends. Assigned To - Looks up to user. Leave blank if you want to assign the task dynamically.When assigning dynamically, the default behavior will be to assign the task to the running user. You can also have the system assign it to the record owner by changing your Action Plan Settings. See \"Post Install Configuration\" guide above. Category - What type of activity. Priority - Taken from Task priorities and Record Type(if applicable). Email - Send a standard New Task email when checked. For Tasks depending on others, the email will be sent when the task is created. Reminder - This check box will define the default behaviour for reminders when applying the template to create an Action plan . If it's left unchecked, in the Action Plan Creation page the reminders will be initially disabled If it's checked the reminders will be available. User Reminder settings: Go Personal Setup > My Personal Information > Reminders, if the option \"By default, set reminder on Tasks to:\" is checked then the selected time will be the default option for task template reminders. User setting for Activity Object : Go App Setup> Feature Settings > Sales > Activity Settings, If \"Enable Activity Reminders\" is not checked, then reminders column will not be displayed in the Action Plan creation page. Comments - Comments supporting a task. Add New Task - Adds an additional row to the tasks grid. Save - Saves the template. Task Record Types If your org uses Task Record Types, you must specify which Record Type to use for all Tasks from each Action Plan and Template record. This will affect the Status values available for each related Action Plan Task. This cannot be changed once an Action Plan or Template is created. Only one record type may be specified for all the Tasks on that Action Plan or Template. Create Action Plans for Several Accounts Navigate to an Accounts list view. Select the Accounts for which you want to create Action Plans. Click on the \"Create Account Action Plans\" button. Select the template you want to use by typing the name on the lookup and clicking on it. Enter the information specific to this plan. Note that the Accounts you selected earlier are visible. Save the Action Plan. Note: Action Plan creation is handled by a queueable(asynchronous) process. It can take a couple of minutes to be able to view all created records. Verify the Action Plan and the tasks. Complete the first task on the Action Plan. Note that the Action Plan is now in the correct related list and that this Account has one open activity and one closed activity. The third activity in the template is dependent and will be created only when its controlling task is complete. Task notifications for Flow-created Action Plans User Settings To receive Task notifications if Send Email  is selected on an Action Plan Task, ensure that users have been allowed to control receipt of Task notification emails(this is active by default), and that they have allowed email notifications to be sent(this is also enabled by default). See Salesforce H&T  for more information. Org Setting The Send Email  field on Action Plan Task must be checked to send a email notifications, and the setting Allow Flow to send delegated task notifications on records created through Apex  must also  be enabled. Go to Settings > Feature Settings > Sales > Activity Settings to check that box and allow email notifications to be sent via Flow-created Action Plans. Action Plan Tasks If the user has enabled task notification, then those will be sent when an Action Plan Task is created. If the Action Plan Task is updated to a new owner, and if the Send Email  box is NOT checked, the user may still receive a task notification if that is in their personal settings. If the box is checked, assuming that notifications are enabled for that user, the email will be sent. Queues Action Plan Tasks cannot be assigned to queues, so if the parent record is owned by a queue, each AP Task will be assigned to the running user. Tasks generated from that Action Plan can be assigned to the queue by using a Flow to reassign the Tasks. Because the Invocable Apex returns a list of Action Plan Task IDs, the createdTasks(which have a relationship to the Action Plan tasks) can be updated in that same flow, as they are created synchronously and can be queried immediately. Alternatively, reassign Tasks to Queues any other way you'd like; it will not break Action Plans, and the Queue name will show on the Action Plan detail page. Automate Action Plan Creation Flow Action Plans includes an Invocable Apex class that can be included in a Flow. The Record ID of the triggering record is required, as is the Id OR the Name of the desired template.Days from trigger to start Action Plan is optional(and defaults to 0). The first task will be due the number of days(specified on the template) from the start date. This date may fall on a weekend, though task due dates can be moved to avoid weekends if set on the template. The Invocable Apex class returns the Salesforce IDs of all the created Action Plan Tasks, which can be used in the next Flow steps. (Optional) Sample Action Plan Template for Account onboarding Run the following: sfdx force:apex:execute -f ./data/sample-data.apex To use this Template with the included Flow, see the Create Action Plan From Template  Apex Action in the New Customer Onboarding Activities  Flow Create an Account and set Type  to any value that starts with 'Customer' Process Builder It is recommended NOT to check the Recursion box when creating a Process Builder to work with Action Plans. It is also recommended NOT to use Process Builder at all! Apex To call the invocable Apex from a Trigger or Apex class, adapt the following sample code: UNMANAGED CODE String apTemplateName; ActionPlanTemplate__c apTemplate; List<SObject> toInsert... // can use any object, such as Account, or the generic SObject class List<ActionPlanCreateInvocable.CreateActionPlanRequest> requests = new List<ActionPlanCreateInvocable.CreateActionPlanRequest>(); for(SObject a : toInsert){ ActionPlanCreateInvocable.CreateActionPlanRequest req = new ActionPlanCreateInvocable.CreateActionPlanRequest(); req.templateNameOrID = apTemplate.Id; req.relatedRecordID = a.Id; req.daysToActionPlanStart = 0; req.actionPlanName = a.Name + ' - Onboarding'; requests.add(req); } List<Id> resultIDs = ActionPlanCreateInvocable.makeActionPlanFromTemplate(requests); MANAGED PACKAGE String apTemplateName; LabsActionPlans__ActionPlanTemplate__c apTemplate; List<SObject> toInsert... // can use any object, such as Account, or the generic SObject class List<LabsActionPlans.ActionPlanCreateInvocable.CreateActionPlanRequest> requests = new List<LabsActionPlans.ActionPlanCreateInvocable.CreateActionPlanRequest>(); for(SObject a : toInsert){ LabsActionPlans.ActionPlanCreateInvocable.CreateActionPlanRequest req = new LabsActionPlans.ActionPlanCreateInvocable.CreateActionPlanRequest(); req.templateNameOrID = apTemplateName; req.relatedRecordID = a.Id; req.daysToActionPlanStart = 1; req.actionPlanName = a.Name + ' - Onboarding'; requests.add(req); } List<Id> resultIDs = LabsActionPlans.ActionPlanCreateInvocable.makeActionPlanFromTemplate(requests); ActionPlanCreateInvocable.CreateActionPlanRequest class Variables: String templateNameOrID (required) Name is not unique, so ID is preferred Id relatedRecordID (required) Must have a relationship field named the related record object name from Action Plan object Integer daysToActionPlanStart (not required) Defaults to 0, the day the plan is created String actionPlanName (not required) Give the Action Plan a custom name. If not specified, defaults to {Template Name} - {Parent Record Name}. Share Your Templates and Discover Best Practices using Template Export and Template Import Action Plans supports the sharing and discovery of best practices using Template Export and Template Import. How to Share Your Template Export is simple. Navigate to the Template you wish to export. Click on the \"Export\" button. Export creates a simple XML file containing template header and task information. It also includes information about who created the template.Note: It does not include user information or sensitive data about what objects you might use this template with. If you are using Lightning Experience, the exported file is in your Files tab, in your private files library. If you are still using Salesforce Classic, it is in your Documents tab, in your private documents folder. Sharing the file is easy. Email the file to whomever you want to share it with. Do you want to share it with a broader audience? Email the file to Salesforce Labs at labs@salesforce.com . Best Practices: How to Import Import is also simple. Navigate to the \"Import Template\" tab. Select the file you want to import using \"Browse\" and once you've found it click on \"Import Template.\" (Optional) Sample Action Plan Template Import This repository also includes sample Action Plan Template files, which you can import on the appropriate tab. You may download New Customer Onboarding  or Trade Show Follow Up  from GitHub, or you can find it in this SFDX project in the data  folder."
    },
    {
        "title": "ActionPlanCreateInvocable",
        "fileName": "ActionPlanCreateInvocable.html",
        "text": "ActionPlanCreateInvocable Signature global without sharing class ActionPlanCreateInvocable Author David Schach Since 2022 ActionPlanCreateInvocable Methods makeActionPlanFromTemplate(requests) Invocable Apex for creating Action Plans from a template, a parent ID, and days from now to start the task due dates makeActionPlanFromTemplate(requests) Invocable Apex for creating Action Plans from a template, a parent ID, and days from now to start the task due dates Signature @InvocableMethod(label='Create Action Plan From Template' description='Takes a Template Name/Id and Record Id and makes an Action Plan for that record.' category='ActionPlans') global static List<Id> makeActionPlanFromTemplate(List<CreateActionPlanRequest> requests) Parameters requests Type: List<CreateActionPlanRequest> Wrapper of CreateActionPlanRequest Returns List<Id>  of the created Action Plans See ActionPlanCreateInvocable.CreateActionPlanRequest Example String apTemplateName; ActionPlanTemplate__c apTemplate; List<SObject> toInsert... // can use any object, such as Account, or the generic SObject class List<ActionPlanCreateInvocable.CreateActionPlanRequest> requests = new List<ActionPlanCreateInvocable.CreateActionPlanRequest>(); for(SObject a : toInsert){ ActionPlanCreateInvocable.CreateActionPlanRequest req = new ActionPlanCreateInvocable.CreateActionPlanRequest(); req.templateNameOrID = apTemplate.Id; req.relatedRecordID = a.Id; req.daysToActionPlanStart = 0; req.actionPlanName = apTemplate.Name + ' - ' + a.Name; // optional requests.add(req); List<Id> resultIDs = ActionPlanCreateInvocable.makeActionPlanFromTemplate(requests); ActionPlanCreateInvocable.CreateActionPlanRequest Wrapper class for ActionPlan Request for invocable Apex. Signature global class CreateActionPlanRequest Author David Schach Since 2022 ActionPlanCreateInvocable.CreateActionPlanRequest Properties Name Signature Description actionPlanName global String actionPlanName The Action Plan Name. If not specified, the Action Plan will be called <Template Name> - <Parent Record Name> daysToActionPlanStart global Integer daysToActionPlanStart Days from trigger to start Action Plan. Defaults to 0, the day the plan is created. relatedRecordID global Id relatedRecordID The parent Record ID. Must have a relationship named the related record object name from Action Plan object. templateNameOrID global String templateNameOrID The template Id or Name to use.(Name is not unique, so ID is preferred)"
    },
    {
        "title": "ActionPlanCreationController",
        "fileName": "ActionPlanCreationController.html",
        "text": "ActionPlanCreationController Controller for ActionPlan Create and ActionPlan Edit screens(the same page overrides both actions) Signature public with sharing class ActionPlanCreationController See ActionPlanCreateInvocable Authors Rodrigo Birriel , David Schach Since 2022 ActionPlanCreationController Properties Name Signature Annotations Description actionPlan private ActionPlan__c actionPlan @TestVisible Page Action Plan addedTask private APTask__c addedTask @testVisible The APTask__c  instantiated when clicking the Add New Task link on the page apTasks private List<APTask__c> apTasks @testVisible Stored APTask__c  records for the page. See getAPTasks() canDisplayReminder public Boolean canDisplayReminder Is the User able to see reminders? cloneParam private String cloneParam Are we cloning an Action Plan? If so, this is 1. Otherwise, it is 0. errorMsg private String errorMsg Error message to display(outside of Apex.PageMessages) hasRelated public Boolean hasRelated Is there a related record or template when we load the page? hasRelatedObject public Boolean hasRelatedObject Set to true if a relationship field is filled inVisualforceContext private Boolean inVisualforceContext @testVisible Esure we are working in Visualforce context. For future functionality allowing invocable Apex to call this class directly mapTasksListBkp private Map<Id, ApTaskWrapper> mapTasksListBkp Map to retrieve our APTaskWrapper records by APTask Id Currently unused; should be deleted if package testing passes pendingDeletes private List<APTask__c> pendingDeletes Temporary list of APTasks to delete, based on taskIndex refId public String refId Getter and Setter for refId(related record Id) refType public String refType Getter and Setter for RefType(related object Name) relatedFieldName public String relatedFieldName Get the specific lookup field used by this Action Plan relatedObjDisplayField public String relatedObjDisplayField The field on the related record we use to display on the ActionPlan.(Not Name for Case and Contract) relatedObjectName public String relatedObjectName The name of the object(the same as the relationship field, except for standard objects) the AP is related to. NOT the name of the related record relatedObjectOptions private List<SelectOption> relatedObjectOptions Picklist of related object options, generated from the Field Set on Action Plan relatedObjLabelPlural public String relatedObjLabelPlural Related Object Name(Plural) relatedObjNameList private List<String> relatedObjNameList @TestVisible We need a list of parent RECORD names when showing all the parents when we mass-create action plans This initializes the list, and then divides it into three parts for three columns on the page. relatedRecordIDs private Set<Id> relatedRecordIDs Related Record IDs relatedRecordsOne public List<String> relatedRecordsOne Column one of related records relatedRecordsThree public List<String> relatedRecordsThree Column three of related records relatedRecordsTwo public List<String> relatedRecordsTwo Column two of related records relationshipFields private List<String> relationshipFields Memoize relationship fields subtitle public String subtitle The subtitle shown on the page taskHasRecordType public Boolean taskHasRecordType If the Task object has Record Types enabled, return true taskIndex private Double taskIndex Max taskIndex for this Action Plan taskOwnerMap public Map<Id, OwnerWrapper> taskOwnerMap Map of Action Plan Task Id to the Task owner(or APTask User if no Task has been created) taskPriorities private List<SelectOption> taskPriorities Picklist of Task.Priority  values taskTypes private List<SelectOption> taskTypes Picklist of Task.Type  values templateId private Id templateId TemplateId is pulled from the page parameters and tells us if we're making an Action Plan based on a template ActionPlanCreationController Constructors ActionPlanCreationController(stdController) Constructor for ActionPlan Create/Edit Page ActionPlanCreationController(stdController) Constructor for ActionPlan Create/Edit Page Signature public ActionPlanCreationController(ApexPages.StandardController stdController) Parameters stdController Type: ApexPages.StandardController ActionPlan__c  standard controller Author David Schach ActionPlanCreationController Methods addTask() Creates a blank APTask__c  record and adds it to apTasks Sets addedTask to the APTask__c calculateMaxTaskIndex() Calculates the highest task index value for Action Plan Tasks calculateMaxTemplateTaskIndex() Calculates the highest task index value for Action Plan Template Tasks cancel() Action that redirects to previous page checkCycleDependent() Checks if Action Plan Tasks has cyclic dependency. checkPendingDeletes() Check if have pending Tasks to delete chooseDisplayField(objectName) Based on the related object name, we display a field from that object as the related record dependantCycle(controllingTask, index) Check for cyclically dependent tasks findActivityEnabledObjects() Get all available WhatId and WhoId objects getAllRelationshipFields() Get a list of all relationship fields to avoid SOQL error for unqueried fields getAPTasks() Gets Tasks related to an Action Plan, or initializes from the Action Plan Template getDefaultTaskRecordTypeId() Find user default task recordtype getDisplayTemplateLookup() Retrieves if template lookup must be displayed getErrorMsg() Getter method to return the error message getHoursOption() Generate picklist of available task due times getNameListSize() The size of the list of related objects available as parents to the Action Plan getNamespacePrefix() Retrieve the Namespace Prefix in case we are in a managed package. Needed for the JavaScript in the page getRecords(queryText) Main code for lightning lookup. Included in this class because we use this as the controller for our main page The code is duplicated from ActionPlanSectionHeaderController because there is a lookup directly in this page(for now) getRecordTypeName() Convert Record Type Id to Record Type Name for the Action Plan's Tasks getRelatedObjectOptions() Getter method with the related object options by default. getSubjectItems() Returns list of Dependent tasks to fill drop down getTaskPriorities() Generate picklist of Task Priorities getTaskRTPicklistValues() Generate picklist of Task Record Types getTasks() Method that retrieves all AP tasks for a Action Plan for Visualforce Page getTaskTypes() Generate picklist of Task Types getTemplateName() Send Action Plan's Template Name to the Visualforce page Because the record has not been saved, the Action Plan Name on initialization is the same as the name of the template hasRelatedObject() Check if the action plan has a related object initCloneActionPlan() Initalize controller for cloning an Action Plan initEditActionPlan() Initalize controller for editing an Action Plan initNewActionPlan() Initalize controller for creating a new Action Plan initNewActionPlanFromTemplate(visualforceContext) Initalize controller for creating a new Action Plan from a template Used so we can instantiate this controller from Invocable Apex initNewActionPlanFromTemplate(visualforceContext, apt) Set up a new Action Plan from a template onLoad() Action on page load to ensure custom setting is created parseRelatedIDs(relatedIDs) Take related IDs parameter and put into a list if each is an Id. Discard invalid IDs queryAPTaskOwners(ap) Query all Task  records for the Action Plan's Tasks so we can display the owher name read-only if it is a queue referedObjectInit() Set the Refered object to Create New Action Plan refreshRelatedObjectsLookUp() Refresh the related object lookup field. relatedObjectId() Returns the related object Id from lookup fields. removeTask() Action for removing a existing Action Plan Task retrieveNameRelatedRecord(relatedRecordIDs, relatedObjectName) Query the names of the parent records from the IDs. Some standard objects have special \"name\" fields retrieveTaskFromExistingActionPlan(actionPlanId) Get a Existing Action Plan Task List save() Action that saves a new Action Plan saveAndNew() Saves Action Plan Instance and tasks and returns to the creation page with the previous Action Plan's details. saveHandler() Saves Action Plan Handler. Decides if we are assigning to multiple parent records or just one saveMultipleAP() Save Action Plans for multiple related object instances. Invokes queueable process that creates: ActionPlan, ActionPlanTasksTemplate, and Tasks savePageRef() Saves Action Plan Instance and tasks and redirects to that detail page saveSingleAP() Saves Action Plan Instance and task. Also creates all due dates for tasks, then redirects to the AP list addTask() Creates a blank APTask__c  record and adds it to apTasks Sets addedTask to the APTask__c Signature public PageReference addTask() Returns PageReference  but we return null for a page refresh See ActionPlanCreationController.addedTask calculateMaxTaskIndex() Calculates the highest task index value for Action Plan Tasks Signature private Double calculateMaxTaskIndex() Returns Double  maxIndex calculateMaxTemplateTaskIndex() Calculates the highest task index value for Action Plan Template Tasks Signature private Double calculateMaxTemplateTaskIndex() Returns Double  maxIndex cancel() Action that redirects to previous page Signature public PageReference cancel() Returns PageReference  previousPage checkCycleDependent() Checks if Action Plan Tasks has cyclic dependency. Signature public Boolean checkCycleDependent() Returns Boolean  True if there is a cyclic dependency checkPendingDeletes() Check if have pending Tasks to delete Signature private void checkPendingDeletes() chooseDisplayField(objectName) Based on the related object name, we display a field from that object as the related record Signature private String chooseDisplayField(String objectName) Parameters objectName Type: String SObject Name Returns String  The display field Author David Schach dependantCycle(controllingTask, index) Check for cyclically dependent tasks Signature private Boolean dependantCycle(APTask__c controllingTask, Integer index) Parameters controllingTask Type: APTask__c The task we are checking index Type: Integer The index of the task(for referencing the controllign one) Returns Boolean  Does this task have a dependency? findActivityEnabledObjects() Get all available WhatId and WhoId objects Signature private Set<String> findActivityEnabledObjects() Returns Set<String>  Objects that Task can use in WhoId or WhatId getAllRelationshipFields() Get a list of all relationship fields to avoid SOQL error for unqueried fields Signature public List<String> getAllRelationshipFields() Returns List<String>  Relationship fields from AcitonPlansUtilities See ActionPlansUtilities.getCustomRelationshipFields Author David Schach getAPTasks() Gets Tasks related to an Action Plan, or initializes from the Action Plan Template Signature public List<APTask__c> getAPTasks() Returns List<APTask__c>  Action Plan Tasks getDefaultTaskRecordTypeId() Find user default task recordtype Signature @testVisible private Id getDefaultTaskRecordTypeId() Returns Id  default Task record type Id See ActionPlansUtilities.getDefaultTaskRecordTypeId Author David Schach getDisplayTemplateLookup() Retrieves if template lookup must be displayed Signature public Boolean getDisplayTemplateLookup() Returns Boolean  True if there is a related record or if there is a template ID provided getErrorMsg() Getter method to return the error message Signature public String getErrorMsg() Returns String  Error message getHoursOption() Generate picklist of available task due times Signature public List<SelectOption> getHoursOption() Returns List<SelectOption>  picklist of 30-minute intervals See ActionPlansUtilities.getHoursOption getNameListSize() The size of the list of related objects available as parents to the Action Plan Signature public Integer getNameListSize() Returns Integer  The picklist size Author David Schach getNamespacePrefix() Retrieve the Namespace Prefix in case we are in a managed package. Needed for the JavaScript in the page Signature public String getNamespacePrefix() Returns String  Namespace Prefix(LabsActionPlans or empty string) See ActionPlansUtilities.namespacePrefix Author David Schach getRecords(queryText) Main code for lightning lookup. Included in this class because we use this as the controller for our main page The code is duplicated from ActionPlanSectionHeaderController because there is a lookup directly in this page(for now) Signature @RemoteAction public static List<SObject> getRecords(String queryText) Parameters queryText Type: String SOQL query to return records for the lookup Returns List<SObject>  Returned records See ActionPlanSectionHeaderController getRecordTypeName() Convert Record Type Id to Record Type Name for the Action Plan's Tasks Signature public String getRecordTypeName() Returns String  Task Record Type Name for the current Action Plan Author David Schach getRelatedObjectOptions() Getter method with the related object options by default. Signature public List<SelectOption> getRelatedObjectOptions() Returns List<SelectOption>  Picklist of all related objects to Action Plan See ActionPlanCreationController.findActivityEnabledObjects getSubjectItems() Returns list of Dependent tasks to fill drop down Signature public List<SelectOption> getSubjectItems() Returns List<SelectOption>  All other AP Task subjects getTaskPriorities() Generate picklist of Task Priorities Signature public List<SelectOption> getTaskPriorities() Returns List<SelectOption>  Picklist of Task.Priority See ActionPlansUtilities.getFieldOptions Author David Schach getTaskRTPicklistValues() Generate picklist of Task Record Types Signature public List<SelectOption> getTaskRTPicklistValues() Returns List<SelectOption>  Picklist of Task.RecordType  options See ActionPlansUtilities.getTaskRTPicklistValues Author David Schach getTasks() Method that retrieves all AP tasks for a Action Plan for Visualforce Page Signature public List<ApTaskWrapper> getTasks() Returns List<ApTaskWrapper>  of AP Task Wrappers for Visualforce Page getTaskTypes() Generate picklist of Task Types Signature public List<SelectOption> getTaskTypes() Returns Picklist of Task.Type See ActionPlansUtilities.getFieldOptions Author David Schach getTemplateName() Send Action Plan's Template Name to the Visualforce page Because the record has not been saved, the Action Plan Name on initialization is the same as the name of the template Signature public String getTemplateName() Returns String  ActionPlan__c.Name (from ActionPlan__c.Action_Plan_Template__r.Name ) Author David Schach hasRelatedObject() Check if the action plan has a related object Signature public Boolean hasRelatedObject() Returns Boolean  Is a relationship field filled? See ActionPlansUtilities.getCustomRelationshipFields initCloneActionPlan() Initalize controller for cloning an Action Plan Signature private void initCloneActionPlan() initEditActionPlan() Initalize controller for editing an Action Plan Signature private void initEditActionPlan() initNewActionPlan() Initalize controller for creating a new Action Plan Signature private void initNewActionPlan() initNewActionPlanFromTemplate(visualforceContext) Initalize controller for creating a new Action Plan from a template Used so we can instantiate this controller from Invocable Apex Signature private void initNewActionPlanFromTemplate(Boolean visualforceContext) Parameters visualforceContext Type: Boolean Are we in Visualforce context? Author David Schach initNewActionPlanFromTemplate(visualforceContext, apt) Set up a new Action Plan from a template Signature private void initNewActionPlanFromTemplate(Boolean visualforceContext, ActionPlanTemplate__c apt) Parameters visualforceContext Type: Boolean Are we in Visualforce context? apt Type: ActionPlanTemplate__c ActionPlanTemplate__c  record Author David Schach onLoad() Action on page load to ensure custom setting is created Signature public PageReference onLoad() Returns PageReference  null(required for page actions method) See ActionPlansUtilities.onPageLoad parseRelatedIDs(relatedIDs) Take related IDs parameter and put into a list if each is an Id. Discard invalid IDs Signature private List<Id> parseRelatedIDs(String relatedIDs) Parameters relatedIDs Type: String The page URL parameters Returns List<Id>  A list(not set) of all related IDs from the URL Author David Schach queryAPTaskOwners(ap) Query all Task  records for the Action Plan's Tasks so we can display the owher name read-only if it is a queue Signature private Map<Id, OwnerWrapper> queryAPTaskOwners(ActionPlan__c ap) Parameters ap Type: ActionPlan__c The Action Plan Returns Map of Task  by Id Author David Schach referedObjectInit() Set the Refered object to Create New Action Plan Signature @TestVisible private void referedObjectInit() See ActionPlanCreationController.retrieveNameRelatedRecord refreshRelatedObjectsLookUp() Refresh the related object lookup field. Signature public PageReference refreshRelatedObjectsLookUp() Returns PageReference  null See ActionPlansUtilities.getEscapedPageParameter relatedObjectId() Returns the related object Id from lookup fields. Signature @testVisible private Id relatedObjectId() Returns Id  the related object id removeTask() Action for removing a existing Action Plan Task Signature public PageReference removeTask() Returns PageReference  null to refresh current page retrieveNameRelatedRecord(relatedRecordIDs, relatedObjectName) Query the names of the parent records from the IDs. Some standard objects have special \"name\" fields Signature private List<String> retrieveNameRelatedRecord(Set<Id> relatedRecordIDs, String relatedObjectName) Parameters relatedRecordIDs Type: Set<Id> The related object IDs relatedObjectName Type: String The name of the SObject for which the IDs refer Returns List<String>  List of related record names retrieveTaskFromExistingActionPlan(actionPlanId) Get a Existing Action Plan Task List Signature private List<APTask__c> retrieveTaskFromExistingActionPlan(Id actionPlanId) Parameters actionPlanId Type: Id Parent ActionPlan__c  Id Returns List<APTask__c>  All template tasks save() Action that saves a new Action Plan Signature public PageReference save() Returns PageReference  null See ActionPlanCreationController.checkCycleDependent , ActionPlanCreationController.saveHandler saveAndNew() Saves Action Plan Instance and tasks and returns to the creation page with the previous Action Plan's details. Signature public PageReference saveAndNew() Returns newPage saveHandler() Saves Action Plan Handler. Decides if we are assigning to multiple parent records or just one Signature private PageReference saveHandler() Returns Pagereference called Method See ActionPlanCreationController.save , ActionPlanCreationController.savePageRef , ActionPlanCreationController.saveMultipleAP saveMultipleAP() Save Action Plans for multiple related object instances. Invokes queueable process that creates: ActionPlan, ActionPlanTasksTemplate, and Tasks Signature @TestVisible private PageReference saveMultipleAP() Returns Pagereference(null or ActionPlansHome with confirmation) See ActionPlansUtilities.getEscapedPageParameter savePageRef() Saves Action Plan Instance and tasks and redirects to that detail page Signature private PageReference savePageRef() Returns newPage See ActionPlanCreationController.saveSingleAP saveSingleAP() Saves Action Plan Instance and task. Also creates all due dates for tasks, then redirects to the AP list Signature private Id saveSingleAP() Returns Id  Action Plan Id ActionPlanCreationController.ApTaskWrapper Wrapper Class for AP Task SObject Signature public class ApTaskWrapper Author Rodrigo Birriel Since 08/01/2010 Author David Schach Since 4/2022 ActionPlanCreationController.ApTaskWrapper Properties Name Signature Description ap private ActionPlan__c ap Action Plan in wrapper apt public APTask__c apt Action Plan Task in wrapper assignToOwner private Boolean assignToOwner Does blank User field default to parent owner? Filled from custom setting isLast public Boolean isLast Last Task position public Integer position Task position(order on the page) userRequired public Boolean userRequired Defines if we set the APTask__c  Assigned To field to required ActionPlanCreationController.ApTaskWrapper Constructors ApTaskWrapper(ap, apTask, position, apTaskRTId) Constructor for wrapper to display related APTask__c  records on ActionPlan__c  create/edit page ApTaskWrapper(ap, apTask, position, apTaskRTId) Constructor for wrapper to display related APTask__c  records on ActionPlan__c  create/edit page Signature public ApTaskWrapper(ActionPlan__c ap, APTask__c apTask, Integer position, Id apTaskRTId) Parameters ap Type: ActionPlan__c Action Plan record apTask Type: APTask__c Action Plan Task record position Type: Integer Position(in the list of AP Tasks) on the Page apTaskRTId Type: Id The Record Type of the Task eventually to be created ActionPlanCreationController.ApTaskWrapper Methods getUserRender() Logic for determining how to show the Assigned To field for the AP Task If we show the UserLookup, set the UserRequired property to determine if the field is required getUserRender() Logic for determining how to show the Assigned To field for the AP Task If we show the UserLookup, set the UserRequired property to determine if the field is required Signature public String getUserRender() Returns String  UserReadOnly, UserLookup, OwnerPlaceholder Author David Schach ActionPlanCreationController.OwnerWrapper Wrapper class for Task  owner, with Name and Id. Used to determine if owned by a Queue Signature public class OwnerWrapper ActionPlanCreationController.OwnerWrapper Properties Name Signature Description tOwnerId public Id tOwnerId Task Owner Id(User or Queue) tOwnerName public String tOwnerName Task Owner Name(User or Queue) ActionPlanCreationController.OwnerWrapper Constructors OwnerWrapper(taskOwnerId, taskOwnerName) Constructor for OwnerWrapper OwnerWrapper(taskOwnerId, taskOwnerName) Constructor for OwnerWrapper Signature public OwnerWrapper(Id taskOwnerId, String taskOwnerName) Parameters taskOwnerId Type: Id Task.OwnerId  taskOwnerName Type: String Task.Owner.Name (User or Queue) Author David Schach"
    },
    {
        "title": "ActionPlanDetailController",
        "fileName": "ActionPlanDetailController.html",
        "text": "ActionPlanDetailController Signature public with sharing class ActionPlanDetailController Authors Rodrigo Birriel , David Schach Since 2022 ActionPlanDetailController Properties Name Signature Description actionPlan private ActionPlan__c actionPlan The Action Plan apTaskWrapperList private List<TaskWrapper> apTaskWrapperList Memoized TaskWrappers for display on the page canDisplayReminder public Boolean canDisplayReminder Does the user have reminders enabled? If not, do not shrae the reminder option hasRecordType public Boolean hasRecordType Does the org have Record Types enabled for Task SObject ActionPlanDetailController Constructors ActionPlanDetailController(stdController) Extension Constructor ActionPlanDetailController(stdController) Extension Constructor Signature public ActionPlanDetailController(ApexPages.StandardController stdController) Parameters stdController Type: ApexPages.StandardController ActionPlan__c  Standard Controller ActionPlanDetailController Methods deletePlan() Deletes the current Action Plan loaded and redirects to the AP List getActionPlanTasks() Collect and return all TaskWrappers getCanShare() If we have no share object, we don't need to show a Share button getCanTransfer() Does the user have permission to transfer? We query UserRecordAccess  to find out. gethasControllingTasks() Display ControllingTasks column only if there are controlling tasks getRecordTypeName() Convert AP Task Record Type Id to Record Type Name getRelatedObjectLabel() The label of the Action Plan's parent record SObject getrelatedRecordName() The name of the parent record - show a different field based on SObject Type getVersion() Checks if Action Plan Template has been changed since the creation of the Action Plan. onLoad() Action on page load to ensure custom setting is created deletePlan() Deletes the current Action Plan loaded and redirects to the AP List Signature public PageReference deletePlan() Returns PageReference  Page to go to after deleting ActionPlan__c See ActionPlansUtilities.getIsLex getActionPlanTasks() Collect and return all TaskWrappers Signature public List<TaskWrapper> getActionPlanTasks() Returns List<TaskWrapper>  List of TaskWrapper  for this Action Plan getCanShare() If we have no share object, we don't need to show a Share button Signature public Boolean getCanShare() Returns Boolean  Does the user have permission to share this Action Plan? Author David Schach getCanTransfer() Does the user have permission to transfer? We query UserRecordAccess  to find out. Signature public Boolean getCanTransfer() Returns Boolean  yes/no Author David Schach gethasControllingTasks() Display ControllingTasks column only if there are controlling tasks Signature public Boolean gethasControllingTasks() Returns Boolean  is the Controller__c  field populated for any Action Plan Tasks? Author David Schach getRecordTypeName() Convert AP Task Record Type Id to Record Type Name Signature public String getRecordTypeName() Returns Record Type Name getRelatedObjectLabel() The label of the Action Plan's parent record SObject Signature public String getRelatedObjectLabel() Returns String  Label of the object related to this Action Plan getrelatedRecordName() The name of the parent record - show a different field based on SObject Type Signature public String getrelatedRecordName() Returns String  name of the object related to this Action Plan getVersion() Checks if Action Plan Template has been changed since the creation of the Action Plan. Signature public Boolean getVersion() Returns Boolean  Was the AP's template modified after the Action Plan was created? onLoad() Action on page load to ensure custom setting is created Signature public PageReference onLoad() Returns PageReference  null(required for page actions method) See ActionPlansUtilities.onPageLoad ActionPlanDetailController.TaskWrapper Wrapper for Action Plan Task It contains the Action Plan Task  and the Task  Id Signature public class TaskWrapper ActionPlanDetailController.TaskWrapper Properties Name Signature Description apt public APTask__c apt The Action Plan Task taskId public Id taskId The(standard) Task  Id taskOwnerId public Id taskOwnerId The(standard) Task  OwnerId taskOwnerName public String taskOwnerName The(standard) Task  OwnerId tsk public Task tsk The Action Plan Task related Task ActionPlanDetailController.TaskWrapper Constructors TaskWrapper(aptParam, taskParam) Constructor for the task wrapper TaskWrapper(aptParam, taskParam) Constructor for the task wrapper Signature public TaskWrapper(APTask__c aptParam, Task taskParam) Parameters aptParam Type: APTask__c Action Plan Task Template taskParam Type: Task TaskId(for the standard object Task )"
    },
    {
        "title": "ActionPlanTemplateCreationController",
        "fileName": "ActionPlanTemplateCreationController.html",
        "text": "ActionPlanTemplateCreationController Extension for Action Plan Template  Create/Edit page Signature public with sharing class ActionPlanTemplateCreationController Since v3 Authors Rodrigo Birriel , David Schach ActionPlanTemplateCreationController Properties Name Signature Annotations Description actionPlanTemplate private ActionPlanTemplate__c actionPlanTemplate @testVisible The Action Plan Template for this page aptTasks private List<APTemplateTask__c> aptTasks @TestVisible canDisplayReminder public Boolean canDisplayReminder Does the user have reminders enabled? errorMsg private String errorMsg Store the value of the error message pendingTemplateTaskDeletes private List<APTemplateTask__c> pendingTemplateTaskDeletes @testVisible subTitle public String subTitle Page SubTitle taskHasRecordType public Boolean taskHasRecordType Does the Task  object have Record Types enabled? taskIndex private Double taskIndex taskPriorities private List<SelectOption> taskPriorities Generate picklist of Task Priority taskTypes private List<SelectOption> taskTypes Generate picklist of Task Type templateId private Id templateId If we are making this template from another template, the Id is stored here ActionPlanTemplateCreationController Constructors ActionPlanTemplateCreationController(stdController) Constructor If we can obtain the Id from the page parameters then we search for that template and set the variable for that template. If we can't obtain the Id from the page parameters then we create a new template and obtain from the controller. Then we need to check if we are cloning the template; in that case clone the template without Id. ActionPlanTemplateCreationController(stdController) Constructor If we can obtain the Id from the page parameters then we search for that template and set the variable for that template. If we can't obtain the Id from the page parameters then we create a new template and obtain from the controller. Then we need to check if we are cloning the template; in that case clone the template without Id. Signature public ActionPlanTemplateCreationController(ApexPages.StandardController stdController) Parameters stdController Type: ApexPages.StandardController Standard Controller(ActionPlanTemplate__c ) ActionPlanTemplateCreationController Methods addTemplateTask() Add a new row to the Template Tasks(but do not commit to the database) calculateTaskIndexValue() Calculates the highest task index value cancelTemplate() Cancel changes checkCycleDependent() Checks if Action Plan Tasks has cyclic dependency. dependantCycle(inspectedTask, index) Check for dependent tasks doSave() Standalone save action so the redirects are different for Save vs Save and New First delete pending deletions, then upsert the template and its tasks, then update dependencies getDefaultTaskRecordTypeId() Find user default recordtype getErrorMsg() Getter method to return the error message from action plans utilities getHoursOption() Get the reminder time picklist options from the central utilities class getTaskPriorities() Generate picklist of Task Priorities getTaskRTPicklistValues() Generate picklist of Task Record Types getTaskTypes() Generate a picklist of Task Type getTemplateSubjectItems() Call method getTemplateSubjectItems() getTemplateTasks() Get all tasks related to the Action Template. getTemplateTaskSize() Return size of the APTTemplate Tasks List. getTemplateWrappers() Iterate over aptTasks and generate wrappers for display on the page onLoad() Action on page load to ensure custom setting is created queryAPTTasks(templateId) Single query for ActionPlan Template Tasks removeTemplateTask() Remove this row from the Template Tasks(but do not commit to the database) saveAndNew() Save and go to New page for Save and New saveTemplate() Saves Action Plan Template and all tasks, then redirects to the AP template list. First check for pending templates for delete; in case that exists then delete those objects. Then insert or update the Action Plan Template pending to save and save tasks to the template and attach relation to Action Plan. templateCycleDependent() Checks if Action Plans Tasks has cyclic dependency. addTemplateTask() Add a new row to the Template Tasks(but do not commit to the database) Signature public void addTemplateTask() calculateTaskIndexValue() Calculates the highest task index value Signature public Double calculateTaskIndexValue() Returns Double  maxIndex cancelTemplate() Cancel changes Signature public PageReference cancelTemplate() Returns PageReference  Object home or Template detail page checkCycleDependent() Checks if Action Plan Tasks has cyclic dependency. Signature public PageReference checkCycleDependent() Returns PageReference  to allow pass-through of save action dependantCycle(inspectedTask, index) Check for dependent tasks Signature private Boolean dependantCycle(APTemplateTask__c inspectedTask, Integer index) Parameters inspectedTask Type: APTemplateTask__c We check against a specific task index Type: Integer The index(position) of the template task Returns Boolean  Is there a dependency for this task? doSave() Standalone save action so the redirects are different for Save vs Save and New First delete pending deletions, then upsert the template and its tasks, then update dependencies Signature private Boolean doSave() Returns Boolean  Do we have an error? getDefaultTaskRecordTypeId() Find user default recordtype Signature public Id getDefaultTaskRecordTypeId() Returns Id  The org default Task RecordTypeId See ActionPlansUtilities.getDefaultTaskRecordTypeId getErrorMsg() Getter method to return the error message from action plans utilities Signature public String getErrorMsg() Returns String  errorMsg See ActionPlanTemplateCreationController.errorMsg getHoursOption() Get the reminder time picklist options from the central utilities class Signature public List<SelectOption> getHoursOption() Returns List<SelectOption>  Picklist of reminder times See ActionPlansUtilities.getHoursOption getTaskPriorities() Generate picklist of Task Priorities Signature public List<SelectOption> getTaskPriorities() Returns List<SelectOption>  Picklist of Task.Priority See ActionPlansUtilities.getFieldOptions Author David Schach getTaskRTPicklistValues() Generate picklist of Task Record Types Signature public List<SelectOption> getTaskRTPicklistValues() Returns List<SelectOption>  A picklist of available Record Types See ActionPlansUtilities.getTaskRTPicklistValues getTaskTypes() Generate a picklist of Task Type Signature public List<SelectOption> getTaskTypes() Returns List<SelectOption>  Picklist of Task.Type See ActionPlansUtilities.getFieldOptions Author David Schach getTemplateSubjectItems() Call method getTemplateSubjectItems() Signature public List<SelectOption> getTemplateSubjectItems() Returns List<SelectOption>  the picklist of Task subjects getTemplateTasks() Get all tasks related to the Action Template. Signature public List<APTemplateTask__c> getTemplateTasks() Returns List<APTemplateTask__c>  ActionPlan Template Tasks getTemplateTaskSize() Return size of the APTTemplate Tasks List. Signature public Integer getTemplateTaskSize() Returns Integer  the number of template tasks getTemplateWrappers() Iterate over aptTasks and generate wrappers for display on the page Signature public List<ApTTaskWrapper> getTemplateWrappers() Returns List<ApTTaskWrapper>  All the template wrappers for display on the page See ActionPlanTemplateCreationController.aptTasks onLoad() Action on page load to ensure custom setting is created Signature public PageReference onLoad() Returns PageReference  null See ActionPlansUtilities.onPageLoad queryAPTTasks(templateId) Single query for ActionPlan Template Tasks Signature private List<APTemplateTask__c> queryAPTTasks(Id templateId) Parameters templateId Type: Id APTemplate__c  Id Returns List<APTemplateTask__c>  The related APTemplate Tasks Author David Schach removeTemplateTask() Remove this row from the Template Tasks(but do not commit to the database) Signature public void removeTemplateTask() saveAndNew() Save and go to New page for Save and New Signature public Pagereference saveAndNew() Returns PageReference  Page.ActionPlanTemplateCreation saveTemplate() Saves Action Plan Template and all tasks, then redirects to the AP template list. First check for pending templates for delete; in case that exists then delete those objects. Then insert or update the Action Plan Template pending to save and save tasks to the template and attach relation to Action Plan. Signature public PageReference saveTemplate() Returns PageReference  Page.ActionPlanTemplateDetail templateCycleDependent() Checks if Action Plans Tasks has cyclic dependency. Signature public Boolean templateCycleDependent() Returns Boolean  cyclicErrorExists ActionPlanTemplateCreationController.ApTTaskWrapper Inner Wrapper Class for Action Plan Template Tasks Signature public class ApTTaskWrapper Authors Matias Menafra  @date 08/08/2010, David Schach  @date 05/2021 ActionPlanTemplateCreationController.ApTTaskWrapper Properties Name Signature Description isLast public Boolean isLast Last Task position public Integer position Task position(order on the page) task public APTemplateTask__c task Action Plan Template Task in wrapper ActionPlanTemplateCreationController.ApTTaskWrapper Constructors ApTTaskWrapper(apTask, pos, apTTaskRTId) Constructor for ActionPlan Template Task Wrapper ApTTaskWrapper(apTask, pos, apTTaskRTId) Constructor for ActionPlan Template Task Wrapper Signature public ApTTaskWrapper(APTemplateTask__c apTask, Integer pos, Id apTTaskRTId) Parameters apTask Type: APTemplateTask__c Action Plan Template Task pos Type: Integer Position/Index apTTaskRTId Type: Id The RecordType of the related Task See ActionPlansUtilities"
    },
    {
        "title": "ActionPlanTemplateDetailController",
        "fileName": "ActionPlanTemplateDetailController.html",
        "text": "ActionPlanTemplateDetailController Signature public with sharing class ActionPlanTemplateDetailController Author David Schach Since 2022 ActionPlanTemplateDetailController Properties Name Signature Annotations Description actionPlanExportXMLId public Id actionPlanExportXMLId The Id of the Action Plan for Exporting. Shown on the Export page that shares this controller actionPlanTemplate private ActionPlanTemplate__c actionPlanTemplate @TestVisible canDisplayReminder public Boolean canDisplayReminder Does the user have reminders enabled? taskHasRecordType public Boolean taskHasRecordType Does the org use Task RecordType? ActionPlanTemplateDetailController Constructors ActionPlanTemplateDetailController(stdController) Constructor If we can obtain the Id from the page parameters then we search for that template and set the variable for that template. If we can't obtain the Id from the page parameters then we create a new template and obtain from the controller. ActionPlanTemplateDetailController(stdController) Constructor If we can obtain the Id from the page parameters then we search for that template and set the variable for that template. If we can't obtain the Id from the page parameters then we create a new template and obtain from the controller. Signature public ActionPlanTemplateDetailController(ApexPages.StandardController stdController) Parameters stdController Type: ApexPages.StandardController Standard Controller(Action Plan Template) See ActionPlansUtilities.getCanDisplayReminder ActionPlanTemplateDetailController Methods deleteTemplate() Delete the template exportTemplateToXMLDoc() Method exports the Action Plan template into a new XML document getCanShare() If we have no share object, we don't need to show a Share button Also validate user permission to share getCanTransfer() Does the user have permission to transfer? We query UserRecordAccess  to find out. getRecordTypeName() Convert Record Type Id to Record Type Name getSuccessMessage() Determine the export success message based on LEX vs Classic getTemplateTasks() Query Template Tasks onLoad() Action on page load to ensure custom setting is created deleteTemplate() Delete the template Signature public PageReference deleteTemplate() Returns PageReference  Action Plan Template home tab exportTemplateToXMLDoc() Method exports the Action Plan template into a new XML document Signature public void exportTemplateToXMLDoc() See ActionPlanTemplateExport getCanShare() If we have no share object, we don't need to show a Share button Also validate user permission to share Signature public Boolean getCanShare() Returns Boolean  Does the user have permission to share this Action Plan Template? See ActionPlansUtilities.canShareRecord Author David Schach getCanTransfer() Does the user have permission to transfer? We query UserRecordAccess  to find out. Signature public Boolean getCanTransfer() Returns Boolean  Does the user have permission to transfer this Action Plan Template? See ActionPlansUtilities.getCanTransfer Author David Schach getRecordTypeName() Convert Record Type Id to Record Type Name Signature public String getRecordTypeName() Returns String  Record Type Name getSuccessMessage() Determine the export success message based on LEX vs Classic Signature public String getSuccessMessage() Returns String  The success message See ActionPlansUtilities.getIsLex getTemplateTasks() Query Template Tasks Signature public List<APTemplateTask__c> getTemplateTasks() Returns List<APTemplateTask__c>  The Template Tasks onLoad() Action on page load to ensure custom setting is created Signature public PageReference onLoad() Returns PageReference  null(required for page actions method) See ActionPlansUtilities.onPageLoad"
    },
    {
        "title": "ActionPlanTemplateExport",
        "fileName": "ActionPlanTemplateExport.html",
        "text": "ActionPlanTemplateExport Helper class to do the work for creating XML for a given Action Plan Template Signature public without sharing class ActionPlanTemplateExport See ActionPlanTemplateDetailController.exportTemplateToXMLDoc Since 2011 ActionPlanTemplateExport Properties Name Signature Description fileOrDocumentId public Id fileOrDocumentId The File  or Document  Id for display on the Visualforce confirmation page templateId private String templateId The ActionPlanTemplate__c  to be exported ActionPlanTemplateExport Constructors ActionPlanTemplateExport(templateId) Constructor ActionPlanTemplateExport(templateId) Constructor Signature public ActionPlanTemplateExport(String templateId) Parameters templateId Type: String ActionPlanTemplate__c  Id ActionPlanTemplateExport Methods buildXmlString(target) Method to compile XML document for a given Action Plan Template and child tasks export() Method in charge of handling the export task related to a Action Plan Template saveToContent(name, xml) Method to save the XML file to a File(if the user is using Lightning Experience) saveToDocument(name, xml) Method to save document in personal folder for later retrievel writeElement(out, tag, content) Method used for sanitizing input for XML document buildXmlString(target) Method to compile XML document for a given Action Plan Template and child tasks Signature @TestVisible private String buildXmlString(ActionPlanTemplate__c target) Parameters target Type: ActionPlanTemplate__c Returns String  The XML export() Method in charge of handling the export task related to a Action Plan Template Signature public Id export() Returns ContentDocument  or Document  Id See ActionPlansUtilities.getIsLex Author David Schach saveToContent(name, xml) Method to save the XML file to a File(if the user is using Lightning Experience) Signature @TestVisible private Id saveToContent(String name, String xml) Parameters name Type: String File Name xml Type: String The XML of the exported template Returns Id  of the new ContentDocument Author David Schach saveToDocument(name, xml) Method to save document in personal folder for later retrievel Signature @TestVisible private Id saveToDocument(String name, String xml) Parameters name Type: String xml Type: String Returns Id  of the new Document Author David Schach writeElement(out, tag, content) Method used for sanitizing input for XML document Signature private void writeElement(Xmlstreamwriter out, String tag, String content) Parameters out Type: Xmlstreamwriter Xmlstreamwriter  the XML string so far tag Type: String String  XML Tag content Type: String String  XML content"
    },
    {
        "title": "ActionPlanTemplateImport",
        "fileName": "ActionPlanTemplateImport.html",
        "text": "ActionPlanTemplateImport Called from ActionPlanTemplateImportController - can probably be rolled into that class, but it's doing fine here. Signature public inherited sharing class ActionPlanTemplateImport See ActionPlanTemplateImportController Since 2022 Author David Schach ActionPlanTemplateImport Properties Name Signature importedTasks private Map<Id, APTemplateTask__c> importedTasks newTasks private Map<Id, APTemplateTask__c> newTasks ActionPlanTemplateImport Constructors ActionPlanTemplateImport() Controller Constructor ActionPlanTemplateImport() Controller Constructor Signature public ActionPlanTemplateImport() ActionPlanTemplateImport Methods getDecodedString(reader) Method for decoding strings from XML document importAPTemplate(xml) Handle importing of a Action Plan Template Object importAPTtasks(xml, apTemplateId) Handle importing of Action Plan Template Task Objects parseMetaData(reader) Parse metadata from XMl document parseTemplate(reader) Parse data from XMl document to create a Action Plan Template Object parseTemplateTask(reader, apTemplateId) Parse data from XMl document to create a Template Task Object processImportedDocument(document) Method in charge of retrieving and compiling the data from imported file, for then inserting into the system. readingMetaData(xml) Method for reading the meta data tag from xml document setupDependentTasks() Method in charge of re-building dependent tasks for imported Action Plans Template getDecodedString(reader) Method for decoding strings from XML document Signature private String getDecodedString(Xmlstreamreader reader) Parameters reader Type: Xmlstreamreader Part of the XML string Returns String importAPTemplate(xml) Handle importing of a Action Plan Template Object Signature private ActionPlanTemplate__c importAPTemplate(String xml) Parameters xml Type: String import file Returns ActionPlanTemplate__c  Action Plan Template importAPTtasks(xml, apTemplateId) Handle importing of Action Plan Template Task Objects Signature private void importAPTtasks(String xml, Id apTemplateId) Parameters xml Type: String import file apTemplateId Type: Id Action Plan Template Id parseMetaData(reader) Parse metadata from XMl document Signature private Boolean parseMetaData(Xmlstreamreader reader) Parameters reader Type: Xmlstreamreader Returns Boolean  correctMetaData Exceptions ImportException parseTemplate(reader) Parse data from XMl document to create a Action Plan Template Object Signature private ActionPlanTemplate__c parseTemplate(Xmlstreamreader reader) Parameters reader Type: Xmlstreamreader Returns ActionPlanTemplate__c  The created Action Plan Template parseTemplateTask(reader, apTemplateId) Parse data from XMl document to create a Template Task Object Signature private void parseTemplateTask(Xmlstreamreader reader, Id apTemplateId) Parameters reader Type: Xmlstreamreader XML reader apTemplateId Type: Id template Id processImportedDocument(document) Method in charge of retrieving and compiling the data from imported file, for then inserting into the system. Signature public String processImportedDocument(Attachment document) Parameters document Type: Attachment Attachment record Returns String  Action Plan Template Id Exceptions ImportException readingMetaData(xml) Method for reading the meta data tag from xml document Signature private void readingMetaData(String xml) Parameters xml Type: String String of import file Exceptions ImportException setupDependentTasks() Method in charge of re-building dependent tasks for imported Action Plans Template Signature private List<APTemplateTask__c> setupDependentTasks() Returns List<APTemplateTask__c>  updatedTasks ActionPlanTemplateImport.ImportException Signature public class ImportException extends Exception"
    },
    {
        "title": "ActionPlanTemplateImportController",
        "fileName": "ActionPlanTemplateImportController.html",
        "text": "ActionPlanTemplateImportController Controller for import page Signature public with sharing class ActionPlanTemplateImportController See ActionPlanTemplateImport Author David Schach Since 2022 ActionPlanTemplateImportController Properties Name Signature Description attachment public Attachment attachment The attachment to be used to hold imported xml ActionPlanTemplateImportController Constructors ActionPlanTemplateImportController() Controller Constructor initializes the attachment we will temporarily use to hold the imported XML ActionPlanTemplateImportController() Controller Constructor initializes the attachment we will temporarily use to hold the imported XML Signature public ActionPlanTemplateImportController() ActionPlanTemplateImportController Methods importTemplate() Action that initiates the Import process importTemplate() Action that initiates the Import process Signature public PageReference importTemplate() Returns PageReference  ActionPlanTemplateDetail See ActionPlanTemplateImport"
    },
    {
        "title": "ActionPlansBuilderUtilities",
        "fileName": "ActionPlansBuilderUtilities.html",
        "text": "ActionPlansBuilderUtilities Builder Utilities class Signature public inherited sharing class ActionPlansBuilderUtilities See ActionPlanCreateInvocable , ActionPlanCreationController , ActionPlansQueueableBuilder Authors Rodrigo Birriel , David Schach Since v3 ActionPlansBuilderUtilities Properties Name Signature Description allTasksToUpsert private List<Task> allTasksToUpsert A single list of all Tasks - we set the DMLOption to send an email notification when we add the Task to this list baseAPTaskList private List<APTask__c> baseAPTaskList mode private ApEditMode mode relActionPlans private List<ActionPlan__c> relActionPlans relAPTaskList private List<APTask__c> relAPTaskList relatedObjectName private String relatedObjectName relatedRecordIDs private Set<Id> relatedRecordIDs Enums Name Signature Values Description ApEditMode private enum ApEditMode MODE_EDIT_SINGLE, MODE_NEW Editing or creating an ActionPlan__c  record? ActionPlansBuilderUtilities Constructors ActionPlansBuilderUtilities(baseObj, aPTListparam, refType, oIdsLIst) Constructor ActionPlansBuilderUtilities(baseObj, aPTListparam, refType, oIdsLIst) Constructor Signature public ActionPlansBuilderUtilities(ActionPlan__c baseObj, List<APTask__c> aPTListparam, String refType, Set<Id> oIdsLIst) Parameters baseObj Type: ActionPlan__c ActionPlan object aPTListparam Type: List<APTask__c> Action Plan Task Template records refType Type: String Related object Name oIdsLIst Type: Set<Id> Parent IDs ActionPlansBuilderUtilities Methods generateActionPlans() Generate Action Plans from parameters passed to this class generateObjectFeeds(recIDs) Generate New FeedItems  for multiple Action Plans getAPTaskTemplateUser(ap, relObjOwners, apTaskUser) Read the Action Plan and see the custom setting to determine who should own the AP Tasks getPostObjectBody(recID, apName) Given a parentID and the name of an Action Plan, make the FeedItem  post body getRelatedRecordOwnerId(ap, relObjOwners) Given an Action Plan, looking in its relationship fields, find the owner of the related record from the map of records and owners retrieveOwnersDataRelatedObject(relatedRecordIDs) Retrieve the owner list from the related object. Exclude owners that are not users(that are queues) generateActionPlans() Generate Action Plans from parameters passed to this class Signature public Id generateActionPlans() Returns Id  of the first created ActionPlan__c Author David Schach generateObjectFeeds(recIDs) Generate New FeedItems  for multiple Action Plans Signature public static void generateObjectFeeds(Set<Id> recIDs) Parameters recIDs Type: Set<Id> Set of IDs of records for which we may make Chatter posts See ActionPlansUtilities.getRelatedSObjectDescribe , ActionPlansUtilities.getPostObjectBody getAPTaskTemplateUser(ap, relObjOwners, apTaskUser) Read the Action Plan and see the custom setting to determine who should own the AP Tasks Signature public static Id getAPTaskTemplateUser(ActionPlan__c ap, Map<Id, Id> relObjOwners, Id apTaskUser) Parameters ap Type: ActionPlan__c The ActionPlan__c  relObjOwners Type: Map<Id, Id> Map of Id  to record OwnerId  apTaskUser Type: Id The record user Id Returns Id  The APTask__c  assigned user See ActionPlansBuilderUtilities.getRelatedRecordOwnerId getPostObjectBody(recID, apName) Given a parentID and the name of an Action Plan, make the FeedItem  post body Signature public static String getPostObjectBody(Id recID, String apName) Parameters recID Type: Id Parent ID apName Type: String Action Plan Name Returns String  The FeedItem  Body Author David Schach getRelatedRecordOwnerId(ap, relObjOwners) Given an Action Plan, looking in its relationship fields, find the owner of the related record from the map of records and owners Signature public static Id getRelatedRecordOwnerId(ActionPlan__c ap, Map<Id, Id> relObjOwners) Parameters ap Type: ActionPlan__c ActionPlan__c  relObjOwners Type: Map<Id, Id> Map of related object Id  to OwnerId Returns Id  The related record OwnerId retrieveOwnersDataRelatedObject(relatedRecordIDs) Retrieve the owner list from the related object. Exclude owners that are not users(that are queues) Signature public static Map<Id, Id> retrieveOwnersDataRelatedObject(Set<Id> relatedRecordIDs) Parameters relatedRecordIDs Type: Set<Id> List of sobject record Ids Returns Map<Id, Id>  Map of record Id to Owner Id"
    },
    {
        "title": "ActionPlansCreateMultipleAPsExtension",
        "fileName": "ActionPlansCreateMultipleAPsExtension.html",
        "text": "ActionPlansCreateMultipleAPsExtension Visualforce extension to create multiple Action Plans(one per selected record) Invoked via a button on a list view Signature global with sharing class ActionPlansCreateMultipleAPsExtension Author David Schach Since 2022 ActionPlansCreateMultipleAPsExtension Properties Name Signature Description objIDs global String objIDs All the selected records from the list view stdSetCntrlr private ApexPages.StandardSetController stdSetCntrlr The standard set controller. Not much use besides allowing the page to show on a list view and letting us cancel the action with a system-generated redirect ActionPlansCreateMultipleAPsExtension Constructors ActionPlansCreateMultipleAPsExtension(stdSetController) Constructor ActionPlansCreateMultipleAPsExtension(stdSetController) Constructor Signature global ActionPlansCreateMultipleAPsExtension(ApexPages.StandardSetController stdSetController) Parameters stdSetController Type: ApexPages.StandardSetController Standard Set Controller - used only for Cancel standard action Author David Schach ActionPlansCreateMultipleAPsExtension Methods doRedirect() Go to the page that shows the ActionPlan creation screen to customize the plan for each selected record doRedirect() Go to the page that shows the ActionPlan creation screen to customize the plan for each selected record Signature global PageReference doRedirect() Returns PageReference  The Action Plan creation page Author David Schach"
    },
    {
        "title": "ActionPlansDeleteMultipleAPExtension",
        "fileName": "ActionPlansDeleteMultipleAPExtension.html",
        "text": "ActionPlansDeleteMultipleAPExtension Controller for page to mass-delete using a set controller. Validates using CanTheUser to ensure user permissions Signature public with sharing class ActionPlansDeleteMultipleAPExtension See {@link [Salesforce StackExchange](https://salesforce.stackexchange.com/a/4141/59)} , CanTheUser Authors Andrew Fawcett , David Schach Since 2022 ActionPlansDeleteMultipleAPExtension Properties Name Signature Description actionPlansToShow public List<ActionPlan__c> actionPlansToShow The Action Plan records to delete(after user confirmation) standardController private ApexPages.StandardSetController standardController ActionPlansDeleteMultipleAPExtension Constructors ActionPlansDeleteMultipleAPExtension(stdSetController) Extension Constructor for page showing Action Plans we want to delete ActionPlansDeleteMultipleAPExtension(stdSetController) Extension Constructor for page showing Action Plans we want to delete Signature public ActionPlansDeleteMultipleAPExtension(ApexPages.StandardSetController stdSetController) Parameters stdSetController Type: ApexPages.StandardSetController ActionPlan__c  standard controller Author David Schach ActionPlansDeleteMultipleAPExtension Methods deleteRecords() Page Redirect on delete deleteRecords() Page Redirect on delete Signature public PageReference deleteRecords() Returns PageReference  with success/error message Author David Schach"
    },
    {
        "title": "ActionPlansPostInstallScript",
        "fileName": "ActionPlansPostInstallScript.html",
        "text": "ActionPlansPostInstallScript Install sample data on first installation Signature global class ActionPlansPostInstallScript implements InstallHandler Since 2022 Author David Schach ActionPlansPostInstallScript Methods onFirstInstall() Automated actions on first install of package Create custom settings - in future, use configuration page? Create sample Action Plan Template onInstall(context) Script to run when the managed package is installed or upgraded onPush() Reserved for future use onUpgrade() Reserved for future use onFirstInstall() Automated actions on first install of package Create custom settings - in future, use configuration page? Create sample Action Plan Template Signature private void onFirstInstall() Author David Schach onInstall(context) Script to run when the managed package is installed or upgraded Signature global void onInstall(InstallContext context) Parameters context Type: InstallContext Is this a new install, an upgrade, or a push(from the developer)? Author David Schach onPush() Reserved for future use Signature private void onPush() Author David Schach onUpgrade() Reserved for future use Signature private void onUpgrade() Author David Schach"
    },
    {
        "title": "ActionPlansQueueableBuilder",
        "fileName": "ActionPlansQueueableBuilder.html",
        "text": "ActionPlansQueueableBuilder Queueable Apex for creating Action Plans Signature public inherited sharing class ActionPlansQueueableBuilder implements Queueable See ActionPlansBuilderUtilities Author David Schach Since 2022 ActionPlansQueueableBuilder Properties Name Signature builtUtil private ActionPlansBuilderUtilities builtUtil ActionPlansQueueableBuilder Constructors ActionPlansQueueableBuilder(baseObj, aPTList, refType, oIdsSet) Constructor ActionPlansQueueableBuilder(baseObj, aPTList, refType, oIdsSet) Constructor Signature public ActionPlansQueueableBuilder(ActionPlan__c baseObj, List<APTask__c> aPTList, String refType, Set<Id> oIdsSet) Parameters baseObj Type: ActionPlan__c ActionPlan base aPTList Type: List<APTask__c> List of the task templates refType Type: String The related object name oIdsSet Type: Set<Id> IDs of related parents ActionPlansQueueableBuilder Methods execute(qc) Instead of a batch, we use queuable because it's more simple than Batch Apex execute(qc) Instead of a batch, we use queuable because it's more simple than Batch Apex Signature public void execute(QueueableContext qc) Parameters qc Type: QueueableContext QueueableContext (note: not BatchableContext  which is in Batch Apex) See ActionPlansBuilderUtilities.generateActionPlans"
    },
    {
        "title": "ActionPlansRedirect",
        "fileName": "ActionPlansRedirect.html",
        "text": "ActionPlansRedirect Visualforce controller for a redirect page to allow override of object actions Signature public with sharing class ActionPlansRedirect Author David Schach Since 2022 ActionPlansRedirect Properties Name Signature Description actionPlan private ActionPlan__c actionPlan actionPlanTask private APTask__c actionPlanTask actionPlanTemplate private ActionPlanTemplate__c actionPlanTemplate actionPlanTemplateTask private APTemplateTask__c actionPlanTemplateTask objName public String objName Related object name so this page can work for multiple SObject Types parentId private Id parentId recordId private Id recordId ActionPlansRedirect Constructors ActionPlansRedirect(controller) Extension Constructor Gets the SObjectType and returns the correct object to display the correct values ActionPlansRedirect(controller) Extension Constructor Gets the SObjectType and returns the correct object to display the correct values Signature public ActionPlansRedirect(ApexPages.StandardController controller) Parameters controller Type: ApexPages.StandardController Standard Controller. Accepts any SObject ActionPlansRedirect Methods cancel() Go back to view the relevant record redirect() Show the view page for either the Action Plan or the Action Plan Template save() Change the relevant record owner, and then call cancel so we go back to the record page cancel() Go back to view the relevant record Signature public PageReference cancel() Returns PageReference  for the parent record redirect() Show the view page for either the Action Plan or the Action Plan Template Signature public Pagereference redirect() Returns PageReference  by recordId('/' + parentId) save() Change the relevant record owner, and then call cancel so we go back to the record page Signature public PageReference save() Returns ActionPlansRedirect.cancel"
    },
    {
        "title": "ActionPlansSectionHeaderController",
        "fileName": "ActionPlansSectionHeaderController.html",
        "text": "ActionPlansSectionHeaderController Controller for the Section Header at the top of every VF page. Determines the icon for the page object Code adapted from StackExchange Signature public inherited sharing class ActionPlansSectionHeaderController See https://salesforce.stackexchange.com/questions/116688/lightning-get-sobject-tab-icon Since 2022 Authors David Schach , Cricketlang Example <div class=\"slds-media__figure\"> <span class=\"slds-icon_container {!ObjectIconInfo['iconStyle']}\" title=\"{!$ObjectType['sObjType'].label}\"> <apex:image url=\"{!ObjectIconInfo['iconURL']}\" styleClass=\"slds-icon slds-page-header__icon\" html-aria-hidden=\"true\" /> <span class=\"slds-assistive-text\">{!$ObjectType[sObjType].label}</span> </span> </div> ActionPlansSectionHeaderController Properties Name Signature Description objectName public String objectName The object name for the Section Header orgObject private String orgObject String to hold actual used object in case of namespaced app ActionPlansSectionHeaderController Methods getIsCustom() Is this a custom object? getObjectIconInfo() Map of Icon attribute and value getRecords(queryText) Main code for lightning lookup. Included in this class because we use this as the controller for our lookups  the code is duplicated in AciontPlanCreationController because there is a lookup directly in that page(for now) isCustom(sObjectName) Given an object name, return if it is a custom object retrieveIconForObject(sObjectName) Explores the schema of the soject passed in and finds lightning icon style and image url for sObject If nothing is found, defaults to the custom icon Code adapted from https://salesforce.stackexchange.com/questions/116688/lightning-get-sobject-tab-icon Thanks to https://salesforce.stackexchange.com/users/12582/cricketlang getIsCustom() Is this a custom object? Signature public Boolean getIsCustom() Returns Boolean  true if custom object See ActionPlansSectionHeaderController.isCustom getObjectIconInfo() Map of Icon attribute and value Signature public Map<String, String> getObjectIconInfo() Returns Map<String, String>  Key-value pairs\\ See ActionPlansSectionHeaderController.retrieveIconForObject getRecords(queryText) Main code for lightning lookup. Included in this class because we use this as the controller for our lookups  the code is duplicated in AciontPlanCreationController because there is a lookup directly in that page(for now) Signature @RemoteAction public static List<SObject> getRecords(String queryText) Parameters queryText Type: String SOQL query to return records for the lookup Returns List<SObject>  Returned records See ActionPlanCreationController isCustom(sObjectName) Given an object name, return if it is a custom object Signature private Boolean isCustom(String sObjectName) Parameters sObjectName Type: String The name of the SObject Returns Boolean  Is this object a custom object? retrieveIconForObject(sObjectName) Explores the schema of the soject passed in and finds lightning icon style and image url for sObject If nothing is found, defaults to the custom icon Code adapted from https://salesforce.stackexchange.com/questions/116688/lightning-get-sobject-tab-icon Thanks to https://salesforce.stackexchange.com/users/12582/cricketlang Signature private Map<String, String> retrieveIconForObject(String sObjectName) Parameters sObjectName Type: String The sObject to find the icon for Returns Map<String, String>  Map of properties about the icon to be consumed by the front end. Returns values for keys: iconStyle,iconURL"
    },
    {
        "title": "ActionPlansTaskTriggerUtilities",
        "fileName": "ActionPlansTaskTriggerUtilities.html",
        "text": "ActionPlansTaskTriggerUtilities Set to WITHOUT sharing because this is only called from a trigger handler Signature public without sharing class ActionPlansTaskTriggerUtilities Since 2022 Author David Schach ActionPlansTaskTriggerUtilities Properties Name Signature dependentApts private static List<APTask__c> dependentApts tasksSendEmail private static List<Task> tasksSendEmail tasksSendNoEmail private static List<Task> tasksSendNoEmail ActionPlansTaskTriggerUtilities Methods actionsOnTaskBeforeDelete(cTasks) Before deleting an APTemplate task, initialize the functionalities to create all dependent Tasks and reset index deleteAPTasks(aPTasks) Delete Action Plan Tasks futureDeleteTasks(taskIDs) Delete Action Plan Tasks' related Tasks generateDependentTasksAndReset(apTasks, taskIndexToDelete) This method reviews the task list FOR A SINGLE ACTION PLAN and removes the one with TaskIndex__c  field matching taskIndexToDelete. Rearranges the dependencies between tasks. initDependentTaskWork(taskIdMap) Initialize the functionalities to create all dependent Tasks populateUpdateApttsList(dependentAptList) Cycle through list of dependent Action Plans Template Task and create tasks queryDependentAPTaskTemplates(closedTasks) Get list of dependent Action Plan Template Tasks updateAPTasksStatus(apTasksMap) Update APTasks status as passed into method to match Task Status upsertDependentAPTasks(dependentAptList) Cycle through list of dependent Action Plans Tasks and create Task  records actionsOnTaskBeforeDelete(cTasks) Before deleting an APTemplate task, initialize the functionalities to create all dependent Tasks and reset index Signature public static void actionsOnTaskBeforeDelete(Set<Id> cTasks) Parameters cTasks Type: Set<Id> Set of Task template IDs to be deleted See ActionPlansTaskTriggerUtilities.generateDependentTasksAndReset deleteAPTasks(aPTasks) Delete Action Plan Tasks Signature public static void deleteAPTasks(Set<Id> aPTasks) Parameters aPTasks Type: Set<Id> Ids of APTasks to delete futureDeleteTasks(taskIDs) Delete Action Plan Tasks' related Tasks Signature @future public static void futureDeleteTasks(Set<Id> taskIDs) Parameters taskIDs Type: Set<Id> Task  IDs to delete generateDependentTasksAndReset(apTasks, taskIndexToDelete) This method reviews the task list FOR A SINGLE ACTION PLAN and removes the one with TaskIndex__c  field matching taskIndexToDelete. Rearranges the dependencies between tasks. Signature private static void generateDependentTasksAndReset(List<APTask__c> apTasks, Decimal taskIndexToDelete) Parameters apTasks Type: List<APTask__c> All the Action Plan Tasks for the Action Plan taskIndexToDelete Type: Decimal The index of the task we are trying to delete initDependentTaskWork(taskIdMap) Initialize the functionalities to create all dependent Tasks Signature public static void initDependentTaskWork(Map<Id, String> taskIdMap) Parameters taskIdMap Type: Map<Id, String> Map of Tasks by Id populateUpdateApttsList(dependentAptList) Cycle through list of dependent Action Plans Template Task and create tasks Signature private static List<APTask__c> populateUpdateApttsList(List<APTask__c> dependentAptList) Parameters dependentAptList Type: List<APTask__c> Dependent APTasks(with value in Controller__c ) Returns List<APTask__c>  the list of dependent Action Plan Tasks we just updated queryDependentAPTaskTemplates(closedTasks) Get list of dependent Action Plan Template Tasks Signature private static List<APTask__c> queryDependentAPTaskTemplates(Set<Id> closedTasks) updateAPTasksStatus(apTasksMap) Update APTasks status as passed into method to match Task Status Signature public static void updateAPTasksStatus(Map<Id, String> apTasksMap) Parameters apTasksMap Type: Map<Id, String> Map of ActionPlan Tasks by Id to Status upsertDependentAPTasks(dependentAptList) Cycle through list of dependent Action Plans Tasks and create Task  records Signature private static void upsertDependentAPTasks(List<APTask__c> dependentAptList) Parameters dependentAptList Type: List<APTask__c> The APTasks we check for dependencies before making Task  records"
    },
    {
        "title": "ActionPlansTestUtilities",
        "fileName": "ActionPlansTestUtilities.html",
        "text": "ActionPlansTestUtilities Utilities for Tests Signature public inherited sharing class ActionPlansTestUtilities Author David Schach Since 2022 2023 Begin exposing methods to cover custom objects ActionPlansTestUtilities Properties Name Signature Annotations Description forceError public static Boolean forceError Used in testing - we force an Error during tests forceHasRecordType public static Boolean forceHasRecordType Used during testing to \"fool\" the org into thinking that it has Task record types standardObjects private static Set<String> standardObjects @TestVisible Standard objects included in this package ActionPlansTestUtilities Methods assignAPPermissionSets(testUserId, allOrNone) Assign a permissionSet to a user(via UserId) createAdminUser() Create an ActionPlans Admin user, plus all other permissions, for full ability to access certain tests. createNewAccount(insertRecord) Creates a new Account SObject With option to insert or just return the record createNewAccount() Creates a new Account SObject Inserts before returning createNewActionPlan(relatedObject, numTasks, customObjectId) Create Action Plan and APTaskss createNewActionPlanTask(actionPlan, days, userId, category, priority) Create Action Plan Task createNewActionPlanTemplate(numTasks) Create Action Plan Template and Action Plan Template Tasks createNewActionPlanTemplateTask(apTemplate, days, userId, category, priority) Create Action Plan Template Task createNewCampaign(insertRecord) Creates a new Campaign SObject createNewCampaign() Creates a new Campaign SObject Inserts before returning createNewCase(insertRecord) Creates a new Case SObject createNewCase() Creates a new Case Object Inserts before returning createNewContact(insertRecord) Creates a new Contact Object createNewContact() Creates a new Contact Object Inserts before returning createNewContract(insertRecord) Creates a new Contract Object createNewContract() Creates a new Contract Object Inserts before returning createNewLead(insertRecord) Creates a new Lead Object createNewLead() Creates a new Lead Object Inserts before returning createNewOpportunity(insertRecord) Creates a new Opportunity Object createNewOpportunity() Creates a new Opportunity Object Inserts before returning createRandomWord() Random words are required for testing, as you will likely run into any word I can insert during a test class and produce false test results. createRandomWord(prefix) Make a random String  with a specific prefix and a random Integer createTestUser() A random user is useful for testing in order to be sure that you are able to see data across posts regardless of follow status. If we find a profile, INSERT the user and return it. If we find no profile, return null;  A Permission Set would still be required createTestUser(p) Creates a new User with a specific profile getCompleted(actionPlanId) Retrieves number of completed tasks(that have an activity date) getNonDefaultAvailableTaskRecordType() Find a non-default Task Record Type assignAPPermissionSets(testUserId, allOrNone) Assign a permissionSet to a user(via UserId) Signature public List<PermissionSetAssignment> assignAPPermissionSets(Id testUserId, Boolean allOrNone) Parameters testUserId Type: Id The User ID allOrNone Type: Boolean Insert allOrNone, or allow an insert of only successful assingments, failing silently Returns List<PermissionSetAssignment>  The list of PermissionSetAssignment  records Author David Schach createAdminUser() Create an ActionPlans Admin user, plus all other permissions, for full ability to access certain tests. Signature public User createAdminUser() Returns User  an admin user with all Action Plans permission sets See ActionPlansTestUtilities.createTestUser , ActionPlansTestUtilities.assignAPPermissionSets createNewAccount(insertRecord) Creates a new Account SObject With option to insert or just return the record Signature public Account createNewAccount(Boolean insertRecord) Parameters insertRecord Type: Boolean Insert the record before returning it? Returns new Account createNewAccount() Creates a new Account SObject Inserts before returning Signature public Account createNewAccount() Returns inserted Account createNewActionPlan(relatedObject, numTasks, customObjectId) Create Action Plan and APTaskss Signature public ActionPlan__c createNewActionPlan(String relatedObject, Integer numTasks, Id customObjectId) Parameters relatedObject Type: String The Related Object(included field) for the Action Plan numTasks Type: Integer How many tasks to create for the ActionPlan customObjectId Type: Id For a Custom Object, pass in the Id of the created record so we don't have to do that here Returns new ActionPlan__c See ActionPlansTestUtilities.createNewActionPlanTask Example ActionPlansTestUtilities testUtil = new ActionPlansTestUtilities(); ActionPlan__c actionPlan = testUtil.createNewActionPlan('account', 3, null); or ActionPlan__c actionPlan = testUtil.createNewActionPlan('customObject__c', 3, '02a000000000000000'); createNewActionPlanTask(actionPlan, days, userId, category, priority) Create Action Plan Task Signature public APTask__c createNewActionPlanTask(ActionPlan__c actionPlan, Integer days, Id userId, String category, String priority) Parameters actionPlan Type: ActionPlan__c The ActionPlan__c  object days Type: Integer Days from actionPlan Start Date to schedule the task userId Type: Id The assigned owner Id category Type: String Task Type priority Type: String Task Priority Returns APTask__c  The created APTask__c  record Author David Schach createNewActionPlanTemplate(numTasks) Create Action Plan Template and Action Plan Template Tasks Signature public ActionPlanTemplate__c createNewActionPlanTemplate(Integer numTasks) Parameters numTasks Type: Integer Number of tasks to create Returns ActionPlanTemplate__c  Action Plan Template See ActionPlansTestUtilities.createNewActionPlanTemplateTask Author David Schach createNewActionPlanTemplateTask(apTemplate, days, userId, category, priority) Create Action Plan Template Task Signature public APTemplateTask__c createNewActionPlanTemplateTask(ActionPlanTemplate__c apTemplate, Integer days, Id userId, String category, String priority) Parameters apTemplate Type: ActionPlanTemplate__c The parent ActionPlanTemplate__c object days Type: Integer Days from now to start Action Plan userId Type: Id The assigned user for each created task category Type: String Task Category priority Type: String Task Priority Returns APTemplateTask__c  The new Action Plan Template Task Template Author David Schach createNewCampaign(insertRecord) Creates a new Campaign SObject Signature public Campaign createNewCampaign(Boolean insertRecord) Parameters insertRecord Type: Boolean Insert the record before returning it? Returns new Campaign See ActionPlansTestUtilities.createNewCampaign createNewCampaign() Creates a new Campaign SObject Inserts before returning Signature public Campaign createNewCampaign() Returns inserted Campaign See ActionPlansTestUtilities.createNewCampaign createNewCase(insertRecord) Creates a new Case SObject Signature public Case createNewCase(Boolean insertRecord) Parameters insertRecord Type: Boolean Insert the record before returning it? Returns new Case createNewCase() Creates a new Case Object Inserts before returning Signature public Case createNewCase() Returns inserted Case createNewContact(insertRecord) Creates a new Contact Object Signature public Contact createNewContact(Boolean insertRecord) Parameters insertRecord Type: Boolean Insert the record before returning it? Returns new Contact createNewContact() Creates a new Contact Object Inserts before returning Signature public Contact createNewContact() Returns inserted Contact createNewContract(insertRecord) Creates a new Contract Object Signature public Contract createNewContract(Boolean insertRecord) Parameters insertRecord Type: Boolean Insert the record before returning it? Returns inserted Contract createNewContract() Creates a new Contract Object Inserts before returning Signature public Contract createNewContract() Returns inserted Contract createNewLead(insertRecord) Creates a new Lead Object Signature public Lead createNewLead(Boolean insertRecord) Parameters insertRecord Type: Boolean Insert the record before returning it? Returns new Lead createNewLead() Creates a new Lead Object Inserts before returning Signature public Lead createNewLead() Returns inserted Lead createNewOpportunity(insertRecord) Creates a new Opportunity Object Signature public Opportunity createNewOpportunity(Boolean insertRecord) Parameters insertRecord Type: Boolean Insert the record before returning it? Returns new Opportunity See ActionPlansTestUtilities.createNewOpportunity createNewOpportunity() Creates a new Opportunity Object Inserts before returning Signature public Opportunity createNewOpportunity() Returns inserted Opportunity See ActionPlansTestUtilities.createNewOpportunity createRandomWord() Random words are required for testing, as you will likely run into any word I can insert during a test class and produce false test results. Signature public String createRandomWord() Returns A random word createRandomWord(prefix) Make a random String  with a specific prefix and a random Integer Signature public String createRandomWord(String prefix) Parameters prefix Type: String The prefix Returns String  The random word Example createRandomWord('test'); test123456 createTestUser() A random user is useful for testing in order to be sure that you are able to see data across posts regardless of follow status. If we find a profile, INSERT the user and return it. If we find no profile, return null;  A Permission Set would still be required Signature public User createTestUser() Returns User  A newly-created User with Modify All Data createTestUser(p) Creates a new User with a specific profile Signature public User createTestUser(Profile p) Parameters p Type: Profile Profile(not the Id) Returns User  Testuser getCompleted(actionPlanId) Retrieves number of completed tasks(that have an activity date) Signature @testVisible private static Integer getCompleted(Id actionPlanId) Parameters actionPlanId Type: Id Id of Action Plan so we can query closed/completed Tasks Returns Integer  Count of completed tasks for this Action Plan getNonDefaultAvailableTaskRecordType() Find a non-default Task Record Type Signature @testVisible private static Id getNonDefaultAvailableTaskRecordType() Returns Id  The Id  of a non-default Task  Record Type for the running user Author David Schach"
    },
    {
        "title": "ActionPlansTriggerHandlers",
        "fileName": "ActionPlansTriggerHandlers.html",
        "text": "ActionPlansTriggerHandlers Trigger Handler class to manage all triggers. Methods for managed objects are here, as well as a method that any other object can use to enable it to be linked to Action Plans. Signature global without sharing class ActionPlansTriggerHandlers Author David Schach Since 2022 ActionPlansTriggerHandlers Properties Name Signature Description bypassTaskTrigger private static Boolean bypassTaskTrigger Use only when we want to delete a Task while preserving the APTask(such as when making an APTask newly-dependent on another) Unused currently, but may be used in future version ActionPlansTriggerHandlers Methods actionPlansSObjectTriggerHandler(sObjectName) Global so that if in managed package, this method is the only one available actionPlansSObjectTriggerHandler(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent, sObjectName) Handle SObjects with related Action Plans when those sObject records are deleted and undeleted allowChangeParentStatus(apTaskTemplateIds) Validates if the given tasks can change status to in progress or completed. If the task depends on another that is open, returns false This bulkified method avoids SOQL queries in a loop deleteActionPlans(relActionPlansIds) Given actionplanIDs, delete these Action Plans AND their open Tasks fillRelatedRecordFields(newRecords) When inserting or updating Action Plan records, fill the text parent object Related Object  and parent record  Related Record  fields forceSynchronous() Simple method to check if we are asynchronous already futureDeleteActionPlans(relActionPlansIds) Given actionplanIDs, delete these Action Plans AND their open Tasks in future context getRelationshipName(recordId) Though the object name should match the field name, we get the name of the related object triggerhandlerActionPlan(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent) Actions to take on ActionPlan DML triggerhandlerActionPlanAccount(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent) Handle Account-related Action Plans on delete and undelete(of the Account) triggerhandlerActionPlanLead(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent) Handle ActionPlans related to Leads after conversion triggerhandlerActionPlanTask(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent) Handle ActionPlan Tasks triggerhandlerActionPlanTemplate(newRecords, oldRecords, oldRecordsMap, triggerEvent) Handle ActionPlan Templates triggerhandlerActionPlanTemplateTask(newRecords, oldRecords, oldRecordsMap, triggerEvent) Handle Action Plan Template Tasks triggerhandlerTask(newRecords, oldRecords, triggerEvent) Trigger handler for Task records when they are inserted, updated, or deleted validateActionPlans(actionPlans) Validate that 1 and only 1 custom reference field is filled actionPlansSObjectTriggerHandler(sObjectName) Global so that if in managed package, this method is the only one available Signature global static void actionPlansSObjectTriggerHandler(String sObjectName) Parameters sObjectName Type: String the name of the sObject See ActionPlansTriggerHandlers.actionPlansSObjectTriggerHandler Author David Schach actionPlansSObjectTriggerHandler(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent, sObjectName) Handle SObjects with related Action Plans when those sObject records are deleted and undeleted Signature public static void actionPlansSObjectTriggerHandler(List<SObject> newRecords, List<SObject> oldRecords, Map<Id, SObject> newRecordsMap, Map<Id, SObject> oldRecordsMap, System.TriggerOperation triggerEvent, String sObjectName) Parameters newRecords Type: List<SObject> Trigger.new oldRecords Type: List<SObject> Trigger.old newRecordsMap Type: Map<Id, SObject> Trigger.newMap oldRecordsMap Type: Map<Id, SObject> Trigger.oldMap triggerEvent Type: System.TriggerOperation Trigger context sObjectName Type: String the name of the SObject See ActionPlansTriggerHandlers.actionPlansSObjectTriggerHandler Author David Schach allowChangeParentStatus(apTaskTemplateIds) Validates if the given tasks can change status to in progress or completed. If the task depends on another that is open, returns false This bulkified method avoids SOQL queries in a loop Signature private static Map<Id, Boolean> allowChangeParentStatus(Set<Id> apTaskTemplateIds) Parameters apTaskTemplateIds Type: Set<Id> bulkified set of task IDs to consider Returns Map<Id, Boolean>  Is each APTask dependent on another task and is in an open status? deleteActionPlans(relActionPlansIds) Given actionplanIDs, delete these Action Plans AND their open Tasks Signature private static void deleteActionPlans(Set<Id> relActionPlansIds) Parameters relActionPlansIds Type: Set<Id> ActionPlan__c  IDs Author David Schach fillRelatedRecordFields(newRecords) When inserting or updating Action Plan records, fill the text parent object Related Object  and parent record  Related Record  fields Signature private static void fillRelatedRecordFields(List<ActionPlan__c> newRecords) Parameters newRecords Type: List<ActionPlan__c> Trigger.new Author David Schach forceSynchronous() Simple method to check if we are asynchronous already Signature private static Boolean forceSynchronous() Returns Boolean  Are we in an asynchronous state(so can't call future methods)? Author David Schach futureDeleteActionPlans(relActionPlansIds) Given actionplanIDs, delete these Action Plans AND their open Tasks in future context Signature @future private static void futureDeleteActionPlans(Set<Id> relActionPlansIds) Parameters relActionPlansIds Type: Set<Id> ActionPlan__c  IDs See ActionPlanTriggerHandlers.deleteActionPlans Author David Schach getRelationshipName(recordId) Though the object name should match the field name, we get the name of the related object Signature private static String getRelationshipName(Id recordId) Parameters recordId Type: Id The related record Id Returns The name of the filled Relationship field object name triggerhandlerActionPlan(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent) Actions to take on ActionPlan DML Signature public static void triggerhandlerActionPlan(List<ActionPlan__c> newRecords, List<ActionPlan__c> oldRecords, Map<Id, ActionPlan__c> newRecordsMap, Map<Id, ActionPlan__c> oldRecordsMap, System.TriggerOperation triggerEvent) Parameters newRecords Type: List<ActionPlan__c> Trigger.new oldRecords Type: List<ActionPlan__c> Trigger.old newRecordsMap Type: Map<Id, ActionPlan__c> Trigger.newMap oldRecordsMap Type: Map<Id, ActionPlan__c> Trigger.oldMap triggerEvent Type: System.TriggerOperation Trigger context See ActionPlansTriggerHandlers.fillRelatedRecordFields , ActionPlansTriggerHandlers.validateActionPlans , ActionPlansTaskTriggerUtilities.deleteTasks Author David Schach triggerhandlerActionPlanAccount(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent) Handle Account-related Action Plans on delete and undelete(of the Account) Signature public static void triggerhandlerActionPlanAccount(List<Account> newRecords, List<Account> oldRecords, Map<Id, Account> newRecordsMap, Map<Id, Account> oldRecordsMap, System.TriggerOperation triggerEvent) Parameters newRecords Type: List<Account> Trigger.new oldRecords Type: List<Account> Trigger.old newRecordsMap Type: Map<Id, Account> Trigger.newMap oldRecordsMap Type: Map<Id, Account> Trigger.oldMap triggerEvent Type: System.TriggerOperation Trigger context Author David Schach triggerhandlerActionPlanLead(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent) Handle ActionPlans related to Leads after conversion Signature public static void triggerhandlerActionPlanLead(\t\tList<Lead> newRecords,\t\tList<Lead> oldRecords,\t\tMap<Id, Lead> newRecordsMap,\t\tMap<Id, Lead> oldRecordsMap,\t\tSystem.TriggerOperation triggerEvent\t) Parameters newRecords Type: \t\tList<Lead> Trigger.new oldRecords    Trigger.old newRecordsMap Type: Lead> Trigger.newMap oldRecordsMap Type: Lead> Trigger.oldMap triggerEvent  Trigger context Author David Schach triggerhandlerActionPlanTask(newRecords, oldRecords, newRecordsMap, oldRecordsMap, triggerEvent) Handle ActionPlan Tasks Signature public static void triggerhandlerActionPlanTask(List<APTask__c> newRecords, List<APTask__c> oldRecords,\tMap<Id, APTask__c> newRecordsMap,Map<Id, APTask__c> oldRecordsMap, System.TriggerOperation triggerEvent) Parameters newRecords Type: List<APTask__c> Trigger.new oldRecords Type: List<APTask__c> Trigger.old newRecordsMap Type: APTask__c> Trigger.newMap oldRecordsMap Type: APTask__c> Trigger.oldMap triggerEvent Type: System.TriggerOperation Trigger context Author David Schach triggerhandlerActionPlanTemplate(newRecords, oldRecords, oldRecordsMap, triggerEvent) Handle ActionPlan Templates Signature public static void triggerhandlerActionPlanTemplate(List<ActionPlanTemplate__c> newRecords, List<ActionPlanTemplate__c> oldRecords, Map<Id, ActionPlanTemplate__c> oldRecordsMap, System.TriggerOperation triggerEvent) Parameters newRecords Type: List<ActionPlanTemplate__c> Trigger.new oldRecords Type: List<ActionPlanTemplate__c> Trigger.old oldRecordsMap Type: Map<Id, ActionPlanTemplate__c> Trigger.oldMap triggerEvent Type: System.TriggerOperation Trigger context Author David Schach triggerhandlerActionPlanTemplateTask(newRecords, oldRecords, oldRecordsMap, triggerEvent) Handle Action Plan Template Tasks Signature public static void triggerhandlerActionPlanTemplateTask(List<APTemplateTask__c> newRecords, List<APTemplateTask__c> oldRecords, Map<Id, APTemplateTask__c> oldRecordsMap, System.TriggerOperation triggerEvent) Parameters newRecords Type: List<APTemplateTask__c> Trigger.new oldRecords Type: List<APTemplateTask__c> Trigger.old oldRecordsMap Type: Map<Id, APTemplateTask__c> Trigger.oldMap triggerEvent Type: System.TriggerOperation Trigger context Author David Schach triggerhandlerTask(newRecords, oldRecords, triggerEvent) Trigger handler for Task records when they are inserted, updated, or deleted Signature public static void triggerhandlerTask(List<Task> newRecords, List<Task> oldRecords, System.TriggerOperation triggerEvent) Parameters newRecords Type: List<Task> Trigger.new oldRecords Type: List<Task> Trigger.old triggerEvent Type: System.TriggerOperation Trigger context See ActionPlansTaskTriggerUtilities Author David Schach validateActionPlans(actionPlans) Validate that 1 and only 1 custom reference field is filled Signature private static void validateActionPlans(List<ActionPlan__c> actionPlans) Parameters actionPlans Type: List<ActionPlan__c> Trigger records to validate See ActionPlansUtilities.getCustomRelationshipFields Author David Schach"
    },
    {
        "title": "ActionPlansUtilities",
        "fileName": "ActionPlansUtilities.html",
        "text": "ActionPlansUtilities Utilities class - mostly describe methods and constants Signature public without sharing class ActionPlansUtilities Since 2022 Author David Schach ActionPlansUtilities Properties Name Signature Description apCustomRelationshipFields private static List<String> apCustomRelationshipFields Memoized list of Action Plan custom relationship fields apSettings private static Action_Plans_Settings__c apSettings Memoized Action_Plans_Settings__c record(organization or instance) canDisplayReminder private static Boolean canDisplayReminder checkReminderByDefault private static Boolean checkReminderByDefault closedTaskStatuses private static Set<String> closedTaskStatuses Memoized closed Task statuses dayOfWeekEnglish private static Map<Integer, String> dayOfWeekEnglish Map of day of week(as number) to English day defaultMinutesForReminderTime private static String defaultMinutesForReminderTime MASTER_RECORD_TYPE_ID public static final Id MASTER_RECORD_TYPE_ID The standard Master RecordType  Id MAX_APTASKS public static final Integer MAX_APTASKS Max number of APTasks per Action Plan MAX_APTODELETE public static final Integer MAX_APTODELETE Max number of Action Plans that can be deleted from list namespacePrefix public static String namespacePrefix Check if we are in a managed package - if so, return the namespace prefix openTaskStatuses private static Set<String> openTaskStatuses Memoized open Task statuses prefixToDescribe private static Map<String, Schema.DescribeSObjectResult> prefixToDescribe Memoize objects as we describe them, to save on calls recordIdToRecordName private static Map<Id, String> recordIdToRecordName Memoize record IDs so we don't have to keep iterating over them if we already have them taskPriorityDefaultValue private static String taskPriorityDefaultValue Describe Task.Priority  only once taskRecordTypePriorityDefaultValues private static Map<Id, String> taskRecordTypePriorityDefaultValues Memoized map of RecordTypeId  to default Task Priority taskRecordTypes private static List<SObject> taskRecordTypes Queried list of RecordType records. Kept as SObject in case the org does not use Task Record Types taskRecordTypeStatusDefaultValues private static Map<Id, String> taskRecordTypeStatusDefaultValues Memoized map of RecordTypeId  to default Task Status taskRecordTypeTypeDefaultValues private static Map<Id, String> taskRecordTypeTypeDefaultValues Memoized map of RecordTypeId  to default Task Type taskRTs private static List<SelectOption> taskRTs Memoized picklist of Task  Record Types taskStatusDefaultValue private static String taskStatusDefaultValue Describe Task.Status  only once taskTypeDefaultValue private static String taskTypeDefaultValue Describe Task.Type  only once taskUsesRecordTypes public static Boolean taskUsesRecordTypes Allows us to force the environment variable checking if Task has a Record Type for testing(forcing NO record type,). Increases code coverage. ActionPlansUtilities Methods actionPlanSubjectToName(subject) Single method to shorten long strings to the hard-coded 80 character length of record name field actionPlanSubjectToName(subject, maxChars) Single method to shorten long strings to the dynamically described character length of record name field adjustTaskDueDate(actionPlanStartDate, taskDaysFromStart, apSkipDay) Given a task due date, we adjust it here for weekends canSendEmails() Is the org allowed to send emails? This could be because deliverability is off, or because we have hit the org limits for emails canShareRecord(recordId, recordOwnerId) We can get all the permissions and info required to see if the user can share the record RecordOwner, has Full Access, has ModifyAllData checkOrgDefaultCustomSetting(insertIfNull) Get the Default Custom Setting(Organization level) and insert if specified We cannot insert in a Visualforce constructor, but we can in a page OnLoad action getCanDisplayReminder() Verifies that the user is able to add reminders. Checks the existence of a reminder setting field of the user object. Mathod can be improved by asking for Reminder Options at Activity settings. Does not query if the user wants reminders by default. getCanTransfer(recordId) Does the user have permission to transfer? We query UserRecordAccess . getCheckReminderByDefault() Check user preferences for whether to show task reminders by default getClosedTaskStatuses() Set of all Task  Status values that are Closed getCustomRelationshipFields() Check the fieldSet for all active Action Plan relationaship fields(available parent objects) getCustomSetting() Get the \"Default\" Custom Setting and return it. getDayOfWeek(theDate) Given a date, give the English day of the week getDefaultReminderMinutes() Gets task reminder default time for current user getDefaultTaskRecordTypeId() Find user default Task RecordType getEscapedPageParameter(paramKey) Utility method to check if the page parameters contain a key, and then return the escaped value. Used because PMD wants it, and because XSS is a serious problem getFieldOptions(objectname, fieldname, requireValue) For a given object/field, generate a Visualforce Picklist getHoursOption() Set the Hours for select box of Reminder Time getIsLex() Detect user theme - TRUE if we are in LEX getObjectKeyPrefix(objName) Get prefix of sObject getOpenTaskStatuses() Lazy load open task statuses getRelatedSObjectDescribe(recordId) Store a map of object prefixes to describe info so we can fill the ActionPlan__c  related record fields getTaskRecordTypePriorityDefaultValues() Generate default Task Priority picklist getTaskRecordTypes() Lazy load task record types to reduce queries We use SObject so this works in orgs without Record Types for Tasks getTaskRecordTypeStatusDefaultValues() Generate Map of Record Type Id to default Task Status getTaskRecordTypeTypeDefaultValues() Generate Map of Record Type Id to default Task Type getTaskRTPicklistValues() Generate picklist of Task RecordType getWeekendDay(developerName) Get the Custom Metadata record for the weekend day idStartsWith(idParam, compareString) Basic utility method to avoid repeatedly casting Ids to Strings to test for startsWith(User vs Group) onPageLoad() Actions to perform whenever loading a Visualforce page Ensures that Custom Setting is created for the org Left as this method in case we want to add certain actions to both Creation Visualforce pages in the future queryRecordIDToRecordName(recordIDs) Give a set of recordIDs and retrieve the related record names actionPlanSubjectToName(subject) Single method to shorten long strings to the hard-coded 80 character length of record name field Signature public static String actionPlanSubjectToName(String subject) Parameters subject Type: String the long string Returns String  the full string or shortened if longer than 80 characters actionPlanSubjectToName(subject, maxChars) Single method to shorten long strings to the dynamically described character length of record name field Signature public static String actionPlanSubjectToName(String subject, Integer maxChars) Parameters subject Type: String the long string maxChars Type: Integer the maximum length allowed for Action Plan Subject Returns String  the full string(or shortened if longer than max characters) adjustTaskDueDate(actionPlanStartDate, taskDaysFromStart, apSkipDay) Given a task due date, we adjust it here for weekends Signature public static Date adjustTaskDueDate(Date actionPlanStartDate, Integer taskDaysFromStart, String apSkipDay) Parameters actionPlanStartDate Type: Date the start date of the action plan taskDaysFromStart Type: Integer the days after the initial date that the task will be due apSkipDay Type: String Start or End(determines how to handle weekend day) Returns Date  the new task due date canSendEmails() Is the org allowed to send emails? This could be because deliverability is off, or because we have hit the org limits for emails Signature public static Boolean canSendEmails() Returns Boolean  Can the org send an email? canShareRecord(recordId, recordOwnerId) We can get all the permissions and info required to see if the user can share the record RecordOwner, has Full Access, has ModifyAllData Signature public static Boolean canShareRecord(Id recordId, Id recordOwnerId) Parameters recordId Type: Id The recordId of the record in question recordOwnerId Type: Id The owner Id because an owner can share even without \"Modify all Data\" Returns Boolean  Can the user share the record? Author David Schach checkOrgDefaultCustomSetting(insertIfNull) Get the Default Custom Setting(Organization level) and insert if specified We cannot insert in a Visualforce constructor, but we can in a page OnLoad action Signature public static Action_Plans_Settings__c checkOrgDefaultCustomSetting(Boolean insertIfNull) Parameters insertIfNull Type: Boolean Boolean  Should we insert the Organization Custom Setting if there isn't one? Returns Action_Plans_Settings__c  The Settings object Author David Schach getCanDisplayReminder() Verifies that the user is able to add reminders. Checks the existence of a reminder setting field of the user object. Mathod can be improved by asking for Reminder Options at Activity settings. Does not query if the user wants reminders by default. Signature public static Boolean getCanDisplayReminder() Returns Boolean  if the user has access to reminders getCanTransfer(recordId) Does the user have permission to transfer? We query UserRecordAccess . Signature public static Boolean getCanTransfer(Id recordId) Parameters recordId Type: Id sample record Id that can be used to find user permission Returns Boolean  yes/no Author David Schach getCheckReminderByDefault() Check user preferences for whether to show task reminders by default Signature public static Boolean getCheckReminderByDefault() Returns Boolean  if Task reminder checkbox should be checked by default(this will override default value) getClosedTaskStatuses() Set of all Task  Status values that are Closed Signature public static Set<String> getClosedTaskStatuses() Returns Set<String>  Set of closed Task  Statuses Author David Schach getCustomRelationshipFields() Check the fieldSet for all active Action Plan relationaship fields(available parent objects) Signature public static List<String> getCustomRelationshipFields() Returns List<String>  List of field names Author David Schach getCustomSetting() Get the \"Default\" Custom Setting and return it. Signature public static Action_Plans_Settings__c getCustomSetting() Returns Action_Plans_Settings__c  cSetting getDayOfWeek(theDate) Given a date, give the English day of the week Signature public static String getDayOfWeek(Date theDate) Parameters theDate Type: Date The given date Returns String  The day of hte week in English Author David Schach getDefaultReminderMinutes() Gets task reminder default time for current user Signature public static String getDefaultReminderMinutes() Returns String  picklist value for default minutes after midnight for reminder getDefaultTaskRecordTypeId() Find user default Task RecordType Signature public static String getDefaultTaskRecordTypeId() Returns String  Default RecordType Id getEscapedPageParameter(paramKey) Utility method to check if the page parameters contain a key, and then return the escaped value. Used because PMD wants it, and because XSS is a serious problem Signature public static String getEscapedPageParameter(String paramKey) Parameters paramKey Type: String The page parameter key Returns String  Escaped(single quotes escaped) value for that key, if present. Otherwise, null; Author David Schach getFieldOptions(objectname, fieldname, requireValue) For a given object/field, generate a Visualforce Picklist Signature public static List<SelectOption> getFieldOptions(String objectname, String fieldname, Boolean requireValue) Parameters objectname Type: String Object Nams fieldname Type: String Field Name requireValue Type: Boolean We can provide the option of not selecting the value by default Returns List<SelectOption>  Picklist for a field Author David Schach getHoursOption() Set the Hours for select box of Reminder Time Signature public static List<SelectOption> getHoursOption() Returns List<SelectOption>  Hours/time options getIsLex() Detect user theme - TRUE if we are in LEX Signature public static Boolean getIsLex() Returns Boolean  Are we in Lightning Experience? getObjectKeyPrefix(objName) Get prefix of sObject Signature public static String getObjectKeyPrefix(String objName) Parameters objName Type: String SObject Name Returns String  obj.getKeyPrefix() Example ActionPlansUtilities.getObjetKeyPrefix('Account'); (returns '001') getOpenTaskStatuses() Lazy load open task statuses Signature public static Set<String> getOpenTaskStatuses() Returns Set<String>  All Open Task Status  values getRelatedSObjectDescribe(recordId) Store a map of object prefixes to describe info so we can fill the ActionPlan__c  related record fields Signature public static Schema.DescribeSObjectResult getRelatedSObjectDescribe(Id recordId) Parameters recordId Type: Id related record Id Returns Schema.DescribeSObjectResult  so we can get info about the related record Author David Schach getTaskRecordTypePriorityDefaultValues() Generate default Task Priority picklist Signature public static Map<Id, String> getTaskRecordTypePriorityDefaultValues() Returns Map<Id, String>  Map of RecordTypeId  to default Task Priority getTaskRecordTypes() Lazy load task record types to reduce queries We use SObject so this works in orgs without Record Types for Tasks Signature private static List<SObject> getTaskRecordTypes() Returns List<SObject>  A list of all Task RecordType  records getTaskRecordTypeStatusDefaultValues() Generate Map of Record Type Id to default Task Status Signature public static Map<Id, String> getTaskRecordTypeStatusDefaultValues() Returns Map<Id, String>  Default Status for each Task RecordType  Id getTaskRecordTypeTypeDefaultValues() Generate Map of Record Type Id to default Task Type Signature public static Map<Id, String> getTaskRecordTypeTypeDefaultValues() Returns Map<Id, String>  Map of RecordTypeId  to default Task Type getTaskRTPicklistValues() Generate picklist of Task RecordType Signature public static List<SelectOption> getTaskRTPicklistValues() Returns List<SelectOption>  Visualforce Picklist getWeekendDay(developerName) Get the Custom Metadata record for the weekend day Signature public static Weekend_Day__mdt getWeekendDay(String developerName) Parameters developerName Type: String English day(Saturday, Sunday, etc) Returns Weekend_Day__mdt  Custom Metadata Author David Schach idStartsWith(idParam, compareString) Basic utility method to avoid repeatedly casting Ids to Strings to test for startsWith(User vs Group) Signature public static Boolean idStartsWith(Id idParam, String compareString) Parameters idParam Type: Id The Id passed to the method compareString Type: String The string we compare for the string's start Returns Boolean  true/false Author David Schach onPageLoad() Actions to perform whenever loading a Visualforce page Ensures that Custom Setting is created for the org Left as this method in case we want to add certain actions to both Creation Visualforce pages in the future Signature public static PageReference onPageLoad() Returns PageReference  null See checkOrgDefaultCustomSetting queryRecordIDToRecordName(recordIDs) Give a set of recordIDs and retrieve the related record names Signature public static Map<Id, String> queryRecordIDToRecordName(Set<Id> recordIDs) Parameters recordIDs Type: Set<Id> Set<Id> of parent records to Action Plans Returns Map<Id, String>  Map of RecordID to Record Name(special for Case & Contract) See getRelatedSObjectDescribe Author David Schach"
    },
    {
        "title": "CanTheUser",
        "fileName": "CanTheUser.html",
        "text": "CanTheUser A reusable, intuitive library for determining wether or not the current use can create, read, edit, or delete objects as well as determining if the user has access or update permissions on specific fields. This class name was chosen to facilitate easy-to-understand and read code. Whenever you need to check FLS or CRUD access your code reads like this if(CanTheUser.read(new account())){}  making the calling and use of this code easy and intuitive. Taken from Codefriar code. Signature public inherited sharing class CanTheUser See https://github.com/codefriar/CanTheUser , https://github.com/trailheadapps/apex-recipes Author Codefriar Since 2021 CanTheUser Properties Name Signature Annotations Description accessibleFieldsByObject private static Map<String, Set<String>> accessibleFieldsByObject @testVisible memoizedFLSResults private static Map<String, Map<FLSType, Boolean>> memoizedFLSResults This variable stores, within the same transaction, all previously calculated FLS results for an object. This prevents multiple calls to this library within the same transaction from executing more than a single describe call. updatableFieldsByObject private static Map<String, Set<String>> updatableFieldsByObject @testVisible Enums Name Signature Values CrudType public enum CrudType CREATEABLE, READABLE, EDITABLE, DELETABLE, UPSERTABLE FLSType public enum FLSType ACCESSIBLE, UPDATABLE CanTheUser Methods bulkFLSAccessible(obj, fields) bulk form of flsAccessible bulkFLSUpdatable(obj, fields) bulk form of flsUpdatable call calculateFLS(objType) Calculates the FLS for a given object type create(obj) Convenience API for determining if the running user can create the specified object create(objs) Convenience API for determining if the running user can create the specified object create(objName) Convenience API for determining if the running user can create the specified object crud(obj, permission) This class' name was chosen to facilitate easy-to-understand and read code. Whenever you need to check FLS or CRUD access your code reads like this if(CanTheUser.read(new account())){}  making the calling and use of this code easy and intuitive. crud(objs, permission) crud(objectName, permission) destroy(obj) Convenience API for determining if the running user can delete/destroy the specified object destroy(objs) Convenience API for determining if the running user can delete/destroy the specified object destroy(objName) Convenience API for determining if the running user can delete the specified object edit(obj) Convenience API for determining if the running user can edit/update the specified object edit(objs) Convenience API for determining if the running user can edit/update the specified objects edit(objName) Convenience API for determining if the running user can edit/update the specified object flsAccessible(obj, field) public static method to determine if a given field on a given object is Accessible(readable) flsUpdatable(obj, field) public static method to determine if a given field on a given object is Updatable. getFLSForFieldOnObject(obj, field, checkType) Abstracted method for retrieving or calculating(memoization) of the FLS for a given field on a given object. read(obj) Convenience API for determining if the running user can read / access the specified object read(objs) Convenience API for determining if the running user can read/access the specified objects read(objName) Convenience API for determining if the running user can read/access the specified object ups(obj) Convenience API for determining if the running user can upsert(insert and update) the specified objects ups(objs) Convenience API for determining if the running user can edit/update the specified objects ups(objName) Convenience API for determining if the running user can upsert the specified object bulkFLSAccessible(obj, fields) bulk form of flsAccessible Signature public static Map<String, Boolean> bulkFLSAccessible(String obj, Set<String> fields) Parameters obj Type: String Obj name on which to check fields Type: Set<String> Set of Fields to check for accessibility. Returns Map<String, Boolean> (FieldName, true/false) Example String[] fields = new String[]{'Name', 'ShippingStreet'}; System.debug(CanTheUser.bulkFLSAccessible('Account', fields)); bulkFLSUpdatable(obj, fields) bulk form of flsUpdatable call Signature public static Map<String, Boolean> bulkFLSUpdatable(String obj, Set<String> fields) Parameters obj Type: String Name of the object fields Type: Set<String> Set of Field names to check Returns Map<String, Boolean> (FieldName, true/false) Example String[] fields = new String[]{'Name', 'ShippingStreet'}; System.debug(CanTheUser.bulkFLSUpdatable('Account', fields)); calculateFLS(objType) Calculates the FLS for a given object type Signature private static Map<String, Map<FLSType, Boolean>> calculateFLS(String objType) Parameters objType Type: String String name of the object type Returns Map<String, Map<FLSType, Boolean>> create(obj) Convenience API for determining if the running user can create the specified object Signature public static Boolean create(SObject obj) Parameters obj Type: SObject Object type to check create permissions on Returns Boolean Example System.debug(CanTheUser.create(new Account())); create(objs) Convenience API for determining if the running user can create the specified object Signature public static Boolean create(List<SObject> objs) Parameters objs Type: List<SObject> list of objects. Only the first will be checked.(logically, a list is of uniform type and, and if the user can create one) Returns Boolean create(objName) Convenience API for determining if the running user can create the specified object Signature public static Boolean create(String objName) Parameters String Object type to check create permissions on Returns Boolean Example System.debug(CanTheUser.create('Account')); crud(obj, permission) This class' name was chosen to facilitate easy-to-understand and read code. Whenever you need to check FLS or CRUD access your code reads like this if(CanTheUser.read(new account())){}  making the calling and use of this code easy and intuitive. Signature @testVisible private static Boolean crud(SObject obj, CrudType permission) crud(objs, permission) Signature @testVisible private static Boolean crud(List<SObject> objs, CrudType permission) crud(objectName, permission) Signature @testVisible private static Boolean crud(String objectName, CrudType permission) destroy(obj) Convenience API for determining if the running user can delete/destroy the specified object Signature public static Boolean destroy(SObject obj) Parameters obj Type: SObject object type to check destroy permissions on Returns Boolean Example System.debug(CanTheUser.destroy(new Account())); destroy(objs) Convenience API for determining if the running user can delete/destroy the specified object Signature public static Boolean destroy(List<SObject> objs) Parameters String Object type to check delete permissions on Returns Boolean destroy(objName) Convenience API for determining if the running user can delete the specified object Signature public static Boolean destroy(String objName) Parameters String Object type to check create permissions on Returns Boolean Example System.debug(CanTheUser.destroy('Account')); edit(obj) Convenience API for determining if the running user can edit/update the specified object Signature public static Boolean edit(SObject obj) Parameters obj Type: SObject object type to check edit permissions on Returns Boolean Example System.debug(CanTheUser.edit(new Account())); edit(objs) Convenience API for determining if the running user can edit/update the specified objects Signature public static Boolean edit(List<SObject> objs) Parameters obj object type to check edit permissions on Returns Boolean edit(objName) Convenience API for determining if the running user can edit/update the specified object Signature public static Boolean edit(String objName) Parameters String Object type to check edit permissions on Returns Boolean Example System.debug(CanTheUser.edit('Account')); flsAccessible(obj, field) public static method to determine if a given field on a given object is Accessible(readable) Signature public static Boolean flsAccessible(String obj, String field) Parameters obj Type: String the object in question, in String  form(object name) field Type: String the field in question in String  form(field name) Returns Boolean See CanTheUser.getFLSForFieldOnObject Example System.debug(CanTheUser.flsAccessible('Account', 'Name')); flsUpdatable(obj, field) public static method to determine if a given field on a given object is Updatable. Signature public static Boolean flsUpdatable(String obj, String field) Parameters obj Type: String the string version of an object name field Type: String the field to check Returns Boolean See CanTheUser.getFLSForFieldOnObject Example System.debug(CanTheUser.flsUpdatable('Account', 'Name')); getFLSForFieldOnObject(obj, field, checkType) Abstracted method for retrieving or calculating(memoization) of the FLS for a given field on a given object. Signature private static Boolean getFLSForFieldOnObject(String obj, String field, FLSType checkType) Parameters obj Type: String String version of object name to check field Type: String String version of the field to check checkType Type: FLSType Enum of Accessible or Updatable. Returns Boolean read(obj) Convenience API for determining if the running user can read / access the specified object Signature public static Boolean read(SObject obj) Parameters obj Type: SObject object type to check read permissions on Returns Boolean Example System.debug(CanTheUser.read(new Account())); read(objs) Convenience API for determining if the running user can read/access the specified objects Signature public static Boolean read(List<SObject> objs) Parameters obj object type to check read permissions on Returns Boolean Example CanTheUser.read(new List<Account>{a1, a2})); read(objName) Convenience API for determining if the running user can read/access the specified object Signature public static Boolean read(String objName) Parameters String Object type to check read permissions on Returns Boolean Example System.debug(CanTheUser.read('Account')); ups(obj) Convenience API for determining if the running user can upsert(insert and update) the specified objects Signature public static Boolean ups(SObject obj) Parameters obj Type: SObject object type to check edit permissions on Returns Boolean Example System.debug(CanTheUser.ups(new Account())); ups(objs) Convenience API for determining if the running user can edit/update the specified objects Signature public static Boolean ups(List<SObject> objs) Parameters obj object type to check upsert permissions on Returns Boolean ups(objName) Convenience API for determining if the running user can upsert the specified object Signature public static Boolean ups(String objName) Parameters String Object type to check upsert permissions on Returns Boolean Example System.debug(CanTheUser.ups('Account'));"
    },
    {
        "title": "ActionPlanCreateInvocableTest",
        "fileName": "ActionPlanCreateInvocableTest.html",
        "text": "ActionPlanCreateInvocableTest Test class for Invocable Apex class Signature @IsTest private class ActionPlanCreateInvocableTest See ActionPlanCreateInvocable Author David Schach Since 2022 2023 System.assert to Assert class + error messages ActionPlanCreateInvocableTest Properties Name Signature BULK_COUNT private static final Integer BULK_COUNT TASK_COUNT private static final Integer TASK_COUNT ActionPlanCreateInvocableTest Methods bogusTemplateName() bulkAccounts() checkWeekendDueDate() relatedAccount() relatedCampaign() relatedCase() relatedContact() relatedContract() relatedLead() relatedOpportunity() setupRequest(templateId, relatedID, daysToActionPlanStart) Helper method for setting up a request for Invocable Apex setupRequest(templateId, relatedID, daysToActionPlanStart, actionPlanName) Helper method for setting up a request for Invocable Apex bogusTemplateName() Signature @IsTest private static void bogusTemplateName() bulkAccounts() Signature @IsTest private static void bulkAccounts() checkWeekendDueDate() Signature @IsTest private static void checkWeekendDueDate() relatedAccount() Signature @IsTest private static void relatedAccount() relatedCampaign() Signature @IsTest private static void relatedCampaign() relatedCase() Signature @IsTest private static void relatedCase() relatedContact() Signature @IsTest private static void relatedContact() relatedContract() Signature @IsTest private static void relatedContract() relatedLead() Signature @IsTest private static void relatedLead() relatedOpportunity() Signature @IsTest private static void relatedOpportunity() setupRequest(templateId, relatedID, daysToActionPlanStart) Helper method for setting up a request for Invocable Apex Signature private static ActionPlanCreateInvocable.CreateActionPlanRequest setupRequest(String templateId, Id relatedID, Integer daysToActionPlanStart) Parameters templateId Type: String Name or Id of Action Plan Template relatedID Type: Id Parent record Id daysToActionPlanStart Type: Integer Days after today to start the first task Returns ActionPlanCreateInvocable.CreateActionPlanRequest  Used in Invocable Apex See ActionPlanCreateInvocableTest.setupRequest setupRequest(templateId, relatedID, daysToActionPlanStart, actionPlanName) Helper method for setting up a request for Invocable Apex Signature private static ActionPlanCreateInvocable.CreateActionPlanRequest setupRequest(String templateId, Id relatedID, Integer daysToActionPlanStart, String actionPlanName) Parameters templateId Type: String Name or Id of Action Plan Template relatedID Type: Id Parent record Id daysToActionPlanStart Type: Integer Days after today to start the first task actionPlanName Type: String Intended name of the Action Plan Returns ActionPlanCreateInvocable.CreateActionPlanRequest  Used in Invocable Apex See ActionPlanCreateInvocableTest.setupRequest"
    },
    {
        "title": "ActionPlanCreationControllerTest",
        "fileName": "ActionPlanCreationControllerTest.html",
        "text": "ActionPlanCreationControllerTest Tests for ActionPlan__c  Create/Edit Visualforce Extension Signature @IsTest private class ActionPlanCreationControllerTest See ActionPlanCreationController Author David Schach Since 2022 2023 System.assert to Assert class + error messages ActionPlanCreationControllerTest Methods actionPlanSave() actionPlanSaveAndMakeDependent() actionPlanSaveAndNew() addNewTask() changeAPTaskOwner() checkActionPlanTaskList() checkCompletedTasks() checkMaxTasks() checkMaxTasksError() checkReferredObject() checkSubjectItems() constructorTests() cyclicDependencyTasksFail() cyclicDependencyTaskSuccess() forceNoRecordTypes() forceRecordTypes() longNameTasks() makeData() newAPWithoutTasks() relateToMultipleContacts() removeActionPlanTask() saveAndDelete() saveAndView() setTaskRecordType() singleRecordConstructor() actionPlanSave() Signature @IsTest private static void actionPlanSave() actionPlanSaveAndMakeDependent() Signature @IsTest private static void actionPlanSaveAndMakeDependent() actionPlanSaveAndNew() Signature @IsTest private static void actionPlanSaveAndNew() addNewTask() Signature @IsTest private static void addNewTask() changeAPTaskOwner() Signature @IsTest private static void changeAPTaskOwner() checkActionPlanTaskList() Signature @IsTest private static void checkActionPlanTaskList() checkCompletedTasks() Signature @IsTest private static void checkCompletedTasks() checkMaxTasks() Signature @IsTest private static void checkMaxTasks() checkMaxTasksError() Signature @IsTest private static void checkMaxTasksError() checkReferredObject() Signature @IsTest private static void checkReferredObject() checkSubjectItems() Signature @IsTest private static void checkSubjectItems() constructorTests() Signature @IsTest private static void constructorTests() cyclicDependencyTasksFail() Signature @IsTest private static void cyclicDependencyTasksFail() cyclicDependencyTaskSuccess() Signature @IsTest private static void cyclicDependencyTaskSuccess() forceNoRecordTypes() Signature @IsTest private static void forceNoRecordTypes() forceRecordTypes() Signature @IsTest private static void forceRecordTypes() longNameTasks() Signature @IsTest private static void longNameTasks() makeData() Signature @TestSetup private static void makeData() newAPWithoutTasks() Signature @IsTest private static void newAPWithoutTasks() relateToMultipleContacts() Signature @IsTest private static void relateToMultipleContacts() removeActionPlanTask() Signature @IsTest private static void removeActionPlanTask() saveAndDelete() Signature @IsTest private static void saveAndDelete() saveAndView() Signature @IsTest private static void saveAndView() setTaskRecordType() Signature @IsTest private static void setTaskRecordType() singleRecordConstructor() Signature @IsTest private static void singleRecordConstructor()"
    },
    {
        "title": "ActionPlanCreationTaskWrapperTest",
        "fileName": "ActionPlanCreationTaskWrapperTest.html",
        "text": "ActionPlanCreationTaskWrapperTest Tests for ActionPlanCreationController.ApTaskWrapper  Create/Edit wrapper class Signature @IsTest private class ActionPlanCreationTaskWrapperTest See ActionPlanCreationController.ApTaskWrapper , ActionPlanCreationController Author David Schach Since 2022 ActionPlanCreationTaskWrapperTest Methods checkActionPlanTaskList() doEditActionPlan() doTemplateCreateEdit() editActionPlanAssignByDefault() editActionPlanNOTAssignByDefault() makeData() For most tests, assign blank tasks to parent owner. We can override in specific tests. makeFromTemplateAssignByDefault() makeFromTemplateNOTAssignByDefault() checkActionPlanTaskList() Signature @IsTest private static void checkActionPlanTaskList() doEditActionPlan() Signature private static ActionPlanCreationController doEditActionPlan() doTemplateCreateEdit() Signature private static ActionPlanCreationController doTemplateCreateEdit() editActionPlanAssignByDefault() Signature @IsTest private static void editActionPlanAssignByDefault() editActionPlanNOTAssignByDefault() Signature @IsTest private static void editActionPlanNOTAssignByDefault() makeData() For most tests, assign blank tasks to parent owner. We can override in specific tests. Signature @TestSetup private static void makeData() makeFromTemplateAssignByDefault() Signature @IsTest private static void makeFromTemplateAssignByDefault() makeFromTemplateNOTAssignByDefault() Signature @IsTest private static void makeFromTemplateNOTAssignByDefault()"
    },
    {
        "title": "ActionPlanDetailControllerTest",
        "fileName": "ActionPlanDetailControllerTest.html",
        "text": "ActionPlanDetailControllerTest Tests for ActionPlan__c  View Controller Signature @IsTest private class ActionPlanDetailControllerTest See ActionPlanDetailController Author David Schach ActionPlanDetailControllerTest Methods checkActionPlanTemplateVersion() checkDeleteActionPlan() checkDependentTasks() checkGetRelatedRecordName() checkNoTasks() checkTasks() constructorTests() forceNoRecordType() forceRecordType() checkActionPlanTemplateVersion() Signature @IsTest private static void checkActionPlanTemplateVersion() checkDeleteActionPlan() Signature @IsTest private static void checkDeleteActionPlan() checkDependentTasks() Signature @IsTest private static void checkDependentTasks() checkGetRelatedRecordName() Signature @IsTest private static void checkGetRelatedRecordName() checkNoTasks() Signature @IsTest private static void checkNoTasks() checkTasks() Signature @IsTest private static void checkTasks() constructorTests() Signature @IsTest private static void constructorTests() forceNoRecordType() Signature @IsTest private static void forceNoRecordType() forceRecordType() Signature @IsTest private static void forceRecordType()"
    },
    {
        "title": "ActionPlanTemplateCreationCntrlTest",
        "fileName": "ActionPlanTemplateCreationCntrlTest.html",
        "text": "ActionPlanTemplateCreationCntrlTest Signature @IsTest private class ActionPlanTemplateCreationCntrlTest See ActionPlanTemplateCreationController Author David Schach  2since 2022 ActionPlanTemplateCreationCntrlTest Properties Name Signature TEMPLATE_TASKS_COUNT private static final Integer TEMPLATE_TASKS_COUNT ActionPlanTemplateCreationCntrlTest Methods addNewActionPlanTemplateTask() addTemplateTask() cancel() checkMaxTasksError() checkTemplateSubjectItem() checkTemplateTaskSize() contructor() cyclicDependencyFail() cyclicDependencySuccess() forceNoRecordType() itselfCyclicDependencyFail() longNameTemplateTasks() removeTemplateTask() removingActionPlanTemplateTask() retrievingTemplateTasks() save() saveTemplate() setTaskRecordType() addNewActionPlanTemplateTask() Signature @IsTest private static void addNewActionPlanTemplateTask() addTemplateTask() Signature @IsTest private static void addTemplateTask() cancel() Signature @IsTest private static void cancel() checkMaxTasksError() Signature @IsTest private static void checkMaxTasksError() checkTemplateSubjectItem() Signature @IsTest private static void checkTemplateSubjectItem() checkTemplateTaskSize() Signature @IsTest private static void checkTemplateTaskSize() contructor() Signature @IsTest private static void contructor() cyclicDependencyFail() Signature @IsTest private static void cyclicDependencyFail() cyclicDependencySuccess() Signature @IsTest private static void cyclicDependencySuccess() forceNoRecordType() Signature @IsTest private static void forceNoRecordType() itselfCyclicDependencyFail() Signature @IsTest private static void itselfCyclicDependencyFail() longNameTemplateTasks() Signature @IsTest private static void longNameTemplateTasks() removeTemplateTask() Signature @IsTest private static void removeTemplateTask() removingActionPlanTemplateTask() Signature @IsTest private static void removingActionPlanTemplateTask() retrievingTemplateTasks() Signature @IsTest private static void retrievingTemplateTasks() save() Signature @IsTest private static void save() saveTemplate() Signature @IsTest private static void saveTemplate() setTaskRecordType() Signature @IsTest private static void setTaskRecordType()"
    },
    {
        "title": "ActionPlanTemplateDetailCntrlTest",
        "fileName": "ActionPlanTemplateDetailCntrlTest.html",
        "text": "ActionPlanTemplateDetailCntrlTest Tests for ActionPlanTemplate__c  ActionPlanTemplateDetailController Signature @IsTest private class ActionPlanTemplateDetailCntrlTest See ActionPlanTemplateDetailController Author David Schach Since 2022 ActionPlanTemplateDetailCntrlTest Methods checkNoTasks() constructor() deleteActionPlanTemplate() exportTest() forceNoRecordType() forceRecordType() retrievingActionPlanTemplate() retrievingTemplateTasks() checkNoTasks() Signature @IsTest private static void checkNoTasks() constructor() Signature @IsTest private static void constructor() deleteActionPlanTemplate() Signature @IsTest private static void deleteActionPlanTemplate() exportTest() Signature @IsTest private static void exportTest() forceNoRecordType() Signature @IsTest private static void forceNoRecordType() forceRecordType() Signature @IsTest private static void forceRecordType() retrievingActionPlanTemplate() Signature @IsTest private static void retrievingActionPlanTemplate() retrievingTemplateTasks() Signature @IsTest private static void retrievingTemplateTasks()"
    },
    {
        "title": "ActionPlanTemplateExportTest",
        "fileName": "ActionPlanTemplateExportTest.html",
        "text": "ActionPlanTemplateExportTest Tests for Template Export Signature @IsTest private class ActionPlanTemplateExportTest See ActionPlanTemplateExport , ActionPlanTemplateImportController Author David Schach Since 2022 2023 System.assert to Assert class + error messages ActionPlanTemplateExportTest Methods exportDocTest() exportFileTest() exportTest() exportDocTest() Signature @IsTest private static void exportDocTest() exportFileTest() Signature @IsTest private static void exportFileTest() exportTest() Signature @IsTest private static void exportTest()"
    },
    {
        "title": "ActionPlanTemplateImportCntrlTest",
        "fileName": "ActionPlanTemplateImportCntrlTest.html",
        "text": "ActionPlanTemplateImportCntrlTest Test class for importing Action Plan Template XML Signature @IsTest private class ActionPlanTemplateImportCntrlTest See ActionPlanTemplateImportController Author David Schach Since 2022 2023 System.assert to Assert class + error messages ActionPlanTemplateImportCntrlTest Properties Name Signature xmlImport private static String xmlImport xmlImportEmptyMetaData private static String xmlImportEmptyMetaData xmlImportFromExport private static String xmlImportFromExport xmlImportWrongAPTask private static String xmlImportWrongAPTask xmlImportWrongAPTemplate private static String xmlImportWrongAPTemplate xmlImportWrongMetaData private static String xmlImportWrongMetaData xmlWithControllingTasks private static String xmlWithControllingTasks ActionPlanTemplateImportCntrlTest Methods badFields() controllingTask() roundTrip() xMLImport() xMLImportEmptyAttachment() xMLImportEmptyXML() xMLImportFromExport() xMLImportWrongMetaData() xMLImportWrongTemplate() xMLImportWrongTemplateTask() badFields() Signature @IsTest private static void badFields() controllingTask() Signature @IsTest private static void controllingTask() roundTrip() Signature @IsTest private static void roundTrip() xMLImport() Signature @IsTest private static void xMLImport() xMLImportEmptyAttachment() Signature @IsTest private static void xMLImportEmptyAttachment() xMLImportEmptyXML() Signature @IsTest private static void xMLImportEmptyXML() xMLImportFromExport() Signature @IsTest private static void xMLImportFromExport() xMLImportWrongMetaData() Signature @IsTest private static void xMLImportWrongMetaData() xMLImportWrongTemplate() Signature @IsTest private static void xMLImportWrongTemplate() xMLImportWrongTemplateTask() Signature @IsTest private static void xMLImportWrongTemplateTask()"
    },
    {
        "title": "ActionPlansCreateMultipleAPsExtTest",
        "fileName": "ActionPlansCreateMultipleAPsExtTest.html",
        "text": "ActionPlansCreateMultipleAPsExtTest Tests for the Visualforce controller extension for the button to enable creation of multiple action plans for all checked records in a list view Signature @IsTest private class ActionPlansCreateMultipleAPsExtTest See ActionPlansCreateMultipleAPsExtension Author David Schach Since 2022 2023 System.assert to Assert class + error messages ActionPlansCreateMultipleAPsExtTest Methods givenNoRecordsToCreateThenNotCreated() givenRecordsToCreateThenCreated() givenNoRecordsToCreateThenNotCreated() Signature @IsTest private static void givenNoRecordsToCreateThenNotCreated() givenRecordsToCreateThenCreated() Signature @IsTest private static void givenRecordsToCreateThenCreated()"
    },
    {
        "title": "ActionPlansDeleteMultipleAPExtTest",
        "fileName": "ActionPlansDeleteMultipleAPExtTest.html",
        "text": "ActionPlansDeleteMultipleAPExtTest Signature @IsTest private class ActionPlansDeleteMultipleAPExtTest See ActionPlansDeleteMultipleAPsExtension Author David Schach ActionPlansDeleteMultipleAPExtTest Properties Name Signature APS_TO_CREATE private static final Integer APS_TO_CREATE ActionPlansDeleteMultipleAPExtTest Methods datasetup() givenNoRecordsToDeleteThenNotDeleted() givenRecordsToDeleteThenDeleted() noDeletePermission() datasetup() Signature @testSetup private static void datasetup() givenNoRecordsToDeleteThenNotDeleted() Signature @IsTest private static void givenNoRecordsToDeleteThenNotDeleted() givenRecordsToDeleteThenDeleted() Signature @IsTest private static void givenRecordsToDeleteThenDeleted() noDeletePermission() Signature @IsTest private static void noDeletePermission()"
    },
    {
        "title": "ActionPlansObjectTriggersTest",
        "fileName": "ActionPlansObjectTriggersTest.html",
        "text": "ActionPlansObjectTriggersTest Tests for trigger handlers Signature @IsTest private class ActionPlansObjectTriggersTest See ActionPlansTriggerHandlers Author David Schach ActionPlansObjectTriggersTest Properties Name Signature aps private static Action_Plans_Settings__c aps ActionPlansObjectTriggersTest Methods accountTrigger() campaignTrigger() caseTrigger() contactTrigger() contractTrigger() leadConversionAccount() leadConversionContact() leadConversionOpportunity() leadTrigger() makeData() opportunityTrigger() accountTrigger() Signature @IsTest private static void accountTrigger() campaignTrigger() Signature @IsTest private static void campaignTrigger() caseTrigger() Signature @IsTest private static void caseTrigger() contactTrigger() Signature @IsTest private static void contactTrigger() contractTrigger() Signature @IsTest private static void contractTrigger() leadConversionAccount() Signature @IsTest private static void leadConversionAccount() leadConversionContact() Signature @IsTest private static void leadConversionContact() leadConversionOpportunity() Signature @IsTest private static void leadConversionOpportunity() leadTrigger() Signature @IsTest private static void leadTrigger() makeData() Signature @TestSetup private static void makeData() opportunityTrigger() Signature @IsTest private static void opportunityTrigger()"
    },
    {
        "title": "ActionPlansPostInstallScriptTest",
        "fileName": "ActionPlansPostInstallScriptTest.html",
        "text": "ActionPlansPostInstallScriptTest Test for PostInstallScript Utility Signature @IsTest private class ActionPlansPostInstallScriptTest See ActionPlansPostInstallScript Author David Schach Since 2022 2023 System.assert to Assert class + error messages ActionPlansPostInstallScriptTest Methods installScript() installScript() Signature @isTest private static void installScript()"
    },
    {
        "title": "ActionPlansQueueableBuilderTest",
        "fileName": "ActionPlansQueueableBuilderTest.html",
        "text": "ActionPlansQueueableBuilderTest Test for Action Plans Queueable Builder Signature @IsTest private class ActionPlansQueueableBuilderTest See ActionPlansQueuableBuilder Author David Schach Since 2022 2023 System.assert to Assert class + error messages ActionPlansQueueableBuilderTest Methods makeData() runQueueContact() runQueueException() makeData() Signature @TestSetup private static void makeData() runQueueContact() Signature @IsTest private static void runQueueContact() runQueueException() Signature @IsTest private static void runQueueException()"
    },
    {
        "title": "ActionPlansRedirectTest",
        "fileName": "ActionPlansRedirectTest.html",
        "text": "ActionPlansRedirectTest Test for Redirect Visualforce Controller Signature @IsTest private class ActionPlansRedirectTest See ActionPlansRedirect Author David Schach Since 2022 2023 System.assert to Assert class + error messages ActionPlansRedirectTest Methods actionPlanChangeOwner() actionPlanTemplateChangeOwner() aPTaskRedirect() aPTTaskRedirect() makeData() actionPlanChangeOwner() Signature @IsTest private static void actionPlanChangeOwner() actionPlanTemplateChangeOwner() Signature @IsTest private static void actionPlanTemplateChangeOwner() aPTaskRedirect() Signature @IsTest private static void aPTaskRedirect() aPTTaskRedirect() Signature @IsTest private static void aPTTaskRedirect() makeData() Signature @TestSetup private static void makeData()"
    },
    {
        "title": "ActionPlansSectionHeaderControllerTest",
        "fileName": "ActionPlansSectionHeaderControllerTest.html",
        "text": "ActionPlansSectionHeaderControllerTest Test class for Section Header Visualforce Controller Signature @IsTest private class ActionPlansSectionHeaderControllerTest See ActionPlansSectionHeaderController Author David Schach Since 2022 ActionPlansSectionHeaderControllerTest Methods makeData() nullObject() objectTabDescribeNegative() objectTabDescribeNotInApplication() objectTabDescribePositive() makeData() Signature @TestSetup private static void makeData() nullObject() Signature @IsTest private static void nullObject() objectTabDescribeNegative() Signature @IsTest private static void objectTabDescribeNegative() objectTabDescribeNotInApplication() Signature @IsTest private static void objectTabDescribeNotInApplication() objectTabDescribePositive() Signature @IsTest private static void objectTabDescribePositive()"
    },
    {
        "title": "ActionPlansTaskTriggerUtilitiesTest",
        "fileName": "ActionPlansTaskTriggerUtilitiesTest.html",
        "text": "ActionPlansTaskTriggerUtilitiesTest Tests for the Utilities class that handles Task updates Signature @IsTest private class ActionPlansTaskTriggerUtilitiesTest See ActionPlansTaskTriggerUtilities Author David Schach Since 2022 ActionPlansTaskTriggerUtilitiesTest Properties Name Signature testClosedStatus private static String testClosedStatus ActionPlansTaskTriggerUtilitiesTest Methods actionPlanDelete() Test Task  delete on Action Plan  delete aPTaskUndelete() Test Task  undelete on Action Plan Task  undelete aPTaskUpdate() Test Task  update on Action Plan Task  update aPTTemplateUndeleteException() test ActionPlansTaskTriggerUtilities when the user undeletes an ActionPlan Task Template coverFutureMethods() Coverage for future deletion methods because we may not use them makeData() taskAfterUpdateToCompleted() Test Task  After Update trigger when updating Status to Completed taskAfterUpdateToOpen() Test Task After Update trigger when updating task to status 'In Progress'(or another open status) taskAssignToQueue() Test when updating task owner to a queue Should not try to change APTask to a Queue, as that will break APTask(User only) Also assert that the VF page shows the Task as the APTask owner(even though it is a User under the hood) taskBeforeDelete() Test Task before delete trigger actionPlanDelete() Test Task  delete on Action Plan  delete Signature @IsTest private static void actionPlanDelete() aPTaskUndelete() Test Task  undelete on Action Plan Task  undelete Signature @IsTest private static void aPTaskUndelete() aPTaskUpdate() Test Task  update on Action Plan Task  update Signature @IsTest private static void aPTaskUpdate() aPTTemplateUndeleteException() test ActionPlansTaskTriggerUtilities when the user undeletes an ActionPlan Task Template Signature @IsTest private static void aPTTemplateUndeleteException() coverFutureMethods() Coverage for future deletion methods because we may not use them Signature @IsTest private static void coverFutureMethods() makeData() Signature @TestSetup static void makeData() taskAfterUpdateToCompleted() Test Task  After Update trigger when updating Status to Completed Signature @IsTest private static void taskAfterUpdateToCompleted() taskAfterUpdateToOpen() Test Task After Update trigger when updating task to status 'In Progress'(or another open status) Signature @IsTest private static void taskAfterUpdateToOpen() taskAssignToQueue() Test when updating task owner to a queue Should not try to change APTask to a Queue, as that will break APTask(User only) Also assert that the VF page shows the Task as the APTask owner(even though it is a User under the hood) Signature @IsTest private static void taskAssignToQueue() taskBeforeDelete() Test Task before delete trigger Signature @IsTest private static void taskBeforeDelete()"
    },
    {
        "title": "ActionPlansUtilitiesTest",
        "fileName": "ActionPlansUtilitiesTest.html",
        "text": "ActionPlansUtilitiesTest Signature @IsTest private class ActionPlansUtilitiesTest See ActionPlansUtilities Author David Schach Since 2022 2023 System.assert to Assert class + error messages ActionPlansUtilitiesTest Methods account() campaign() cancel() case() contact() contract() deleteActionPlans() doChatterPost(objectNames) A method to enable testing creating a Chatter post for any of our usual standard objects doChatterPostPart1() doChatterPostPart2() lead() makeAppTask(ap) Helper method to create APTask__c  record for an ActionPlan__c makeData() randomWord() relatedObjectId() saveMultiple() saveSingle() testObject(objectName, recordId) Pass in any object name(and its ID if a custom object) and create an Action Plan for that object Will be global in the next version so test code for custom objects can access it utilitiesRecordTypes() account() Signature @IsTest private static void account() campaign() Signature @IsTest private static void campaign() cancel() Signature @IsTest private static void cancel() case() Signature @IsTest private static void case() contact() Signature @IsTest private static void contact() contract() Signature @IsTest private static void contract() deleteActionPlans() Signature @IsTest private static void deleteActionPlans() doChatterPost(objectNames) A method to enable testing creating a Chatter post for any of our usual standard objects Signature private static void doChatterPost(List<String> objectNames) Parameters objectNames Type: List<String> The object we want to make a post for doChatterPostPart1() Signature @IsTest private static void doChatterPostPart1() doChatterPostPart2() Signature @IsTest private static void doChatterPostPart2() lead() Signature @IsTest private static void lead() makeAppTask(ap) Helper method to create APTask__c  record for an ActionPlan__c Signature private static APTask__c makeAppTask(ActionPlan__c ap) Parameters ap Type: ActionPlan__c The parent Action Plan Returns The test Action Plan Task Author David Schach makeData() Signature @TestSetup private static void makeData() randomWord() Signature @IsTest private static void randomWord() relatedObjectId() Signature @IsTest private static void relatedObjectId() saveMultiple() Signature @IsTest private static void saveMultiple() saveSingle() Signature @IsTest private static void saveSingle() testObject(objectName, recordId) Pass in any object name(and its ID if a custom object) and create an Action Plan for that object Will be global in the next version so test code for custom objects can access it Signature public static Boolean testObject(String objectName, Id recordId) Parameters objectName Type: String The object name recordId Type: Id Pass in the Id of a custom object record so we can make an Action Plan for it Returns Success at creating tasks for the Action Plan Author David Schach utilitiesRecordTypes() Signature @IsTest private static void utilitiesRecordTypes()"
    },
    {
        "title": "CanTheUserTest",
        "fileName": "CanTheUserTest.html",
        "text": "CanTheUserTest Taken from Codefriar code Signature @IsTest private class CanTheUserTest See https://github.com/codefriar/CanTheUser , https://github.com/trailheadapps/apex-recipes , CanTheUser Author Codefriar Since 2021 CanTheUserTest Methods canCrudAccountCreatePositive() canCrudAccountDeletePositive() canCrudAccountReadPositive() canCrudAccountUpdatePositive() canCrudCreateAccountPositive() canCrudDestroyAccountPositive() canCrudEditAccountPositive() canCrudReadAccountPositive() canCrudUpsertAccountPositive() generateAccounts() getBulkFLSAccessibleWithAccountPositive() getBulkFLSAccessibleWithAccountPositiveWithNegativeResults() getBulkFLSUpdatableWithAccountPositive() getBulkFLSUpdatableWithAccountPositiveWithNegativeResults() getFLSofAccountIDNegative() getFLSofAccountNamePositive() canCrudAccountCreatePositive() Signature @IsTest private static void canCrudAccountCreatePositive() canCrudAccountDeletePositive() Signature @IsTest private static void canCrudAccountDeletePositive() canCrudAccountReadPositive() Signature @IsTest private static void canCrudAccountReadPositive() canCrudAccountUpdatePositive() Signature @IsTest private static void canCrudAccountUpdatePositive() canCrudCreateAccountPositive() Signature @IsTest private static void canCrudCreateAccountPositive() canCrudDestroyAccountPositive() Signature @IsTest private static void canCrudDestroyAccountPositive() canCrudEditAccountPositive() Signature @IsTest private static void canCrudEditAccountPositive() canCrudReadAccountPositive() Signature @IsTest private static void canCrudReadAccountPositive() canCrudUpsertAccountPositive() Signature @IsTest private static void canCrudUpsertAccountPositive() generateAccounts() Signature private static List<Account> generateAccounts() getBulkFLSAccessibleWithAccountPositive() Signature @IsTest private static void getBulkFLSAccessibleWithAccountPositive() getBulkFLSAccessibleWithAccountPositiveWithNegativeResults() Signature @IsTest private static void getBulkFLSAccessibleWithAccountPositiveWithNegativeResults() getBulkFLSUpdatableWithAccountPositive() Signature @IsTest private static void getBulkFLSUpdatableWithAccountPositive() getBulkFLSUpdatableWithAccountPositiveWithNegativeResults() Signature @IsTest private static void getBulkFLSUpdatableWithAccountPositiveWithNegativeResults() getFLSofAccountIDNegative() Signature @IsTest private static void getFLSofAccountIDNegative() getFLSofAccountNamePositive() Signature @IsTest private static void getFLSofAccountNamePositive()"
    }
];
