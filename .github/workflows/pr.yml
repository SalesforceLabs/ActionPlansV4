# Unique name for this workflow
name: PR Validation
# Definition when the workflow should run
on:
  pull_request:
    types: [edited, opened, synchronize, reopened, review_requested]
    paths:
      - 'sfdx-source/**'
      - 'pmd/**'
  workflow_dispatch:
# Jobs to be executed
jobs:
  check-pmd:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:
      # Checkout the source code
      - name: 'Checkout source code'
        uses: actions/checkout@v2

      - name: 'Use latest PMD version'
        run: |
          VERSION=$(curl -s https://api.github.com/repos/pmd/pmd/releases/latest | grep '.tag_name' | sed 's:.*/::' | sed 's:",::')
          echo $VERSION
          echo -n $VERSION > pmd/pmd-version.txt

      # Install PMD
      - name: 'Install PMD'
        run: |
          PMD_VERSION=`cat pmd/pmd-version.txt`
          wget https://github.com/pmd/pmd/releases/download/pmd_releases%2F$PMD_VERSION/pmd-bin-$PMD_VERSION.zip
          unzip pmd-bin-$PMD_VERSION.zip -d ~
          mv ~/pmd-bin-$PMD_VERSION ~/pmd
          ~/pmd/bin/run.sh pmd --version

      # Run PMD scan
      - name: 'Run PMD scan'
        run: ~/pmd/bin/run.sh pmd -d sfdx-source/LabsActionPlans -R pmd/deployRules.xml -f text --cache .pmdCache --minimum-priority 2
  test-run:
    runs-on: ubuntu-latest
    needs:
      check-pmd
      # Install Salesforce CLI
    steps:
      - name: 'Install Salesforce CLI'
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
          mkdir ~/sfdx
          tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
          echo "$HOME/sfdx/bin" >> $GITHUB_PATH
          ~/sfdx/bin/sfdx version

      # Store secret for dev hub
      - name: 'Populate auth file with DEVHUB_SFDX_URL secret'
        shell: bash
        run: |
          echo ${{ secrets.DEVHUB_SFDX_URL}} > ./DEVHUB_SFDX_URL.txt
          secretFileSize=$(wc -c "./DEVHUB_SFDX_URL.txt" | awk '{print $1}')
          if [ $secretFileSize == 1 ]; then
              echo "Missing DEVHUB_SFDX_URL secret. Is this workflow running on a fork?";
              exit 1;
          fi

      # Authenticate dev hub
      - name: 'Authenticate Dev Hub'
        run: sfdx auth:sfdxurl:store -f ./DEVHUB_SFDX_URL.txt -a devhub -d

        # Add namespace to project config
      - name: Add namespace to project config
        run: |
          sed -i 's,"namespace": "","namespace": "LabsActionPlans",' sfdx-project.json

      # Create scratch org
      - name: 'Create scratch org'
        run: sfdx force:org:create -f config/project-scratch-def.json -a ActionPlans -s -d 1 -w 20 --noancestors

      # Deploy source to scratch org
      - name: 'Push source to scratch org'
        run: sfdx force:source:push

      # Assign permissionset
      - name: 'Assign permissionset to default user'
        run: sfdx force:user:permset:assign -n Action_Plans_Admin

      # Run Apex tests in scratch org
      - name: 'Run Apex tests'
        run: sfdx force:apex:test:run -c -r human -l RunLocalTests -w 20

      - name: Delete coverage file (temporary fix)
        run: rm ./test-result-707*-codecoverage.json
      - name: 'Upload code coverage for Apex to Codecov.io'
        uses: codecov/codecov-action@v2
        with:
          flags: Apex

      # Housekeeping
      - name: 'Delete scratch org'
        if: always()
        run: sfdx force:org:delete -p -u ActionPlans

      # Remove namespace from project config
      - name: Remove namespace from project config
        run: |
          sed -i 's,"namespace": "LabsActionPlans","namespace": "",' sfdx-project.json
